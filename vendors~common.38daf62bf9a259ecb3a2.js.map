{"version":3,"sources":["webpack:///../src/AdjustmentFilter.js","webpack:///../src/KawaseBlurFilter.js","webpack:///../src/ExtractBrightnessFilter.js","webpack:///../src/AdvancedBloomFilter.js","webpack:///../src/AsciiFilter.js","webpack:///../src/BevelFilter.js","webpack:///../src/BloomFilter.js","webpack:///../src/BulgePinchFilter.js","webpack:///../src/ColorMapFilter.js","webpack:///../src/ColorReplaceFilter.js","webpack:///../src/ConvolutionFilter.js","webpack:///../src/CrossHatchFilter.js","webpack:///../src/CRTFilter.js","webpack:///../src/DotFilter.js","webpack:///../src/DropShadowFilter.js","webpack:///../src/EmbossFilter.js","webpack:///../src/GlitchFilter.js","webpack:///../src/GlowFilter.js","webpack:///../src/GodrayFilter.js","webpack:///../src/MotionBlurFilter.js","webpack:///../src/MultiColorReplaceFilter.js","webpack:///../src/OldFilmFilter.js","webpack:///../src/PixelateFilter.js","webpack:///../src/RadialBlurFilter.js","webpack:///../src/ReflectionFilter.js","webpack:///../src/RGBSplitFilter.js","webpack:///../src/ShockwaveFilter.js","webpack:///../src/SimpleLightmapFilter.js","webpack:///../src/TiltShiftAxisFilter.js","webpack:///../src/TiltShiftXFilter.js","webpack:///../src/TiltShiftYFilter.js","webpack:///../src/TiltShiftFilter.js","webpack:///../src/TwistFilter.js","webpack:///../src/ZoomBlurFilter.js"],"names":["AdjustmentFilter","r","options","super","this","vertex","fragment","Object","assign","gamma","saturation","contrast","brightness","red","green","blue","alpha","apply","filterManager","input","output","clear","uniforms","Math","max","applyFilter","PIXI.Filter","KawaseBlurFilter","t","blur","quality","clamp","i","fragmentClamp","uOffset","Float32Array","_pixelSize","PIXI.Point","pixelSize","_clamp","_kernels","Array","isArray","kernels","_blur","offset","uvX","x","size","width","uvY","y","height","_quality","const","tmp","renderTarget","getRenderTarget","source","target","last","returnRenderTarget","_generateKernels","let","k","step","push","prototypeAccessors","value","length","round","ExtractBrightnessFilter","e","threshold","AdvancedBloomFilter","bloomScale","resolution","PIXI.settings","RESOLUTION","o","n","l","_extractFilter","_blurFilter","currentState","brightTarget","bloomTarget","bloomTexture","_resolution","AsciiFilter","BevelFilter","lightColor","shadowColor","rotation","thickness","lightAlpha","shadowAlpha","_updateTransform","transformX","_thickness","cos","_angle","transformY","sin","PIXI.DEG_TO_RAD","PIXI.utils","rgb2hex","hex2rgb","ref","PIXI.filters","BlurXFilter","BlurYFilter","AlphaFilter","BloomFilter","kernelSize","blurX","blurY","blurXFilter","blurYFilter","blendMode","PIXI.BLEND_MODES","SCREEN","defaultFilter","BulgePinchFilter","center","radius","strength","dimensions","__proto__","prototype","create","constructor","configurable","sourceFrame","ColorMapFilter","colorMap","nearest","mix","_size","_sliceSize","_slicePixelSize","_sliceInnerSize","_scaleMode","_nearest","_mix","colorSize","_colorMap","PIXI.Texture","from","baseTexture","scaleMode","mipmap","PIXI.SCALE_MODES","NEAREST","LINEAR","texture","_glTextures","_updateID","emit","updateColorMap","destroy","destroyBase","ColorReplaceFilter","originalColor","newColor","epsilon","arr","_originalColor","_newColor","ConvolutionFilter","matrix","texelSize","CrossHatchFilter","CRTFilter","time","seed","curvature","lineWidth","lineContrast","verticalLine","noise","noiseSize","vignetting","vignettingAlpha","vignettingBlur","DotFilter","scale","angle","DropShadowFilter","console","warn","arguments","distance","color","shadowOnly","_tintFilter","targetTransform","PIXI.Matrix","a","s","u","p","h","_updatePadding","transform","padding","_updateTargetTransform","tx","ty","_distance","EmbossFilter","GlitchFilter","slices","direction","fillMode","average","minSize","sampleSize","_canvas","document","createElement","fromCanvas","_slices","aspect","_randomizeSizes","_sizes","min","count","rest","averageWidth","w","random","ratio","sqrt","shuffle","rand","temp","_randomizeOffsets","_offsets","refresh","redraw","ctx","getContext","clearRect","floor","fillStyle","fillRect","displacementMap","sizes","len","offsets","slicesWidth","slicesOffset","_direction","radians","sinDir","cosDir","defineProperties","TRANSPARENT","ORIGINAL","LOOP","CLAMP","MIRROR","GlowFilter","outerStrength","innerStrength","replace","toFixed","glowColor","GodrayFilter","perlin","gain","lacunarity","parallel","_angleLight","light","MotionBlurFilter","velocity","uVelocity","_velocity","PIXI.ObservablePoint","velocityChanged","uKernelSize","set","copy","MultiColorReplaceFilter","replacements","maxColors","_maxColors","_replacements","originalColors","targetColors","originals","targets","colorCount","pair","targetColor","OldFilmFilter","sepia","scratch","scratchDensity","scratchWidth","PixelateFilter","RadialBlurFilter","uRadian","PI","uCenter","uRadius","Infinity","ReflectionFilter","amplitude","waveLength","mirror","boundary","RGBSplitFilter","ShockwaveFilter","wavelength","speed","SimpleLightmapFilter","ambientColor","uLightmap","_color","TiltShiftAxisFilter","gradientBlur","start","end","window","innerHeight","delta","texSize","innerWidth","updateDelta","TiltShiftXFilter","dx","dy","d","TiltShiftYFilter","TiltShiftFilter","tiltShiftXFilter","tiltShiftYFilter","TwistFilter","ZoomBlurFilter","innerRadius","uStrength","uInnerRadius"],"mappings":"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","file":"./vendors~common.38daf62bf9a259ecb3a2.js","sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './adjustment.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift. This is a faster\n * and much simpler to use than {@link http://pixijs.download/release/docs/PIXI.filters.ColorMatrixFilter.html ColorMatrixFilter}\n * because it does not use a matrix.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/adjustment.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n *\n * @param {object|number} [options] - The optional parameters of the filter.\n * @param {number} [options.gamma=1] - The amount of luminance\n * @param {number} [options.saturation=1] - The amount of color saturation\n * @param {number} [options.contrast=1] - The amount of contrast\n * @param {number} [options.brightness=1] - The overall brightness\n * @param {number} [options.red=1] - The multipled red channel\n * @param {number} [options.green=1] - The multipled green channel\n * @param {number} [options.blue=1] - The multipled blue channel\n * @param {number} [options.alpha=1] - The overall alpha amount\n */\nexport default class AdjustmentFilter extends PIXI.Filter {\n    constructor(options) {\n        super(vertex, fragment);\n\n        Object.assign(this, {\n            /**\n             * The amount of luminance\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            gamma: 1,\n\n            /**\n             * The amount of saturation\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            saturation: 1,\n\n            /**\n             * The amount of contrast\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            contrast: 1,\n\n            /**\n             * The amount of brightness\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            brightness: 1,\n\n            /**\n             * The amount of red channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            red: 1,\n\n            /**\n             * The amount of green channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            green: 1,\n\n            /**\n             * The amount of blue channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            blue: 1,\n\n            /**\n             * The amount of alpha channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            alpha: 1,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.gamma = Math.max(this.gamma, 0.0001);\n        this.uniforms.saturation = this.saturation;\n        this.uniforms.contrast = this.contrast;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.red = this.red;\n        this.uniforms.green = this.green;\n        this.uniforms.blue = this.blue;\n        this.uniforms.alpha = this.alpha;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './kawase-blur.frag';\nimport fragmentClamp from './kawase-blur-clamp.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n *        value is an Array, setting kernels.\n * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n *        from fullscreen filters or bleeding to the edge of filterArea.\n */\nexport default class KawaseBlurFilter extends PIXI.Filter {\n    constructor(blur = 4, quality = 3, clamp = false) {\n        super(vertex, clamp ? fragmentClamp : fragment);\n        this.uniforms.uOffset = new Float32Array(2);\n\n        this._pixelSize = new PIXI.Point();\n        this.pixelSize = 1;\n        this._clamp = clamp;\n        this._kernels = null;\n\n        // if `blur` is array , as kernels\n        if (Array.isArray(blur)) {\n            this.kernels = blur;\n        }\n        else {\n            this._blur = blur;\n            this.quality = quality;\n        }\n    }\n\n    /**\n     * Overrides apply\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        const uvX = this.pixelSize.x / input.size.width;\n        const uvY = this.pixelSize.y / input.size.height;\n        let offset;\n\n        if (this._quality === 1 || this._blur === 0) {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else {\n            const renderTarget = filterManager.getRenderTarget(true);\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++) {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, source, output, clear);\n\n            filterManager.returnRenderTarget(renderTarget);\n        }\n    }\n\n    /**\n     * Auto generate kernels by blur & quality\n     * @private\n     */\n    _generateKernels() {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels = [ blur ];\n\n        if (blur > 0) {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++) {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n    }\n\n    /**\n     * The kernel size of the blur filter, for advanced usage.\n     *\n     * @member {number[]}\n     * @default [0]\n     */\n    get kernels() {\n        return this._kernels;\n    }\n    set kernels(value) {\n        if (Array.isArray(value) && value.length > 0) {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max.apply(Math, value);\n        }\n        else {\n            // if value is invalid , set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n     * Get the if the filter is clampped.\n     *\n     * @readonly\n     * @member {boolean}\n     * @default false\n     */\n    get clamp() {\n        return this._clamp;\n    }\n\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [1, 1]\n     */\n    set pixelSize(value) {\n        if (typeof value === 'number') {\n            this._pixelSize.x = value;\n            this._pixelSize.y = value;\n        }\n        else if (Array.isArray(value)) {\n            this._pixelSize.x = value[0];\n            this._pixelSize.y = value[1];\n        }\n        else if (value instanceof PIXI.Point) {\n            this._pixelSize.x = value.x;\n            this._pixelSize.y = value.y;\n        }\n        else {\n            // if value is invalid , set default value\n            this._pixelSize.x = 1;\n            this._pixelSize.y = 1;\n        }\n    }\n    get pixelSize() {\n        return this._pixelSize;\n    }\n\n    /**\n     * The quality of the filter, integer greater than `1`.\n     *\n     * @member {number}\n     * @default 3\n     */\n    get quality() {\n        return this._quality;\n    }\n    set quality(value) {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n     * The amount of blur, value greater than `0`.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get blur() {\n        return this._blur;\n    }\n    set blur(value) {\n        this._blur = value;\n        this._generateKernels();\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './extract-brightness.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * Internal filter for AdvancedBloomFilter to get brightness.\n * @class\n * @private\n * @param {number} [threshold=0.5] Defines how bright a color needs to be extracted.\n */\nexport default class ExtractBrightnessFilter extends PIXI.Filter {\n\n    constructor(threshold = 0.5) {\n        super(vertex, fragment);\n\n        this.threshold = threshold;\n    }\n\n    /**\n     * Defines how bright a color needs to be extracted.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get threshold() {\n        return this.uniforms.threshold;\n    }\n    set threshold(value) {\n        this.uniforms.threshold = value;\n    }\n}\n\n","import ExtractBrightnessFilter from './ExtractBrightnessFilter';\nimport {KawaseBlurFilter} from '@pixi/filter-kawase-blur';\nimport {vertex} from '@tools/fragments';\nimport fragment from './advanced-bloom.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The AdvancedBloomFilter applies a Bloom Effect to an object. Unlike the normal BloomFilter\n * this had some advanced controls for adjusting the look of the bloom. Note: this filter\n * is slower than normal BloomFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/advanced-bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n *\n * @param {object|number} [options] - The optional parameters of advanced bloom filter.\n *                        When options is a number , it will be `options.threshold`.\n * @param {number} [options.threshold=0.5] - Defines how bright a color needs to be to affect bloom.\n * @param {number} [options.bloomScale=1.0] - To adjust the strength of the bloom. Higher values is more intense brightness.\n * @param {number} [options.brightness=1.0] - The brightness, lower value is more subtle brightness, higher value is blown-out.\n * @param {number} [options.blur=8] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=4] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nexport default class AdvancedBloomFilter extends PIXI.Filter {\n\n    constructor(options) {\n\n        super(vertex, fragment);\n\n        if (typeof options === 'number') {\n            options = { threshold: options };\n        }\n\n        options = Object.assign({\n            threshold: 0.5,\n            bloomScale: 1.0,\n            brightness: 1.0,\n            kernels: null,\n            blur: 8,\n            quality: 4,\n            pixelSize: 1,\n            resolution: PIXI.settings.RESOLUTION,\n        }, options);\n\n        /**\n         * To adjust the strength of the bloom. Higher values is more intense brightness.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.bloomScale = options.bloomScale;\n\n        /**\n         * The brightness, lower value is more subtle brightness, higher value is blown-out.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.brightness = options.brightness;\n\n        const { kernels, blur, quality, pixelSize, resolution } = options;\n\n        this._extractFilter = new ExtractBrightnessFilter(options.threshold);\n        this._extractFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear, currentState) {\n\n        const brightTarget = filterManager.getRenderTarget(true);\n\n        this._extractFilter.apply(filterManager, input, brightTarget, true, currentState);\n\n        const bloomTarget = filterManager.getRenderTarget(true);\n\n        this._blurFilter.apply(filterManager, brightTarget, bloomTarget, true, currentState);\n\n        this.uniforms.bloomScale = this.bloomScale;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.bloomTexture = bloomTarget;\n\n        filterManager.applyFilter(this, input, output, clear);\n\n        filterManager.returnRenderTarget(bloomTarget);\n        filterManager.returnRenderTarget(brightTarget);\n    }\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     */\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(value) {\n        this._resolution = value;\n\n        if (this._extractFilter) {\n            this._extractFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Defines how bright a color needs to be to affect bloom.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get threshold() {\n        return this._extractFilter.threshold;\n    }\n    set threshold(value) {\n        this._extractFilter.threshold = value;\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get kernels() {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value) {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * Sets the strength of the Blur properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this._blurFilter.blur;\n    }\n    set blur(value) {\n        this._blurFilter.blur = value;\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality() {\n        return this._blurFilter.quality;\n    }\n    set quality(value) {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize() {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value) {\n        this._blurFilter.pixelSize = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './ascii.frag';\nimport * as PIXI from 'pixi.js';\n\n// TODO (cengler) - The Y is flipped in this shader for some reason.\n\n/**\n * @author Vico @vicocotea\n * original shader : https://www.shadertoy.com/view/lssGDj by @movAX13h\n */\n\n/**\n * An ASCII filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/ascii.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [size=8] Size of the font\n */\nexport default class AsciiFilter extends PIXI.Filter {\n\n    constructor(size = 8) {\n        super(vertex, fragment);\n        this.size = size;\n    }\n\n    /**\n     * The pixel size used by the filter.\n     *\n     * @member {number}\n     */\n    get size() {\n        return this.uniforms.pixelSize;\n    }\n    set size(value) {\n        this.uniforms.pixelSize = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './bevel.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * Bevel Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bevel.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {object} [options] - The optional parameters of the filter.\n * @param {number} [options.rotation = 45] - The angle of the light in degrees.\n * @param {number} [options.thickness = 2] - The tickness of the bevel.\n * @param {number} [options.lightColor = 0xffffff] - Color of the light.\n * @param {number} [options.lightAlpha = 0.7] - Alpha of the light.\n * @param {number} [options.shadowColor = 0x000000] - Color of the shadow.\n * @param {number} [options.shadowAlpha = 0.7] - Alpha of the shadow.\n */\nexport default class BevelFilter extends PIXI.Filter {\n    constructor(options = {}) {\n        super(vertex, fragment);\n\n        this.uniforms.lightColor = new Float32Array(3);\n        this.uniforms.shadowColor = new Float32Array(3);\n\n        options = Object.assign({\n            rotation: 45,\n            thickness: 2,\n            lightColor: 0xffffff,\n            lightAlpha: 0.7,\n            shadowColor: 0x000000,\n            shadowAlpha: 0.7,\n        }, options);\n\n        /**\n         * The angle of the light in degrees.\n         * @member {number}\n         * @default 45\n         */\n        this.rotation = options.rotation;\n\n        /**\n         * The tickness of the bevel.\n         * @member {number}\n         * @default 2\n         */\n        this.thickness = options.thickness;\n\n        /**\n         * Color of the light.\n         * @member {number}\n         * @default 0xffffff\n         */\n        this.lightColor = options.lightColor;\n\n        /**\n         * Alpha of the light.\n         * @member {number}\n         * @default 0.7\n         */\n        this.lightAlpha = options.lightAlpha;\n\n        /**\n         * Color of the shadow.\n         * @member {number}\n         * @default 0x000000\n         */\n        this.shadowColor = options.shadowColor;\n\n        /**\n         * Alpha of the shadow.\n         * @member {number}\n         * @default 0.7\n         */\n        this.shadowAlpha = options.shadowAlpha;\n\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    _updateTransform() {\n        this.uniforms.transformX = this._thickness * Math.cos(this._angle);\n        this.uniforms.transformY = this._thickness * Math.sin(this._angle);\n    }\n\n    get rotation() {\n        return this._angle / PIXI.DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this._angle = value * PIXI.DEG_TO_RAD;\n        this._updateTransform();\n    }\n\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        this._thickness = value;\n        this._updateTransform();\n    }\n\n    get lightColor() {\n        return PIXI.utils.rgb2hex(this.uniforms.lightColor);\n    }\n    set lightColor(value) {\n        PIXI.utils.hex2rgb(value, this.uniforms.lightColor);\n    }\n\n    get lightAlpha() {\n        return this.uniforms.lightAlpha;\n    }\n    set lightAlpha(value) {\n        this.uniforms.lightAlpha = value;\n    }\n\n    get shadowColor() {\n        return PIXI.utils.rgb2hex(this.uniforms.shadowColor);\n    }\n    set shadowColor(value) {\n        PIXI.utils.hex2rgb(value, this.uniforms.shadowColor);\n    }\n\n    get shadowAlpha() {\n        return this.uniforms.shadowAlpha;\n    }\n    set shadowAlpha(value) {\n        this.uniforms.shadowAlpha = value;\n    }\n}\n","import * as PIXI from 'pixi.js';\n\nconst {BlurXFilter, BlurYFilter, AlphaFilter} = PIXI.filters;\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number|PIXI.Point|number[]} [blur=2] Sets the strength of both the blurX and blurY properties simultaneously\n * @param {number} [quality=4] The quality of the blurX & blurY filter.\n * @param {number} [resolution=PIXI.settings.RESOLUTION] The resolution of the blurX & blurY filter.\n * @param {number} [kernelSize=5] The kernelSize of the blurX & blurY filter.Options: 5, 7, 9, 11, 13, 15.\n */\nexport default class BloomFilter extends PIXI.Filter {\n\n    constructor(blur = 2, quality = 4, resolution = PIXI.settings.RESOLUTION, kernelSize = 5) {\n        super();\n\n        let blurX;\n        let blurY;\n\n        if (typeof blur === 'number') {\n            blurX = blur;\n            blurY = blur;\n        }\n        else if (blur instanceof PIXI.Point) {\n            blurX = blur.x;\n            blurY = blur.y;\n        }\n        else if (Array.isArray(blur)) {\n            blurX = blur[0];\n            blurY = blur[1];\n        }\n\n        this.blurXFilter = new BlurXFilter(blurX, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurYFilter(blurY, quality, resolution, kernelSize);\n        this.blurYFilter.blendMode = PIXI.BLEND_MODES.SCREEN;\n        this.defaultFilter = new AlphaFilter();\n    }\n\n    apply(filterManager, input, output) {\n        const renderTarget = filterManager.getRenderTarget(true);\n\n        //TODO - copyTexSubImage2D could be used here?\n        this.defaultFilter.apply(filterManager, input, output);\n\n        this.blurXFilter.apply(filterManager, input, renderTarget);\n        this.blurYFilter.apply(filterManager, renderTarget, output);\n\n        filterManager.returnRenderTarget(renderTarget);\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this.blurXFilter.blur;\n    }\n    set blur(value) {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX() {\n        return this.blurXFilter.blur;\n    }\n    set blurX(value) {\n        this.blurXFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY() {\n        return this.blurYFilter.blur;\n    }\n    set blurY(value) {\n        this.blurYFilter.blur = value;\n    }\n}\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './bulgePinch.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * @author Julien CLEREL @JuloxRox\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * Bulges or pinches the image in a circle.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bulge-pinch.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point|Array<number>} [center=[0,0]] The x and y coordinates of the center of the circle of effect.\n * @param {number} [radius=100] The radius of the circle of effect.\n * @param {number} [strength=1] -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n */\nexport default class BulgePinchFilter extends PIXI.Filter {\n\n    constructor(center, radius, strength) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n        this.center = center || [0.5, 0.5];\n        this.radius = radius || 100;\n        this.strength = strength || 1;\n    }\n\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.sourceFrame.width;\n        this.uniforms.dimensions[1] = input.sourceFrame.height;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The radius of the circle of effect.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     *\n     * @member {number}\n     */\n    get strength() {\n        return this.uniforms.strength;\n    }\n    set strength(value) {\n        this.uniforms.strength = value;\n    }\n\n    /**\n     * The x and y coordinates of the center of the circle of effect.\n     *\n     * @member {PIXI.Point}\n     */\n    get center() {\n        return this.uniforms.center;\n    }\n    set center(value) {\n        this.uniforms.center = value;\n    }\n}\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './color-map.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-map.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The colorMap texture of the filter.\n * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n */\nexport default class ColorMapFilter extends PIXI.Filter {\n\n    constructor(colorMap, nearest = false, mix = 1) {\n        super(vertex, fragment);\n\n        this._size = 0;\n        this._sliceSize = 0;\n        this._slicePixelSize = 0;\n        this._sliceInnerSize = 0;\n\n        this._scaleMode = null;\n        this._nearest = false;\n        this.nearest = nearest;\n\n        /**\n         * The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n         * @member {number}\n         */\n        this.mix = mix;\n\n        this.colorMap = colorMap;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms._mix = this.mix;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * the size of one color slice\n     * @member {number}\n     * @readonly\n     */\n    get colorSize() {\n        return this._size;\n    }\n\n    /**\n     * the colorMap texture\n     * @member {PIXI.Texture}\n     */\n    get colorMap() {\n        return this._colorMap;\n    }\n    set colorMap(colorMap) {\n        if (!(colorMap instanceof PIXI.Texture)) {\n            colorMap = PIXI.Texture.from(colorMap);\n        }\n        if (colorMap && colorMap.baseTexture) {\n            colorMap.baseTexture.scaleMode = this._scaleMode;\n            colorMap.baseTexture.mipmap = false;\n\n            this._size = colorMap.height;\n            this._sliceSize = 1 / this._size;\n            this._slicePixelSize = this._sliceSize / this._size;\n            this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n            this.uniforms._size = this._size;\n            this.uniforms._sliceSize = this._sliceSize;\n            this.uniforms._slicePixelSize = this._slicePixelSize;\n            this.uniforms._sliceInnerSize = this._sliceInnerSize;\n\n            this.uniforms.colorMap = colorMap;\n        }\n\n        this._colorMap = colorMap;\n    }\n\n    /**\n     * Whether use NEAREST for colorMap texture.\n     * @member {boolean}\n     */\n    get nearest() {\n        return this._nearest;\n    }\n    set nearest(nearest) {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? PIXI.SCALE_MODES.NEAREST : PIXI.SCALE_MODES.LINEAR;\n\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture.baseTexture._glTextures = {};\n\n            texture.baseTexture.scaleMode = this._scaleMode;\n            texture.baseTexture.mipmap = false;\n\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n        }\n    }\n\n    /**\n     * If the colorMap is based on canvas , and the content of canvas has changed,\n     *   then call `updateColorMap` for update texture.\n     */\n    updateColorMap() {\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n\n            this.colorMap = texture;\n        }\n    }\n\n    /**\n     * Destroys this filter\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture of colorMap as well\n     */\n    destroy(destroyBase) {\n        if (this._colorMap) {\n            this._colorMap.destroy(destroyBase);\n        }\n        super.destroy();\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './colorReplace.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-replace.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number|Array<number>} [originalColor=0xFF0000] The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n * @param {number|Array<number>} [newColor=0x000000] The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n * @param {number} [epsilon=0.4] Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.filters = [new ColorReplaceFilter(\n *   [1, 0, 0],\n *   [0, 0, 1],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(\n *   [220/255.0, 220/255.0, 220/255.0],\n *   [225/255.0, 200/255.0, 215/255.0],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(0xdcdcdc, 0xe1c8d7, 0.001)];\n *\n */\nexport default class ColorReplaceFilter extends PIXI.Filter {\n\n    constructor(originalColor = 0xFF0000, newColor = 0x000000, epsilon = 0.4) {\n        super(vertex, fragment);\n        this.uniforms.originalColor = new Float32Array(3);\n        this.uniforms.newColor = new Float32Array(3);\n        this.originalColor = originalColor;\n        this.newColor = newColor;\n        this.epsilon = epsilon;\n    }\n\n    /**\n     * The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n     * @member {number|Array<number>}\n     * @default 0xFF0000\n     */\n    set originalColor(value) {\n        let arr = this.uniforms.originalColor;\n        if (typeof value === 'number') {\n            PIXI.utils.hex2rgb(value, arr);\n            this._originalColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._originalColor = PIXI.utils.rgb2hex(arr);\n        }\n    }\n    get originalColor() {\n        return this._originalColor;\n    }\n\n    /**\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>}\n     * @default 0x000000\n     */\n    set newColor(value) {\n        let arr = this.uniforms.newColor;\n        if (typeof value === 'number') {\n            PIXI.utils.hex2rgb(value, arr);\n            this._newColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._newColor = PIXI.utils.rgb2hex(arr);\n        }\n    }\n    get newColor() {\n        return this._newColor;\n    }\n\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @member {number}\n     * @default 0.4\n     */\n    set epsilon(value) {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon() {\n        return this.uniforms.epsilon;\n    }\n}\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './convolution.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/convolution.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param matrix {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param width {number} Width of the object you are transforming\n * @param height {number} Height of the object you are transforming\n */\nexport default class ConvolutionFilter extends PIXI.Filter {\n\n    constructor(matrix, width, height) {\n        super(vertex, fragment);\n        this.uniforms.texelSize = new Float32Array(9);\n        this.matrix = matrix;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {Array<number>}\n     */\n    get matrix() {\n        return this.uniforms.matrix;\n    }\n    set matrix(value) {\n        this.uniforms.matrix = new Float32Array(value);\n    }\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     */\n    get width() {\n        return 1/this.uniforms.texelSize[0];\n    }\n    set width(value) {\n        this.uniforms.texelSize[0] = 1/value;\n    }\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     */\n    get height() {\n        return 1/this.uniforms.texelSize[1];\n    }\n    set height(value) {\n        this.uniforms.texelSize[1] = 1/value;\n    }\n}\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './crosshatch.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * A Cross Hatch effect filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/cross-hatch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class CrossHatchFilter extends PIXI.Filter {\n    constructor() {\n        super(vertex, fragment);\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './crt.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The CRTFilter applies a CRT effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/crt.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n *\n * @param {object} [options] - The optional parameters of CRT effect\n * @param {number} [options.curvature=1.0] - Bent of interlaced lines, higher value means more bend\n * @param {number} [options.lineWidth=1.0] - Width of the interlaced lines\n * @param {number} [options.lineContrast=0.25] - Contrast of interlaced lines\n * @param {number} [options.verticalLine=false] - `true` is vertical lines, `false` is horizontal\n * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n * @param {number} [options.seed=0] - A seed value to apply to the random noise generation\n * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n *        values produces a smaller vignette\n * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n * @param {number} [options.time=0] - For animating interlaced lines\n */\nexport default class CRTFilter extends PIXI.Filter {\n    constructor(options) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        /**\n         * For animating interlaced lines\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.time = 0;\n\n        /**\n         * A seed value to apply to the random noise generation\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.seed = 0;\n\n        Object.assign(this, {\n            curvature: 1.0,\n            lineWidth: 1.0,\n            lineContrast: 0.25,\n            verticalLine: false,\n            noise: 0.0,\n            noiseSize: 1.0,\n            seed: 0.0,\n            vignetting: 0.3,\n            vignettingAlpha: 1.0,\n            vignettingBlur: 0.3,\n            time: 0.0,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.sourceFrame.width;\n        this.uniforms.dimensions[1] = input.sourceFrame.height;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Bent of interlaced lines, higher value means more bend\n     *\n     * @member {number}\n     * @default 1\n     */\n    set curvature(value) {\n        this.uniforms.curvature = value;\n    }\n    get curvature() {\n        return this.uniforms.curvature;\n    }\n\n    /**\n     * Width of interlaced lines\n     *\n     * @member {number}\n     * @default 1\n     */\n    set lineWidth(value) {\n        this.uniforms.lineWidth = value;\n    }\n    get lineWidth() {\n        return this.uniforms.lineWidth;\n    }\n\n    /**\n     * Contrast of interlaced lines\n     *\n     * @member {number}\n     * @default 0.25\n     */\n    set lineContrast(value) {\n        this.uniforms.lineContrast = value;\n    }\n    get lineContrast() {\n        return this.uniforms.lineContrast;\n    }\n\n    /**\n     * `true` for vertical lines, `false` for horizontal lines\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set verticalLine(value) {\n        this.uniforms.verticalLine = value;\n    }\n    get verticalLine() {\n        return this.uniforms.verticalLine;\n    }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noise(value) {\n        this.uniforms.noise = value;\n    }\n    get noise() {\n        return this.uniforms.noise;\n    }\n\n    /**\n     * The size of the noise particles\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noiseSize(value) {\n        this.uniforms.noiseSize = value;\n    }\n    get noiseSize() {\n        return this.uniforms.noiseSize;\n    }\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignetting(value) {\n        this.uniforms.vignetting = value;\n    }\n    get vignetting() {\n        return this.uniforms.vignetting;\n    }\n\n    /**\n     * Amount of opacity of vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingAlpha(value) {\n        this.uniforms.vignettingAlpha = value;\n    }\n    get vignettingAlpha() {\n        return this.uniforms.vignettingAlpha;\n    }\n\n    /**\n     * Blur intensity of the vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingBlur(value) {\n        this.uniforms.vignettingBlur = value;\n    }\n    get vignettingBlur() {\n        return this.uniforms.vignettingBlur;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './dot.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js\n */\n\n/**\n * This filter applies a dotscreen effect making display objects appear to be made out of\n * black and white halftone dots like an old printer.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/dot.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [scale=1] The scale of the effect.\n * @param {number} [angle=5] The radius of the effect.\n */\nexport default class DotFilter extends PIXI.Filter {\n\n    constructor(scale = 1, angle = 5) {\n        super(vertex, fragment);\n        this.scale = scale;\n        this.angle = angle;\n    }\n\n    /**\n     * The scale of the effect.\n     * @member {number}\n     * @default 1\n     */\n    get scale() {\n        return this.uniforms.scale;\n    }\n    set scale(value) {\n        this.uniforms.scale = value;\n    }\n\n    /**\n     * The radius of the effect.\n     * @member {number}\n     * @default 5\n     */\n    get angle() {\n        return this.uniforms.angle;\n    }\n    set angle(value) {\n        this.uniforms.angle = value;\n    }\n}\n","import {KawaseBlurFilter} from '@pixi/filter-kawase-blur';\nimport {vertex} from '@tools/fragments';\nimport fragment from './dropshadow.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * Drop shadow filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/drop-shadow.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {object} [options] Filter options\n * @param {number} [options.rotation=45] The angle of the shadow in degrees.\n * @param {number} [options.distance=5] Distance of shadow\n * @param {number} [options.color=0x000000] Color of the shadow\n * @param {number} [options.alpha=0.5] Alpha of the shadow\n * @param {number} [options.shadowOnly=false] Whether render shadow only\n * @param {number} [options.blur=2] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=3] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nexport default class DropShadowFilter extends PIXI.Filter {\n    constructor(options) {\n\n        // Fallback support for ctor: (rotation, distance, blur, color, alpha)\n        if (options && options.constructor !== Object) {\n            // eslint-disable-next-line no-console\n            console.warn('DropShadowFilter now uses options instead of (rotation, distance, blur, color, alpha)');\n            options = { rotation: options };\n            if (arguments[1] !== undefined) {\n                options.distance = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.blur = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.color = arguments[3];\n            }\n            if (arguments[4] !== undefined) {\n                options.alpha = arguments[4];\n            }\n        }\n\n        options = Object.assign({\n            rotation: 45,\n            distance: 5,\n            color: 0x000000,\n            alpha: 0.5,\n            shadowOnly: false,\n            kernels: null,\n            blur: 2,\n            quality: 3,\n            pixelSize: 1,\n            resolution: PIXI.settings.RESOLUTION,\n        }, options);\n\n        super();\n\n        const { kernels, blur, quality, pixelSize, resolution } = options;\n\n        this._tintFilter = new PIXI.Filter(vertex, fragment);\n        this._tintFilter.uniforms.color = new Float32Array(4);\n        this._tintFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n\n        this.targetTransform = new PIXI.Matrix();\n\n        const { shadowOnly, rotation, distance, alpha, color } = options;\n\n        this.shadowOnly = shadowOnly;\n        this.rotation = rotation;\n        this.distance = distance;\n        this.alpha = alpha;\n        this.color = color;\n\n        this._updatePadding();\n    }\n\n    apply(filterManager, input, output, clear) {\n        const target = filterManager.getRenderTarget();\n\n        target.transform = this.targetTransform;\n        this._tintFilter.apply(filterManager, input, target, true);\n        target.transform = null;\n\n        this._blurFilter.apply(filterManager, target, output);\n\n        if (this.shadowOnly !== true) {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n\n        filterManager.returnRenderTarget(target);\n    }\n\n    /**\n     * Recalculate the proper padding amount.\n     * @private\n     */\n    _updatePadding() {\n        this.padding = this.distance + (this.blur * 2);\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    _updateTargetTransform() {\n        this.targetTransform.tx = this.distance * Math.cos(this.angle);\n        this.targetTransform.ty = this.distance * Math.sin(this.angle);\n    }\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     * @default PIXI.settings.RESOLUTION\n     */\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(value) {\n        this._resolution = value;\n\n        if (this._tintFilter) {\n            this._tintFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Distance offset of the shadow\n     * @member {number}\n     * @default 5\n     */\n    get distance() {\n        return this._distance;\n    }\n    set distance(value) {\n        this._distance = value;\n        this._updatePadding();\n        this._updateTargetTransform();\n    }\n\n    /**\n     * The angle of the shadow in degrees\n     * @member {number}\n     * @default 2\n     */\n    get rotation() {\n        return this.angle / PIXI.DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this.angle = value * PIXI.DEG_TO_RAD;\n        this._updateTargetTransform();\n    }\n\n    /**\n     * The alpha of the shadow\n     * @member {number}\n     * @default 1\n     */\n    get alpha() {\n        return this._tintFilter.uniforms.alpha;\n    }\n    set alpha(value) {\n        this._tintFilter.uniforms.alpha = value;\n    }\n\n    /**\n     * The color of the shadow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return PIXI.utils.rgb2hex(this._tintFilter.uniforms.color);\n    }\n    set color(value) {\n        PIXI.utils.hex2rgb(value, this._tintFilter.uniforms.color);\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number[]}\n     */\n    get kernels() {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value) {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * The blur of the shadow\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this._blurFilter.blur;\n    }\n    set blur(value) {\n        this._blurFilter.blur = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality() {\n        return this._blurFilter.quality;\n    }\n    set quality(value) {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize() {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value) {\n        this._blurFilter.pixelSize = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './emboss.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/emboss.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [strength=5] Strength of the emboss.\n */\nexport default class EmbossFilter extends PIXI.Filter {\n    constructor(strength = 5){\n        super(vertex, fragment);\n        this.strength = strength;\n    }\n\n    /**\n     * Strength of emboss.\n     *\n     * @member {number}\n     */\n    get strength() {\n        return this.uniforms.strength;\n    }\n    set strength(value) {\n        this.uniforms.strength = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './glitch.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The GlitchFilter applies a glitch effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glitch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {object} [options] - The more optional parameters of the filter.\n * @param {number} [options.slices=5] - The maximum number of slices.\n * @param {number} [options.offset=100] - The maximum offset amount of slices.\n * @param {number} [options.direction=0] - The angle in degree of the offset of slices.\n * @param {number} [options.fillMode=0] - The fill mode of the space after the offset. Acceptable values:\n *  - `0` {@link PIXI.filters.GlitchFilter.TRANSPARENT TRANSPARENT}\n *  - `1` {@link PIXI.filters.GlitchFilter.ORIGINAL ORIGINAL}\n *  - `2` {@link PIXI.filters.GlitchFilter.LOOP LOOP}\n *  - `3` {@link PIXI.filters.GlitchFilter.CLAMP CLAMP}\n *  - `4` {@link PIXI.filters.GlitchFilter.MIRROR MIRROR}\n * @param {number} [options.seed=0] - A seed value for randomizing glitch effect.\n * @param {number} [options.average=false] - `true` will divide the bands roughly based on equal amounts\n *                 where as setting to `false` will vary the band sizes dramatically (more random looking).\n * @param {number} [options.minSize=8] - Minimum size of individual slice. Segment of total `sampleSize`\n * @param {number} [options.sampleSize=512] - The resolution of the displacement map texture.\n * @param {number} [options.red=[0,0]] - Red channel offset\n * @param {number} [options.green=[0,0]] - Green channel offset.\n * @param {number} [options.blue=[0,0]] - Blue channel offset.\n */\nexport default class GlitchFilter extends PIXI.Filter {\n\n    constructor(options = {}) {\n\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        options = Object.assign({\n            slices: 5,\n            offset: 100,\n            direction: 0,\n            fillMode: 0,\n            average: false,\n            seed: 0,\n            red: [0, 0],\n            green: [0, 0],\n            blue: [0, 0],\n            minSize: 8,\n            sampleSize: 512,\n        }, options);\n\n        this.direction = options.direction;\n        this.red = options.red;\n        this.green = options.green;\n        this.blue = options.blue;\n\n        /**\n         * The maximum offset value for each of the slices.\n         *\n         * @member {number}\n         */\n        this.offset = options.offset;\n\n        /**\n         * The fill mode of the space after the offset.\n         *\n         * @member {number}\n         */\n        this.fillMode = options.fillMode;\n\n        /**\n         * `true` will divide the bands roughly based on equal amounts\n         * where as setting to `false` will vary the band sizes dramatically (more random looking).\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.average = options.average;\n\n        /**\n         * A seed value for randomizing color offset. Animating\n         * this value to `Math.random()` produces a twitching effect.\n         *\n         * @member {number}\n         */\n        this.seed = options.seed;\n\n        /**\n         * Minimum size of slices as a portion of the `sampleSize`\n         *\n         * @member {number}\n         */\n        this.minSize = options.minSize;\n\n        /**\n         * Height of the displacement map canvas.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.sampleSize = options.sampleSize;\n\n        /**\n         * Internally generated canvas.\n         *\n         * @member {HTMLCanvasElement} _canvas\n         * @private\n         */\n        this._canvas = document.createElement('canvas');\n        this._canvas.width = 4;\n        this._canvas.height = this.sampleSize;\n\n        /**\n         * The displacement map is used to generate the bands.\n         * If using your own texture, `slices` will be ignored.\n         *\n         * @member {PIXI.Texture}\n         * @readonly\n         */\n        this.texture = PIXI.Texture.fromCanvas(this._canvas, PIXI.SCALE_MODES.NEAREST);\n\n        /**\n         * Internal number of slices\n         * @member {number}\n         * @private\n         */\n        this._slices = 0;\n\n        // Set slices\n        this.slices = options.slices;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n\n        const width = input.sourceFrame.width;\n        const height = input.sourceFrame.height;\n\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.offset = this.offset;\n        this.uniforms.fillMode = this.fillMode;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Randomize the slices size (heights).\n     *\n     * @private\n     */\n    _randomizeSizes() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n        const size = this.sampleSize;\n        const min = Math.min(this.minSize / size, 0.9 / this._slices);\n\n        if (this.average) {\n            const count = this._slices;\n            let rest = 1;\n\n            for (let i = 0; i < last; i++) {\n                const averageWidth = rest / (count - i);\n                const w =  Math.max(averageWidth * (1 - Math.random() * 0.6), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n        else {\n            let rest = 1;\n            const ratio = Math.sqrt(1 / this._slices);\n\n            for (let i = 0; i < last; i++) {\n                const w = Math.max(ratio * rest * Math.random(), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n\n        this.shuffle();\n    }\n\n    /**\n     * Shuffle the sizes of the slices, advanced usage.\n     */\n    shuffle() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n\n        // shuffle\n        for (let i = last; i > 0; i--) {\n            const rand = (Math.random() * i) >> 0;\n            const temp = arr[i];\n\n            arr[i] = arr[rand];\n            arr[rand] = temp;\n        }\n    }\n\n    /**\n     * Randomize the values for offset from -1 to 1\n     *\n     * @private\n     */\n    _randomizeOffsets() {\n        for (let i = 0 ; i < this._slices; i++) {\n            this._offsets[i] = Math.random() * (Math.random() < 0.5 ? -1 : 1);\n        }\n    }\n\n    /**\n     * Regenerating random size, offsets for slices.\n     */\n    refresh() {\n        this._randomizeSizes();\n        this._randomizeOffsets();\n        this.redraw();\n    }\n\n    /**\n     * Redraw displacement bitmap texture, advanced usage.\n     */\n    redraw() {\n        const size = this.sampleSize;\n        const texture = this.texture;\n        const ctx = this._canvas.getContext('2d');\n        ctx.clearRect(0, 0, 8, size);\n\n        let offset;\n        let y = 0;\n\n        for (let i = 0 ; i < this._slices; i++) {\n            offset = Math.floor(this._offsets[i] * 256);\n            const height = this._sizes[i] * size;\n            const red = offset > 0 ? offset : 0;\n            const green = offset < 0 ? -offset : 0;\n            ctx.fillStyle = 'rgba(' + red + ', ' + green + ', 0, 1)';\n            ctx.fillRect(0, y >> 0, size, height + 1 >> 0);\n            y += height;\n        }\n\n        texture.baseTexture.emit('update', texture.baseTexture);\n        this.uniforms.displacementMap = texture;\n    }\n\n    /**\n     * Manually custom slices size (height) of displacement bitmap\n     *\n     * @member {number[]}\n     */\n    set sizes(sizes) {\n        const len = Math.min(this._slices, sizes.length);\n\n        for (let i = 0; i < len; i++){\n            this._sizes[i] = sizes[i];\n        }\n    }\n    get sizes() {\n        return this._sizes;\n    }\n\n    /**\n     * Manually set custom slices offset of displacement bitmap, this is\n     * a collection of values from -1 to 1. To change the max offset value\n     * set `offset`.\n     *\n     * @member {number[]}\n     */\n    set offsets(offsets) {\n        const len = Math.min(this._slices, offsets.length);\n\n        for (let i = 0; i < len; i++){\n            this._offsets[i] = offsets[i];\n        }\n    }\n    get offsets() {\n        return this._offsets;\n    }\n\n    /**\n     * The count of slices.\n     * @member {number}\n     * @default 5\n     */\n    get slices() {\n        return this._slices;\n    }\n    set slices(value) {\n        if (this._slices === value) {\n            return;\n        }\n        this._slices = value;\n        this.uniforms.slices = value;\n        this._sizes = this.uniforms.slicesWidth = new Float32Array(value);\n        this._offsets = this.uniforms.slicesOffset = new Float32Array(value);\n        this.refresh();\n    }\n\n    /**\n     * The angle in degree of the offset of slices.\n     * @member {number}\n     * @default 0\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(value) {\n        if (this._direction === value) {\n            return;\n        }\n        this._direction = value;\n\n        const radians = value * PIXI.DEG_TO_RAD;\n\n        this.uniforms.sinDir = Math.sin(radians);\n        this.uniforms.cosDir = Math.cos(radians);\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n\n    /**\n     * Removes all references\n     */\n    destroy() {\n        this.texture.destroy(true);\n        this.texture = null;\n        this._canvas = null;\n        this.red = null;\n        this.green = null;\n        this.blue = null;\n        this._sizes = null;\n        this._offsets = null;\n    }\n}\n\n/**\n * Fill mode as transparent\n *\n * @constant\n * @static\n * @member {int} TRANSPARENT\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.TRANSPARENT = 0;\n\n/**\n * Fill mode as original\n *\n * @constant\n * @static\n * @member {int} ORIGINAL\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.ORIGINAL = 1;\n\n/**\n * Fill mode as loop\n *\n * @constant\n * @static\n * @member {int} LOOP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.LOOP = 2;\n\n/**\n * Fill mode as clamp\n *\n * @constant\n * @static\n * @member {int} CLAMP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.CLAMP = 3;\n\n/**\n * Fill mode as mirror\n *\n * @constant\n * @static\n * @member {int} MIRROR\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.MIRROR = 4;\n","import {vertex} from '@tools/fragments';\nimport fragment from './glow.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * GlowFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\n * http://codepen.io/mishaa/pen/raKzrm<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glow.png)\n *\n * @class\n *\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [distance=10] The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n * @param {number} [outerStrength=4] The strength of the glow outward from the edge of the sprite.\n * @param {number} [innerStrength=0] The strength of the glow inward from the edge of the sprite.\n * @param {number} [color=0xffffff] The color of the glow.\n * @param {number} [quality=0.1] A number between 0 and 1 that describes the quality of the glow.\n *\n * @example\n *  someSprite.filters = [\n *      new GlowFilter(15, 2, 1, 0xFF0000, 0.5)\n *  ];\n */\nexport default class GlowFilter extends PIXI.Filter {\n\n    constructor(distance = 10, outerStrength = 4, innerStrength = 0, color = 0xffffff, quality = 0.1) {\n        super(vertex, fragment\n            .replace(/%QUALITY_DIST%/gi, '' + (1 / quality / distance).toFixed(7))\n            .replace(/%DIST%/gi, '' + distance.toFixed(7)));\n\n        this.uniforms.glowColor = new Float32Array([0, 0, 0, 1]);\n        this.distance = distance;\n        this.color = color;\n        this.outerStrength = outerStrength;\n        this.innerStrength = innerStrength;\n    }\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get color() {\n        return PIXI.utils.rgb2hex(this.uniforms.glowColor);\n    }\n    set color(value) {\n        PIXI.utils.hex2rgb(value, this.uniforms.glowColor);\n    }\n\n    /**\n     * The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n     * @member {number}\n     * @default 10\n     */\n    get distance() {\n        return this.uniforms.distance;\n    }\n    set distance(value) {\n        this.uniforms.distance = value;\n    }\n\n    /**\n     * The strength of the glow outward from the edge of the sprite.\n     * @member {number}\n     * @default 4\n     */\n    get outerStrength() {\n        return this.uniforms.outerStrength;\n    }\n    set outerStrength(value) {\n        this.uniforms.outerStrength = value;\n    }\n\n    /**\n     * The strength of the glow inward from the edge of the sprite.\n     * @member {number}\n     * @default 0\n     */\n    get innerStrength() {\n        return this.uniforms.innerStrength;\n    }\n    set innerStrength(value) {\n        this.uniforms.innerStrength = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport perlin from './perlin.frag';\nimport fragment from './gorday.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n* GordayFilter, {@link https://codepen.io/alaingalvan originally} by Alain Galvan\n*\n*\n*\n* ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/godray.gif)\n* @class\n* @extends PIXI.Filter\n* @memberof PIXI.filters\n*\n* @example\n*  displayObject.filters = [new GodrayFilter()];\n* @param {object} [options] Filter options\n* @param {number} [options.angle=30] Angle/Light-source of the rays.\n* @param {number} [options.gain=0.5] General intensity of the effect.\n* @param {number} [options.lacunrity=2.5] The density of the fractal noise.\n* @param {boolean} [options.parallel=true] `true` to use `angle`, `false` to use `center`\n* @param {number} [options.time=0] The current time position.\n* @param {PIXI.Point|number[]} [options.center=[0,0]] Focal point for non-parallel rays,\n*        to use this `parallel` must be set to `false`.\n*/\nexport default class GodrayFilter extends PIXI.Filter {\n\n    constructor(options) {\n        super(vertex, fragment.replace('${perlin}', perlin));\n\n        this.uniforms.dimensions = new Float32Array(2);\n\n        // Fallback support for ctor: (angle, gain, lacunarity, time)\n        if (typeof options === 'number') {\n            // eslint-disable-next-line no-console\n            console.warn('GodrayFilter now uses options instead of (angle, gain, lacunarity, time)');\n            options = { angle: options };\n            if (arguments[1] !== undefined) {\n                options.gain = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.lacunarity = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.time = arguments[3];\n            }\n        }\n\n        options = Object.assign({\n            angle: 30,\n            gain: 0.5,\n            lacunarity: 2.5,\n            time: 0,\n            parallel: true,\n            center: [0, 0],\n        }, options);\n\n        this._angleLight = new PIXI.Point();\n        this.angle = options.angle;\n        this.gain = options.gain;\n        this.lacunarity = options.lacunarity;\n\n        /**\n         * `true` if light rays are parallel (uses angle),\n         * `false` to use the focal `center` point\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.parallel = options.parallel;\n\n        /**\n         * The position of the emitting point for light rays\n         * only used if `parallel` is set to `false`.\n         *\n         * @member {PIXI.Point|number[]}\n         * @default [0, 0]\n         */\n        this.center = options.center;\n\n        /**\n         * The current time.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.time = options.time;\n    }\n\n    /**\n     * Applies the filter.\n     * @private\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output, clear) {\n        const {width, height} = input.sourceFrame;\n\n        this.uniforms.light = this.parallel ? this._angleLight : this.center;\n\n        this.uniforms.parallel = this.parallel;\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n        this.uniforms.time = this.time;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The angle/light-source of the rays in degrees. For instance, a value of 0 is vertical rays,\n     *     values of 90 or -90 produce horizontal rays.\n     * @member {number}\n     * @default 30\n     */\n    get angle() {\n        return this._angle;\n    }\n    set angle(value) {\n        this._angle = value;\n\n        const radians = value * PIXI.DEG_TO_RAD;\n\n        this._angleLight.x = Math.cos(radians);\n        this._angleLight.y = Math.sin(radians);\n    }\n\n    /**\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\n     * where a value closer to 0 will produce a subtler effect.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get gain() {\n        return this.uniforms.gain;\n    }\n    set gain(value) {\n        this.uniforms.gain = value;\n    }\n\n    /**\n     * The density of the fractal noise. A higher amount produces more rays and a smaller amound\n     * produces fewer waves.\n     *\n     * @member {number}\n     * @default 2.5\n     */\n    get lacunarity() {\n        return this.uniforms.lacunarity;\n    }\n    set lacunarity(value) {\n        this.uniforms.lacunarity = value;\n    }\n}\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './motion-blur.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The MotionBlurFilter applies a Motion blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/motion-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.ObservablePoint|PIXI.Point|number[]} [velocity=[0, 0]] Sets the velocity of the motion for blur effect.\n * @param {number} [kernelSize=5] - The kernelSize of the blur filter. Must be odd number >= 5\n * @param {number} [offset=0] - The offset of the blur filter.\n */\nexport default class MotionBlurFilter extends PIXI.Filter {\n    constructor(velocity = [0, 0], kernelSize = 5, offset = 0) {\n        super(vertex, fragment);\n        this.uniforms.uVelocity = new Float32Array(2);\n        this._velocity = new PIXI.ObservablePoint(this.velocityChanged, this);\n        this.velocity = velocity;\n\n        /**\n         * The kernelSize of the blur, higher values are slower but look better.\n         * Use odd value greater than 5.\n         * @member {number}\n         * @default 5\n         */\n        this.kernelSize = kernelSize;\n        this.offset = offset;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        const {x, y} = this.velocity;\n\n        this.uniforms.uKernelSize = (x !== 0 || y !== 0) ? this.kernelSize : 0;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the velocity of the motion for blur effect.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    set velocity(value) {\n        if (Array.isArray(value)) {\n            this._velocity.set(value[0], value[1]);\n        }\n        else if (value instanceof PIXI.Point || value instanceof PIXI.ObservablePoint) {\n            this._velocity.copy(value);\n        }\n    }\n\n    get velocity() {\n        return this._velocity;\n    }\n\n    /**\n     * Handle velocity changed\n     * @private\n     */\n    velocityChanged() {\n        this.uniforms.uVelocity[0] = this._velocity.x;\n        this.uniforms.uVelocity[1] = this._velocity.y;\n    }\n\n    /**\n     * The offset of the blur filter.\n     *\n     * @member {number}\n     * @default 0\n     */\n    set offset(value) {\n        this.uniforms.uOffset = value;\n    }\n\n    get offset() {\n        return this.uniforms.uOffset;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './multi-color-replace.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/multi-color-replace.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair (an array length is 2).\n *                       In the pair, the first value is original color , the second value is target color.\n * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n *                                  (lower = more exact, higher = more inclusive)\n * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n *                               fragment is only compiled once, this cannot be changed after construction.\n *                               If omitted, the default value is the length of `replacements`.\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    0.001\n *  )];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    0.001\n *  )];\n *\n */\nexport default class MultiColorReplaceFilter extends PIXI.Filter {\n    constructor(replacements, epsilon = 0.05, maxColors = null) {\n        maxColors = maxColors || replacements.length;\n\n        super(vertex, fragment.replace(/%maxColors%/g, maxColors));\n\n        this.epsilon = epsilon;\n        this._maxColors = maxColors;\n        this._replacements = null;\n        this.uniforms.originalColors = new Float32Array(maxColors * 3);\n        this.uniforms.targetColors = new Float32Array(maxColors * 3);\n        this.replacements = replacements;\n    }\n\n    /**\n     * The source and target colors for replacement. See constructor for information on the format.\n     *\n     * @member {Array<Array>}\n     */\n    set replacements(replacements) {\n        const originals = this.uniforms.originalColors;\n        const targets = this.uniforms.targetColors;\n        const colorCount = replacements.length;\n\n        if (colorCount > this._maxColors) {\n            throw `Length of replacements (${colorCount}) exceeds the maximum colors length (${this._maxColors})`;\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        for (let i = 0; i < colorCount; i++) {\n            const pair = replacements[i];\n\n            // for original colors\n            let color = pair[0];\n            if (typeof color === 'number') {\n                color = PIXI.utils.hex2rgb(color);\n            }\n            else {\n                pair[0] = PIXI.utils.rgb2hex(color);\n            }\n\n            originals[i * 3] = color[0];\n            originals[(i * 3) + 1] = color[1];\n            originals[(i * 3) + 2] = color[2];\n\n            // for target colors\n            let targetColor = pair[1];\n            if (typeof targetColor === 'number') {\n                targetColor = PIXI.utils.hex2rgb(targetColor);\n            }\n            else {\n                pair[1] = PIXI.utils.rgb2hex(targetColor);\n            }\n\n            targets[i * 3] = targetColor[0];\n            targets[(i * 3) + 1] = targetColor[1];\n            targets[(i * 3) + 2] = targetColor[2];\n        }\n\n        this._replacements = replacements;\n    }\n    get replacements() {\n        return this._replacements;\n    }\n\n    /**\n     * Should be called after changing any of the contents of the replacements.\n     * This is a convenience method for resetting the `replacements`.\n     */\n    refresh() {\n        this.replacements = this._replacements;\n    }\n\n    /**\n     * The maximum number of color replacements supported by this filter. Can be changed\n     * _only_ during construction.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get maxColors() {\n        return this._maxColors;\n    }\n\n    /**\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     *\n     * @member {number}\n     * @default 0.05\n     */\n    set epsilon(value) {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon() {\n        return this.uniforms.epsilon;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './old-film.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The OldFilmFilter applies a Old film effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/old-film.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n *\n * @param {object|number} [options] - The optional parameters of old film effect.\n *                        When options is a number , it will be `seed`\n * @param {number} [options.sepia=0.3] - The amount of saturation of sepia effect,\n *        a value of `1` is more saturation and closer to `0` is less, and a value of\n *        `0` produces no sepia effect\n * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n * @param {number} [options.scratch=0.5] - How often scratches appear\n * @param {number} [options.scratchDensity=0.3] - The density of the number of scratches\n * @param {number} [options.scratchWidth=1.0] - The width of the scratches\n * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n *        values produces a smaller vignette\n * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n * @param {number} [seed=0] - A see value to apply to the random noise generation\n */\nexport default class OldFilmFilter extends PIXI.Filter {\n    constructor(options, seed = 0) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        if (typeof options === 'number') {\n            this.seed = options;\n            options = null;\n        }\n        else {\n            /**\n             * A see value to apply to the random noise generation\n             * @member {number}\n             */\n            this.seed = seed;\n        }\n\n        Object.assign(this, {\n            sepia: 0.3,\n            noise: 0.3,\n            noiseSize: 1.0,\n            scratch: 0.5,\n            scratchDensity: 0.3,\n            scratchWidth: 1.0,\n            vignetting: 0.3,\n            vignettingAlpha: 1.0,\n            vignettingBlur: 0.3,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.sourceFrame.width;\n        this.uniforms.dimensions[1] = input.sourceFrame.height;\n\n        // named `seed` because in the most programming languages,\n        // `random` used for \"the function for generating random value\".\n        this.uniforms.seed = this.seed;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n\n    /**\n     * The amount of saturation of sepia effect,\n     * a value of `1` is more saturation and closer to `0` is less,\n     * and a value of `0` produces no sepia effect\n     *\n     * @member {number}\n     * @default 0\n     */\n    set sepia(value) {\n        this.uniforms.sepia = value;\n    }\n\n    get sepia() {\n        return this.uniforms.sepia;\n    }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noise(value) {\n        this.uniforms.noise = value;\n    }\n\n    get noise() {\n        return this.uniforms.noise;\n    }\n\n    /**\n     * The size of the noise particles\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noiseSize(value) {\n        this.uniforms.noiseSize = value;\n    }\n\n    get noiseSize() {\n        return this.uniforms.noiseSize;\n    }\n\n    /**\n     * How often scratches appear\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratch(value) {\n        this.uniforms.scratch = value;\n    }\n\n    get scratch() {\n        return this.uniforms.scratch;\n    }\n\n    /**\n     * The density of the number of scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratchDensity(value) {\n        this.uniforms.scratchDensity = value;\n    }\n\n    get scratchDensity() {\n        return this.uniforms.scratchDensity;\n    }\n\n    /**\n     * The width of the scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratchWidth(value) {\n        this.uniforms.scratchWidth = value;\n    }\n\n    get scratchWidth() {\n        return this.uniforms.scratchWidth;\n    }\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignetting(value) {\n        this.uniforms.vignetting = value;\n    }\n\n    get vignetting() {\n        return this.uniforms.vignetting;\n    }\n\n    /**\n     * Amount of opacity of vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingAlpha(value) {\n        this.uniforms.vignettingAlpha = value;\n    }\n\n    get vignettingAlpha() {\n        return this.uniforms.vignettingAlpha;\n    }\n\n    /**\n     * Blur intensity of the vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingBlur(value) {\n        this.uniforms.vignettingBlur = value;\n    }\n\n    get vignettingBlur() {\n        return this.uniforms.vignettingBlur;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './pixelate.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * This filter applies a pixelate effect making display objects appear 'blocky'.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/pixelate.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point|Array<number>|number} [size=10] Either the width/height of the size of the pixels, or square size\n */\nexport default class PixelateFilter extends PIXI.Filter {\n\n    constructor(size = 10) {\n        super(vertex, fragment);\n        this.size = size;\n    }\n\n    /**\n     * This a point that describes the size of the blocks.\n     * x is the width of the block and y is the height.\n     *\n     * @member {PIXI.Point|Array<number>|number}\n     * @default 10\n     */\n    get size() {\n        return this.uniforms.size;\n    }\n    set size(value) {\n        if (typeof value === 'number') {\n            value = [value, value];\n        }\n        this.uniforms.size = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './radial-blur.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The RadialBlurFilter applies a Motion blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/radial-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [angle=0] Sets the angle of the motion for blur effect.\n * @param {PIXI.Point|number[]} [center=[0,0]] The center of the radial.\n * @param {number} [kernelSize=5] - The kernelSize of the blur filter. But be odd number >= 3\n * @param {number} [radius=-1] - The maximum size of the blur radius, `-1` is infinite\n */\nexport default class RadialBlurFilter extends PIXI.Filter {\n    constructor(angle = 0, center = [0, 0], kernelSize = 5, radius = -1) {\n        super(vertex, fragment);\n\n        this._angle = 0;\n        this.angle = angle;\n        this.center = center;\n        this.kernelSize = kernelSize;\n        this.radius = radius;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.uKernelSize = this._angle !== 0 ? this.kernelSize : 0;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the angle in degrees of the motion for blur effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    set angle(value) {\n        this._angle = value;\n        this.uniforms.uRadian = value * Math.PI / 180;\n    }\n\n    get angle() {\n        return this._angle;\n    }\n\n    /**\n     * Center of the effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    get center() {\n        return this.uniforms.uCenter;\n    }\n\n    set center(value) {\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Outer radius of the effect. The default value of `-1` is infinite.\n     *\n     * @member {number}\n     * @default -1\n     */\n    get radius() {\n        return this.uniforms.uRadius;\n    }\n\n    set radius(value) {\n        if (value < 0 || value === Infinity) {\n            value = -1;\n        }\n        this.uniforms.uRadius = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './reflection.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * Applies a reflection effect to simulate the reflection on water with waves.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/reflection.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n *\n * @param {object} [options] - The optional parameters of Reflection effect.\n * @param {number} [options.mirror=true] - `true` to reflect the image, `false` for waves-only\n * @param {number} [options.boundary=0.5] - Vertical position of the reflection point, default is 50% (middle)\n *                 smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n * @param {number} [options.amplitude=[0, 20]] - Starting and ending amplitude of waves\n * @param {number} [options.waveLength=[30, 100]] - Starting and ending length of waves\n * @param {number} [options.alpha=[1, 1]] - Starting and ending alpha values\n * @param {number} [options.time=0] - Time for animating position of waves\n */\nexport default class ReflectionFilter extends PIXI.Filter {\n    constructor(options) {\n        super(vertex, fragment);\n        this.uniforms.amplitude = new Float32Array(2);\n        this.uniforms.waveLength = new Float32Array(2);\n        this.uniforms.alpha = new Float32Array(2);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        Object.assign(this, {\n            mirror: true,\n            boundary: 0.5,\n            amplitude: [0, 20],\n            waveLength: [30, 100],\n            alpha: [1, 1],\n\n            /**\n             * Time for animating position of waves\n             *\n             * @member {number}\n             * @memberof PIXI.filters.ReflectionFilter#\n             * @default 0\n             */\n            time: 0,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.sourceFrame.width;\n        this.uniforms.dimensions[1] = input.sourceFrame.height;\n\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * `true` to reflect the image, `false` for waves-only\n     *\n     * @member {boolean}\n     * @default true\n     */\n    set mirror(value) {\n        this.uniforms.mirror = value;\n    }\n    get mirror() {\n        return this.uniforms.mirror;\n    }\n\n    /**\n     * Vertical position of the reflection point, default is 50% (middle)\n     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    set boundary(value) {\n        this.uniforms.boundary = value;\n    }\n    get boundary() {\n        return this.uniforms.boundary;\n    }\n\n    /**\n     * Starting and ending amplitude of waves\n     * @member {number[]}\n     * @default [0, 20]\n     */\n    set amplitude(value) {\n        this.uniforms.amplitude[0] = value[0];\n        this.uniforms.amplitude[1] = value[1];\n    }\n    get amplitude() {\n        return this.uniforms.amplitude;\n    }\n\n    /**\n     * Starting and ending length of waves\n     * @member {number[]}\n     * @default [30, 100]\n     */\n    set waveLength(value) {\n        this.uniforms.waveLength[0] = value[0];\n        this.uniforms.waveLength[1] = value[1];\n    }\n    get waveLength() {\n        return this.uniforms.waveLength;\n    }\n\n    /**\n     * Starting and ending alpha values\n     * @member {number[]}\n     * @default [1, 1]\n     */\n    set alpha(value) {\n        this.uniforms.alpha[0] = value[0];\n        this.uniforms.alpha[1] = value[1];\n    }\n    get alpha() {\n        return this.uniforms.alpha;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './rgb-split.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/rgb.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point} [red=[-10,0]] Red channel offset\n * @param {PIXI.Point} [green=[0, 10]] Green channel offset\n * @param {PIXI.Point} [blue=[0, 0]] Blue channel offset\n */\nexport default class RGBSplitFilter extends PIXI.Filter {\n    constructor(red = [-10, 0], green = [0, 10], blue = [0, 0]) {\n        super(vertex, fragment);\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './shockwave.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The ShockwaveFilter class lets you apply a shockwave effect.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/shockwave.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n *\n * @param {PIXI.Point|number[]} [center=[0.5, 0.5]] See `center` property.\n * @param {object} [options] - The optional parameters of shockwave filter.\n * @param {number} [options.amplitude=0.5] - See `amplitude`` property.\n * @param {number} [options.wavelength=1.0] - See `wavelength` property.\n * @param {number} [options.speed=500.0] - See `speed` property.\n * @param {number} [options.brightness=8] - See `brightness` property.\n * @param {number} [options.radius=4] - See `radius` property.\n * @param {number} [time=0] - See `time` property.\n */\nexport default class ShockwaveFilter extends PIXI.Filter {\n\n    constructor(center = [0.0, 0.0], options = {}, time = 0) {\n        super(vertex, fragment);\n\n        this.center = center;\n\n        if (Array.isArray(options)) {\n            // eslint-disable-next-line no-console\n            console.warn('Deprecated Warning: ShockwaveFilter params Array has been changed to options Object.');\n            options = {};\n        }\n\n        options = Object.assign({\n            amplitude: 30.0,\n            wavelength: 160.0,\n            brightness: 1.0,\n            speed: 500.0,\n            radius: -1.0,\n        }, options);\n\n        this.amplitude = options.amplitude;\n\n        this.wavelength = options.wavelength;\n\n        this.brightness = options.brightness;\n\n        this.speed = options.speed;\n\n        this.radius = options.radius;\n\n        /**\n         * Sets the elapsed time of the shockwave.\n         * It could control the current size of shockwave.\n         *\n         * @member {number}\n         */\n        this.time = time;\n    }\n\n    apply(filterManager, input, output, clear) {\n        /**\n         * There is no set/get of `time`, for performance.\n         * Because in the most real cases, `time` will be changed in ever game tick.\n         * Use set/get will take more function-call.\n         */\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {PIXI.Point|number[]}\n     */\n    get center() {\n        return this.uniforms.center;\n    }\n    set center(value) {\n        this.uniforms.center = value;\n    }\n\n    /**\n     * The amplitude of the shockwave.\n     *\n     * @member {number}\n     */\n    get amplitude() {\n        return this.uniforms.amplitude;\n    }\n    set amplitude(value) {\n        this.uniforms.amplitude = value;\n    }\n\n    /**\n     * The wavelength of the shockwave.\n     *\n     * @member {number}\n     */\n    get wavelength() {\n        return this.uniforms.wavelength;\n    }\n    set wavelength(value) {\n        this.uniforms.wavelength = value;\n    }\n\n    /**\n     * The brightness of the shockwave.\n     *\n     * @member {number}\n     */\n    get brightness() {\n        return this.uniforms.brightness;\n    }\n    set brightness(value) {\n        this.uniforms.brightness = value;\n    }\n\n    /**\n     * The speed about the shockwave ripples out.\n     * The unit is `pixel/second`\n     *\n     * @member {number}\n     */\n    get speed() {\n        return this.uniforms.speed;\n    }\n    set speed(value) {\n        this.uniforms.speed = value;\n    }\n\n    /**\n     * The maximum radius of shockwave.\n     * `< 0.0` means it's infinity.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n}\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './simpleLightmap.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n* SimpleLightmap, originally by Oza94\n* http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/\n* http://codepen.io/Oza94/pen/EPoRxj\n*\n* You have to specify filterArea, or suffer consequences.\n* You may have to use it with `filter.dontFit = true`,\n*  until we rewrite this using same approach as for DisplacementFilter.\n*\n* ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/simple-lightmap.png)\n* @class\n* @extends PIXI.Filter\n* @memberof PIXI.filters\n* @param {PIXI.Texture} texture a texture where your lightmap is rendered\n* @param {Array<number>|number} [color=0x000000] An RGBA array of the ambient color\n* @param {number} [alpha=1] Default alpha set independent of color (if it's a number, not array).\n*\n* @example\n*  displayObject.filters = [new SimpleLightmapFilter(texture, 0x666666)];\n*/\nexport default class SimpleLightmapFilter extends PIXI.Filter {\n\n    constructor(texture, color = 0x000000, alpha = 1) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n        this.uniforms.ambientColor = new Float32Array([0, 0, 0, alpha]);\n        this.texture = texture;\n        this.color = color;\n    }\n\n    /**\n     * Applies the filter.\n     * @private\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.sourceFrame.width;\n        this.uniforms.dimensions[1] = input.sourceFrame.height;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n\n    /**\n     * a texture where your lightmap is rendered\n     * @member {PIXI.Texture}\n     */\n    get texture() {\n        return this.uniforms.uLightmap;\n    }\n    set texture(value) {\n        this.uniforms.uLightmap = value;\n    }\n\n    /**\n     * An RGBA array of the ambient color or a hex color without alpha\n     * @member {Array<number>|number}\n     */\n    set color(value) {\n        const arr = this.uniforms.ambientColor;\n        if (typeof value === 'number') {\n            PIXI.utils.hex2rgb(value, arr);\n            this._color = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            arr[3] = value[3];\n            this._color = PIXI.utils.rgb2hex(arr);\n        }\n    }\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * When setting `color` as hex, this can be used to set alpha independently.\n     * @member {number}\n     */\n    get alpha() {\n        return this.uniforms.ambientColor[3];\n    }\n    set alpha(value) {\n        this.uniforms.ambientColor[3] = value;\n    }\n}\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './tilt-shift.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @private\n */\nexport default class TiltShiftAxisFilter extends PIXI.Filter {\n\n    constructor(blur = 100, gradientBlur = 600, start = null, end = null){\n        super(vertex, fragment);\n        this.uniforms.blur = blur;\n        this.uniforms.gradientBlur = gradientBlur;\n        this.uniforms.start = start || new PIXI.Point(0, window.innerHeight / 2);\n        this.uniforms.end = end || new PIXI.Point(600, window.innerHeight / 2);\n        this.uniforms.delta = new PIXI.Point(30, 30);\n        this.uniforms.texSize = new PIXI.Point(window.innerWidth, window.innerHeight);\n        this.updateDelta();\n    }\n\n    /**\n     * Updates the filter delta values.\n     * This is overridden in the X and Y filters, does nothing for this class.\n     *\n     */\n    updateDelta() {\n        this.uniforms.delta.x = 0;\n        this.uniforms.delta.y = 0;\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get blur() {\n        return this.uniforms.blur;\n    }\n    set blur(value) {\n        this.uniforms.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get gradientBlur() {\n        return this.uniforms.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.uniforms.gradientBlur = value;\n    }\n\n    /**\n     * The X value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get start() {\n        return this.uniforms.start;\n    }\n    set start(value) {\n        this.uniforms.start = value;\n        this.updateDelta();\n    }\n\n    /**\n     * The X value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get end() {\n        return this.uniforms.end;\n    }\n    set end(value) {\n        this.uniforms.end = value;\n        this.updateDelta();\n    }\n}\n\n","import TiltShiftAxisFilter from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftXFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nexport default class TiltShiftXFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = dx / d;\n        this.uniforms.delta.y = dy / d;\n    }\n}\n","import TiltShiftAxisFilter from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nexport default class TiltShiftYFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = -dy / d;\n        this.uniforms.delta.y = dx / d;\n    }\n}\n","import TiltShiftXFilter from './TiltShiftXFilter';\nimport TiltShiftYFilter from './TiltShiftYFilter';\nimport * as PIXI from 'pixi.js';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/tilt-shift.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [blur=100] The strength of the blur.\n * @param {number} [gradientBlur=600] The strength of the gradient blur.\n * @param {PIXI.Point} [start=null] The Y value to start the effect at.\n * @param {PIXI.Point} [end=null] The Y value to end the effect at.\n */\nexport default class TiltShiftFilter extends PIXI.Filter {\n\n    constructor(blur = 100, gradientBlur = 600, start = null, end = null) {\n        super();\n        this.tiltShiftXFilter = new TiltShiftXFilter(blur, gradientBlur, start, end);\n        this.tiltShiftYFilter = new TiltShiftYFilter(blur, gradientBlur, start, end);\n    }\n\n    apply(filterManager, input, output) {\n        let renderTarget = filterManager.getRenderTarget(true);\n        this.tiltShiftXFilter.apply(filterManager, input, renderTarget);\n        this.tiltShiftYFilter.apply(filterManager, renderTarget, output);\n        filterManager.returnRenderTarget(renderTarget);\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     */\n    get blur() {\n        return this.tiltShiftXFilter.blur;\n    }\n    set blur(value) {\n        this.tiltShiftXFilter.blur = this.tiltShiftYFilter.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     */\n    get gradientBlur() {\n        return this.tiltShiftXFilter.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.tiltShiftXFilter.gradientBlur = this.tiltShiftYFilter.gradientBlur = value;\n    }\n\n    /**\n     * The Y value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get start() {\n        return this.tiltShiftXFilter.start;\n    }\n    set start(value) {\n        this.tiltShiftXFilter.start = this.tiltShiftYFilter.start = value;\n    }\n\n    /**\n     * The Y value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get end() {\n        return this.tiltShiftXFilter.end;\n    }\n    set end(value) {\n        this.tiltShiftXFilter.end = this.tiltShiftYFilter.end = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './twist.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * This filter applies a twist effect making display objects appear twisted in the given direction.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/twist.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [radius=200] The radius of the twist.\n * @param {number} [angle=4] The angle of the twist.\n * @param {number} [padding=20] Padding for filter area.\n */\nexport default class TwistFilter extends PIXI.Filter {\n    constructor(radius = 200, angle = 4, padding = 20) {\n        super(vertex, fragment);\n\n        this.radius = radius;\n        this.angle = angle;\n        this.padding = padding;\n    }\n\n    /**\n     * This point describes the the offset of the twist.\n     *\n     * @member {PIXI.Point}\n     */\n    get offset() {\n        return this.uniforms.offset;\n    }\n    set offset(value) {\n        this.uniforms.offset = value;\n    }\n\n    /**\n     * The radius of the twist.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The angle of the twist.\n     *\n     * @member {number}\n     */\n    get angle() {\n        return this.uniforms.angle;\n    }\n    set angle(value) {\n        this.uniforms.angle = value;\n    }\n}\n","import {vertex} from '@tools/fragments';\nimport fragment from './zoom-blur.frag';\nimport * as PIXI from 'pixi.js';\n\n/**\n * The ZoomFilter applies a Zoom blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/zoom-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [strength=0.1] Sets the strength of the zoom blur effect\n * @param {PIXI.Point|number[]} [center=[0,0]] The center of the zoom.\n * @param {number} [innerRadius=0] The inner radius of zoom. The part in inner circle won't apply zoom blur effect.\n * @param {number} [radius=-1] See `radius` property.\n */\nexport default class ZoomBlurFilter extends PIXI.Filter {\n    constructor(strength = 0.1, center = [0, 0], innerRadius = 0, radius = -1) {\n        super(vertex, fragment);\n\n        this.center = center;\n        this.strength = strength;\n        this.innerRadius = innerRadius;\n        this.radius = radius;\n    }\n\n    /**\n     * Center of the effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    get center() {\n        return this.uniforms.uCenter;\n    }\n    set center(value) {\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Intensity of the zoom effect.\n     *\n     * @member {number}\n     * @default 0.1\n     */\n    get strength() {\n        return this.uniforms.uStrength;\n    }\n    set strength(value) {\n        this.uniforms.uStrength = value;\n    }\n\n    /**\n     * Radius of the inner region not effected by blur.\n     *\n     * @member {number}\n     * @default 0\n     */\n    get innerRadius() {\n        return this.uniforms.uInnerRadius;\n    }\n    set innerRadius(value) {\n        this.uniforms.uInnerRadius = value;\n    }\n\n    /**\n     * Outer radius of the effect. The default value is `-1`.\n     * `< 0.0` means it's infinity.\n     *\n     * @member {number}\n     * @default -1\n     */\n    get radius() {\n        return this.uniforms.uRadius;\n    }\n    set radius(value) {\n        if (value < 0 || value === Infinity) {\n            value = -1;\n        }\n        this.uniforms.uRadius = value;\n    }\n}\n"],"sourceRoot":""}