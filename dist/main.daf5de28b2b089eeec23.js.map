{"version":3,"sources":["webpack:///./_engine/Button.ts","webpack:///./_engine/SceneManager.ts","webpack:///./_engine/Scene.ts","webpack:///./world/LevelHelper.ts","webpack:///./mobs/Mob.ts","webpack:///./objects/Bullet.ts","webpack:///./app.ts","webpack:///./enums.ts","webpack:///./global.ts","webpack:///./constants.ts","webpack:///./objects/PlayerStats.ts","webpack:///./world/WorldP2.ts","webpack:///./_engine/KeyboardMapper.ts","webpack:///./_engine/LinkedList.ts","webpack:///./_engine/Parallax.ts","webpack:///./_engine/Slider.ts","webpack:///./scenes/BootScene.ts","webpack:///./scenes/LoaderScene.ts","webpack:///./mobs/SpawnPoint.ts","webpack:///./mobs/BasicStaticAI.ts","webpack:///./mobs/AI.ts","webpack:///./objects/MasterHud.ts","webpack:///./scenes/MainScene.ts","webpack:///./objects/HeroCharacter.ts","webpack:///./objects/MovementController.ts","webpack:///./objects/StatsHud.ts","webpack:///./objects/Lava.ts","webpack:///./objects/Platform.ts","webpack:///./objects/Bumper.ts","webpack:///./questSystem/QuestManager.ts","webpack:///./questSystem/QuestState.ts","webpack:///./scenes/OptionsScene.ts","webpack:///./scenes/CutScene.ts","webpack:///./events.ts","webpack:///./world/SoundMan.ts","webpack:///./_engine/AnimatedSprite.ts","webpack:///./world/LevelLoader.ts","webpack:///./_engine/index.ts","webpack:///./_engine/Dictionary.ts","webpack:///./world/CollisionGroups.ts","webpack:///./index.ts"],"names":["OutlineMode","PIXI","__webpack_require__","filter_outline_1","exports","Button","_super","texturePath","x","y","width","height","_this","call","this","_isHighlighted","_isPressed","_isDisabled","_isClickStarted","requestedWidth","requestedHeight","onButtonDown","texture","textureDown","onButtonUp","event","onClickHandler","applyTexture","onButtonUpOutside","onButtonOver","textureHighlight","mouseover","onButtonOut","mouseout","position","set","setTexture","buttonMode","interactive","cursor","on","isPressed","tslib_1","__extends","Object","defineProperty","prototype","_outlineMode","state","filters","Filter","OutlineFilter","_outlineColor","value","_text","text","removeChild","anchor","scale","addChild","onClick","console","warn","textureUp","tint","performClick","textureAtlasName","atlasTexture","loader","resources","baseTexture","scaleMode","SCALE_MODES","NEAREST","btnHeight","btnWidth","Texture","Rectangle","scaleW","scaleH","Sprite","TWEEN","State","SceneManager","options","resizer","currentScene","scenes","startTime","animationFrameHandle","Destroy","cancelAnimationFrame","pause","forEach","scene","RemoveScene","renderer","destroy","resizeHandler","avlSize","sceneResizer","GetAvailableSize","aspect","GetAspectRatio","size","CalculateSize","resize","CalculateScale","onResize","masterHudOverlay","render","timestamp","requestAnimationFrame","update","isPaused","dt","onUpdate","masterContainer","undefined","clear","designWidth","designHeight","DefaultResizer","Container","antialias","roundPixels","backgroundColor","transparent","autoDetectRenderer","autoResize","textureGC","mode","GC_MODES","AUTO","window","removeEventListener","addEventListener","AddScene","push","sceneManager","RemoveAllScenes","onDestroy","filter","item","index","arr","HasScene","name","found","Name","length","GetScene","Error","ActivateScene","sceneOrName","log","onDeactivate","lastScene","BackGroundColor","onActivate","removeChildren","settings","RESOLUTION","devicePixelRatio","ActivatePreviousScene","hud","CaptureScene","renderTexture","RenderTexture","create","designedWidth","designedHeight","innerWidth","innerHeight","availableSize","maxWidth","maxHeight","Math","floor","min","newSize","Scene","scm","paused","hudScene","_clear","color","maxIndex","children","addChildAt","child","dispObj","setChildIndex","resume","clearFlag","getEntityDefinition","templates","entity","displayObjectDefinition","bodyDefinition","template","displayObject","typeName","body","trigger","drop","entityTemplate","__assign","triggerTemplate","templateName","doDef","bdDef","getUniqueItems","n","r","i","GetLevelAssets","root","levelId","assets","level","levels","id","parallax","iplx","concat","textures","map","tos","type","sequences","entities","defs","NPC","entity_1","attack","AnimatedSprite_1","Bullet_1","SoundMan_1","BasicStaticAI_1","WorldP2_1","enums_1","FRAME_SIZE","Mob","textureName","_isDead","isLoading","currentSeq","currentSequence","currentFps","fps","snd","atkMagic1","_direction","DirectionH","Left","play","onComplete","seq","fireBullet","sequenceName","addAnimations","AnimationSequence","onDeathCallBack","cb","squish","isDead","aname","mobSquish","dir","_attributes","values","atkTexture","constructor","Array","Bullet","emitBullet","wp2","playerBody","AtrType","Atk","createAI","aiTypeName","toLowerCase","_ai","BasicStaticAI","AnimatedSprite","p2","CollisionGroups_1","__1","velocity","ttl","damage","direction","Point","interactionType","ellapsed","performance","now","IsDead","len","sqrt","onDeath","visible","reset","bullets","target","bullet","findDeadBullet","Global","worldContainer","shape","Circle","radius","collisionGroup","COL_GRP_BULLET","collisionMask","COL_GRP_PLAYER","COL_GRP_SCENE","COL_GRP_GROUND","sensor","mass","angle","fixedRotation","angularDamping","damping","Body","addShape","setDensity","gravityScale","angularVelocity","collisionResponse","DYNAMIC","DisplayObject","addBody","pt","Float32Array","Direction","blt","_1","BootScene_1","PRELOAD_FONTS","cfg","google","families","active","getScm","boot","BootScene","WebFontConfig","e","src","document","location","protocol","wf","createElement","async","s","getElementsByTagName","parentNode","insertBefore","BaseStatType","StatType","DamageType","particles","_engine_1","constants_1","renderOptions","view","getElementById","resolution","SCENE_WIDTH","SCENE_HEIGHT","deleteScm","Renderer","createParticleEmitter","container","config","alpha","start","end","minimumScaleMultiplier","speed","minimumSpeedMultiplier","acceleration","startRotation","max","rotationSpeed","lifetime","blendMode","frequency","emitterLifetime","maxParticles","pos","addAtBack","spawnType","spawnCircle","emitter","Emitter","emit","LevelDefinitions","quests","SCENE_HALF_WIDTH","SCENE_HALF_HEIGHT","BTN_WIDTH","BTN_HEIGHT","MENU_LINE_HEIGHT","GUI_FONT","SCENE_BACKCOLOR","ANIMATION_FPS_NORMAL","ANIMATION_FPS_SLOW","BTN_STYLE","align","padding","fontSize","fontFamily","fill","strokeThickness","stroke","TEXT_STYLE","MSG_COIN_STYLE","MSG_HP_STYLE","MSG_EXP_STYLE","MSG_WARN_STYLE","EXP_BAR_STYLE","QUEST_ITEM_STYLE","QUEST_STYLE","dropShadow","dropShadowDistance","dropShadowBlur","global_1","events_1","LevelLoader_1","PlayerStats","baseStats","attributeStats","stats","accumulator","dpsDecreaseAmount","hasJumpAttack","hasMagicAttack","characterLevel","currentGameLevel","expForNextLevel","isBurningBuff","buffs","dps","LavaBorder","Lava","Poison","dmg","Dust","MaxDust","v","INTERVAL","RegenDust","increaseStat","HP","MaxHP","RegenHP","amount","event_1","OldValue","Amount","eventEmitter","DAMAGE_TOPIC","wasBurning","isBurning","BURN_TOPIC","scevent","Type","Coins","NewValue","Stats","TotalExp","AttributePoints","expForLevel","rebuildStats","levelLoader","LevelLoader","loadLevel","loadUserState","currentLevel","buildLevel","saveUserState","isLevelCompleted","Gold","data","getStat","Exp","AtrPts","LastLevel","setStat","findExpLevel","LevelMaxExp","LevelExp","updateEvent","STATCHANGE_TOPIC","maxValue","newValue","CharacterLevel","exp","Dictionary_1","ContactPair","BodyA","BodyB","WorldP2","contactPairs","contactWatch","playerBodyContacts","fixedTimeStep","beginContact","evt","other","bodyA","shapes","bodyB","world","playerHit","bulletBody","otherBody","watchedItemFound","bodyId","cp","endContact","bodyIDX","indexOf","splice","foundIdx","World","gravity","setupMaterials","ground","Plane","material","materials","get","COL_GRP_NPC","sleepMode","BODY_SLEEPING","clearLevel","bodies","b","removeBody","eventName","handler","context","step","interpolatedPosition","materialName","clearContactsForBody","getContactsForBody","foundPairs","addContactWatch","Dictionary","Material","idCounter","playerGroundContactMaterial","ContactMaterial","friction","restitution","stiffness","Equation","DEFAULT_STIFFNESS","relaxation","DEFAULT_RELAXATION","frictionStiffness","frictionRelaxation","surfaceVelocity","addContactMaterial","playerMobContactMaterial","playerBoxContactMaterial","playerBoxHighFirctContactMaterial","playerBumperContactMaterial","Number","MAX_VALUE","boxGroundContactMaterial","SceneManager_1","KeyboardMapper","ALT_KEY","SHIFT_KEY","CTRL_KEY","addKeyboardActionHandler","action","stateActions","keyboard","keydown","bind","keyup","currentState","actions","findHandlerAndInvoke","GLOBAL","ka","isAssigned","key","altKey","shiftKey","ctrlKey","releaseKeyAfterInvoke","which","isKeyDown","keyCode","KeyboardAction","LinkedList","first","last","AddNode","newLastNode","LinkedListNode","previous","next","list","InsertNode","newFirstNode","node","RemoveNode","RollLeft","second","callback","InsertBefore","First","FindFirst","InsertAfter","Last","FindLast","Parallax","parallaxFactor","textureScale","worldPosition","spriteBuffer","spriteOrderList","totalWidth","recalculatePosition","newPositionX","firstIdx","firstSpr","lastIdx","lastSpr","delta","updatePositions","shift","viewPortSize","unshift","pop","ViewPortSize","setTextures","SetViewPortX","point","factor","textureIndex","t","getTexture","rotate","spr","imageUrl","res","error","Slider","textureAtlas","sliderFrameWidth","setSliderFromeEvent","Value","getCalculatedValue","dragOffsetX","isDragging","onDragStart","getLocalPosition","handle","onDragEnd","stopped","onDragMove","textureControl","frame","frameDownControl","textureHandle","frameDownHandle","applyTextureFrames","control","frameHighlightControl","frameHighlightHandle","handleWidth","SetTexture","IsPressed","maxX","pct","minX","precise_round","newPosition","parent","num","decimals","pow","result","round","sign","toFixed","parseFloat","frameUpControl","frameUpHandle","frameHeight","frameWidth","LoaderScene_1","__2","PRELOAD_BOOT_ASSETS","spinner","rotation","loadingMessage","Text","add","load","startPreloading","__awaiter","loadingTexture","fromImage","onPreloadFinished","defaultIcon","plugins","interaction","cursorStyles","default","hover","style","questsObj","q","itemId","itemsNeeded","itemsCollected","rewardCoins","rewardExp","ls","LoaderScene","LevelHelper_1","PlayerStats_1","MasterHud_1","MainScene_1","OptionsScene_1","CutScene_1","preloadAssets","handleLevelLoading","onProgress","MainScene","OptionsScene","CutScene","MasterHudOverlay","MasterHud","startLevel","resource","progress","SpawnPoint","area","maxMobCount","respawnSeconds","mobCount","nextSpawn","mobBody","createMob","dispObj_1","random","loadSpr_1","setTimeout","mobEntity","canFire","nowMilliseconds","rnd","can","lastFire","attackCD","rnd_1","AI","LOCK_DISTANCE","TRACK_DISTANCE","calcDistance","targetDistance","turnTowardsTarget","hasTarget","attributes","AtkCD","dx","dy","Right","BTN_X","BTN_Y","BTN_SCALE","prefix","isFullScreen","btnFullScreen","toggleFullScreen","btnOptions","doc","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","docElm","documentElement","requestFullScreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","exitFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","HeroCharacter_1","StatsHud_1","Lava_1","Platform_1","Bumper_1","QuestManager_1","shakeDuration","shakeEnd","nextShake","magnitude","SHAKE_COUNT","startGroundShake","milliSeconds","magnitudeInPixels","setup","hero","p","STATIC","interpolatedAngle","Trigger","questMngr","canActivateTrigger","distance","handleTriggerEvent","playerContacts","handleInteractiveCollision","spawnPoints","IsHeroInteractive","cutScene","backGroundTexture","SetBackGround","DeathScene","shakeX","randomRange","shakeY","HeroCharacter","StatsHud","HudOverlay","registerFactory","def","Platform","tilesX","tilesY","Bumper","QuestManager","burn","burnStop","GROUND_SHAKE","playTrack","audioTrack","plx","idx","IsInteractive","idle","collectObject","orgScaleX","upX","upY","endX","endY","moveUp","Tween","to","easing","Easing","Linear","None","moveAway","Back","In","chain","removeEntity","addInfoMessage","coin","gem","questItem","acquireItem","secondsFromNow","seconds","removeDisplayObject","c","MovementController_1","Mob_1","HERO_FRAME_SIZE","movementCtrl","MovementState","Idle","emitterPixies","JumpLeft","IsRunning","minStartRotation","maxStartRotation","JumpRight","JumpUp","updateOwnerPos","emitterBurn","degree","PI","onPlayerMove","newState","isRunning","idleAnimationTimeoutHandle","clearTimeout","walk","jump","JumpDownLeft","jumpAttack","JumpDownRight","MovementController","onPlayerContact","onBulletContact","asset","MOVE_TOPIC","isInteractive","mob","verticalVelocity","abs","handleMobInteraction","movementState","JumpDown","jumpContact","smoke","pivot","hitPain","explode","bulletHitWall","it","chance","dropItemBody","createEntity","addDropItem","itemBody","orgScaleY","VELOCITY","JUMP_FORCE","JUMP_ATTACK_FORCE","JUMP_COOLDOWN","JUMP_ATTACK_COOLDOWN","JUMP_ATTACK_FREEZE","nextJumpAllowed","nextJumpDownAllowed","kbd","isJumping","_isInteractive","StartJump","forceVector","applyImpulse","StartJumpDown","setZeroForce","oldState","hasOnlySensorContacts","every","calcMovementVelocity","HasJumpAtack","canRun","newIsRunning","CanJump","isCurrentJumping","IsJumping","questMsgEndTime","handleDpsChange","handleStatChange","txtCoins","toString","txtDust","txtHP","renderExp","handleLevelUp","txtExp","expFiller","addLvlUpMessage","txtLevel","txtPlayerPosition","panel","txtQuestMessage","pnl","LINEAR","maxLifetime","expPreFiller","fillLen","onCompleteCB","message","offsetX","stl","txtInfo","fade","addQuestItemMessage","setQuestMessage","msg","ttlMilis","targetWidth","diff","preFillTween","fillTween","Bounce","Out","FRAME_SIZE_X","FRAME_SIZE_Y","textureNameTopLeft","textureNameTopRight","textureNameBtmMid","textureNameBtmLeft","textureNameBtmRight","textureNameTopMid","w","h","extras","TilingSprite","xTiles","TEXTURE_BUMPER","TEXTURE_ROTOR","ROTATION","rot","rotor","QuestState_1","gameScene","questState","qs","QuestState","findQuest","quest","findQuestWithItem","setQuestState","Completed","completedMsg","questId","isArray","dependsOn","dependency","Rewarded","lastActive","getQuestState","quest_1","welcomeMsg","Finished","giveRewards","InProgress","win","genericQuestHandler","getChildByName","lock","findBodyByName","cs","SetText","finishedMsg","rt","objectiveMsg","foundBody","currentMusicTrack","find","obj","title","OFFSET","btnBack","Scene_1","Button_1","deathScene","btnContinue","callout","corpse","deathTrackId","getTrack","deathMessages","corpseBlurFilter","BlurFilter","textMessage","blr","blur","clm","ColorMatrixFilter","sepia","backSprite","TextStyle","utils","EventEmitter","howler_1","SoundMan","musicTrackNames","musicTracks","currentTrack","previousMusicVolume","previousFxVolume","musicVolume","fxVolume","trackName","Howl","autoplay","loop","volume","walkSnd","preload","jumpSnd1","jumpSnd2","burnSnd","hurtSnd","coinSnd","gemSnd","questItemSnd","winSnd","atkMag1","hitMag1","jumpAtk","pain","jmpContact","woosh","fxDemoSnd","backgroundSnd","playing","FxVolume","MusicVolume","rate","hitMagic1","hurt","stop","stopTrack","trackId","animations","resetAnimation","frames","isPlaying","isLooping","frameIndex","_i","arguments","valid","clearAnimations","secForFrame","onCompleteCallBack","tempTexure","TextureCache","xFrames","rect","SpawnPoint_1","gameLevels","factory","factoryList","levelDefinition","createLevel","vps","p2body","npc","sp","xy","buildDisplayObject","buildPhysicsObject","collisionType","mobDispObj","ai","definition","mob_1","aseq","framesize","aspr","parseInt","preventSensor","KINEMATIC","dispObjAsAny","Box","getLocalBounds","KeyboardMapper_1","LinkedList_1","Parallax_1","Slider_1","_values","_keys","contains","remove","getAll","getSet","valueOrvalueGetter","pixi","g","__exportStar"],"mappings":"+IAGYA,SAHZC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KAEA,SAAYF,GAKRA,IAAA,qBAKAA,IAAA,mBAVJ,CAAYA,EAAAI,EAAAJ,cAAAI,EAAAJ,YAAW,KAYvB,IAAAK,EAAA,SAAAC,GAeI,SAAAD,EAAYE,EAAqBC,EAAeC,EAAeC,EAAqBC,QAAnD,IAAAH,MAAA,QAAe,IAAAC,MAAA,QAAe,IAAAC,MAAA,UAAqB,IAAAC,MAAA,IAApF,IAAAC,EACIN,EAAAO,KAAAC,OAAOA,YATHF,EAAAG,gBAA0B,EAC1BH,EAAAI,YAAsB,EACtBJ,EAAAK,aAAuB,EACvBL,EAAAM,iBAA2B,EAE3BN,EAAAO,eAAyB,EACzBP,EAAAQ,gBAA0B,EAgG1BR,EAAAS,aAAe,WAChBT,EAAKK,cACRL,EAAKM,iBAAkB,EACvBN,EAAKU,QAAUV,EAAKW,cAGhBX,EAAAY,WAAa,SAACC,GACfb,EAAKK,cACJL,EAAKM,kBACLN,EAAKM,iBAAkB,EACvBN,EAAKc,eAAeD,IAExBb,EAAKe,iBAGDf,EAAAgB,kBAAoB,WACrBhB,EAAKK,cACRL,EAAKe,eACLf,EAAKM,iBAAkB,IAGnBN,EAAAiB,aAAe,SAACJ,GACjBb,EAAKK,cACRL,EAAKU,QAAUV,EAAKkB,iBACjBlB,EAAKmB,WAAUnB,EAAKmB,UAAUN,KAG7Bb,EAAAoB,YAAc,SAACP,GAChBb,EAAKK,cACRL,EAAKM,iBAAkB,EACvBN,EAAKe,eACFf,EAAKqB,UAASrB,EAAKqB,SAASR,KA3H/Bb,EAAKsB,SAASC,IAAI3B,GAAK,EAAGC,GAAK,GAC/BG,EAAKQ,gBAAkBT,EACvBC,EAAKO,eAAiBT,EAGtBE,EAAKwB,WAAW7B,GAEhBK,EAAKyB,YAAa,EAClBzB,EAAK0B,aAAc,EACnB1B,EAAK2B,OAAS,QAGd3B,EAAK4B,GAAG,cAAe5B,EAAKS,cAC5BT,EAAK4B,GAAG,YAAa5B,EAAKY,YAC1BZ,EAAK4B,GAAG,mBAAoB5B,EAAKgB,mBACjChB,EAAK4B,GAAG,cAAe5B,EAAKiB,cAC5BjB,EAAK4B,GAAG,aAAc5B,EAAKoB,aAE3BpB,EAAK6B,WAAY,IA8IzB,OAjL4BC,EAAAC,UAAAtC,EAAAC,GAsCxBsC,OAAAC,eAAWxC,EAAAyC,UAAA,cAAW,KAAtB,WACI,OAAOhC,KAAKiC,kBAEhB,SAAuBC,GACnBlC,KAAKiC,aAAeC,EACpBlC,KAAKmC,QAAUnC,KAAKiC,cAAgB/C,EAAYkD,OAAS,CAAC,IAAI/C,EAAAgD,cAAc,EAAGrC,KAAKsC,cAAe,KAAS,sCAGhHR,OAAAC,eAAWxC,EAAAyC,UAAA,eAAY,KAAvB,WACI,OAAOhC,KAAKsC,mBAEhB,SAAwBC,GACpBvC,KAAKsC,cAAgBC,EACrBvC,KAAKmC,QAAUnC,KAAKiC,cAAgB/C,EAAYkD,OAAS,CAAC,IAAI/C,EAAAgD,cAAc,EAAGrC,KAAKsC,cAAe,KAAS,sCAGhHR,OAAAC,eAAWxC,EAAAyC,UAAA,WAAQ,KAAnB,WACI,OAAOhC,KAAKG,iBAEhB,SAAoB+B,GAChBlC,KAAKG,YAAc+B,EACnBlC,KAAKyB,OAASS,EAAQ,GAAK,QAC3BlC,KAAKa,gDAGTiB,OAAAC,eAAWxC,EAAAyC,UAAA,YAAS,KAApB,WACI,OAAOhC,KAAKE,gBAEhB,SAAqBgC,GACjBlC,KAAKE,WAAagC,EAClBlC,KAAKa,gDAGTiB,OAAAC,eAAWxC,EAAAyC,UAAA,gBAAa,KAAxB,WACI,OAAOhC,KAAKC,oBAEhB,SAAyBiC,GACrBlC,KAAKC,eAAiBiC,EACtBlC,KAAKa,gDAGTiB,OAAAC,eAAWxC,EAAAyC,UAAA,OAAI,KAAf,WACI,OAAOhC,KAAKwC,WAEhB,SAAgBC,GAKZ,GAJIzC,KAAKwC,OACLxC,KAAK0C,YAAY1C,KAAKwC,OAE1BxC,KAAKwC,MAAQC,EACTzC,KAAKwC,MAAO,CACZxC,KAAKwC,MAAMG,OAAOtB,IAAI,GAAK,IAC3B,IAAI3B,EAAKM,KAAKJ,MAAQI,KAAK4C,MAAMlD,EAAK,EAClCC,EAAKK,KAAKH,OAASG,KAAK4C,MAAMjD,EAAK,EACvCK,KAAKwC,MAAMpB,SAASC,IAAI3B,EAAGC,GAC3BK,KAAK6C,SAAS7C,KAAKwC,yCAQnBjD,EAAAyC,UAAApB,eAAR,SAAuBD,GACfX,KAAK8C,QAIL9C,KAAK8C,QAAQnC,GAHboC,QAAQC,KAAK,yDAyCbzD,EAAAyC,UAAAnB,aAAR,WACOb,KAAKG,aACJH,KAAKQ,QAAUR,KAAKiD,UACpBjD,KAAKkD,KAAO,SACPlD,KAAKC,gBACVD,KAAKQ,QAAUR,KAAKgB,iBACpBhB,KAAKkD,KAAO,UAGZlD,KAAKQ,QAAUR,KAAKE,WAAaF,KAAKS,YAAcT,KAAKiD,UACzDjD,KAAKkD,KAAO,WAIb3D,EAAAyC,UAAAmB,aAAP,SAAoBxC,GAChBX,KAAKY,eAAeD,IAGjBpB,EAAAyC,UAAAV,WAAP,SAAkB8B,GACd,IAAIC,EAAelE,EAAKmE,OAAOC,UAAUH,GAAkB5C,QAC3D6C,EAAaG,YAAYC,UAAYtE,EAAKuE,YAAYC,QACtD,IAAIC,EAAYP,EAAaxD,OAAS,EAClCgE,EAAWR,EAAazD,MAC5BI,KAAKiD,UAAY,IAAI9D,EAAK2E,QAAQT,EAAaG,YAAa,IAAIrE,EAAK4E,UAAU,EAAG,EAAIH,EAAWC,EAAUD,IAC3G5D,KAAKgB,iBAAmB,IAAI7B,EAAK2E,QAAQT,EAAaG,YAAa,IAAIrE,EAAK4E,UAAU,EAAG,EAAIH,EAAWC,EAAUD,IAClH5D,KAAKS,YAAc,IAAItB,EAAK2E,QAAQT,EAAaG,YAAa,IAAIrE,EAAK4E,UAAU,EAAG,EAAIH,EAAWC,EAAUD,IAG7G,IAAII,GAAUhE,KAAKK,gBAAkBwD,GAAaA,EAC9CI,GAAUjE,KAAKM,iBAAmBsD,GAAaA,EACnD5D,KAAK4C,MAAMvB,IAAI2C,EAAQC,GAEvBjE,KAAKa,gBAEbtB,EAjLA,CAA4BJ,EAAK+E,QAApB5E,EAAAC,4FCfb,IAAAJ,EAAAC,EAAA,GAEA+E,EAAA/E,EAAA,KACA,SAAYgF,GACRA,IAAA,mBACAA,IAAA,eACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,qBARJ,CAAY9E,EAAA8E,QAAA9E,EAAA8E,MAAK,KAgBjB,IAAAC,EAAA,WA2BI,SAAAA,EAAYzE,EAAeC,EAAgByE,EAAgCC,GAA3E,IAAAzE,EAAAE,KAnBQA,KAAAwE,aAA6B,KAE7BxE,KAAAyE,OAAuB,GAOvBzE,KAAA0E,UAAY,KACZ1E,KAAA2E,sBAA+B,EA8LhC3E,KAAA4E,QAAU,WACbC,qBAAqB/E,EAAK6E,sBACtB7E,EAAK0E,cAAgB1E,EAAK0E,aAAaM,QAC3ChF,EAAK2E,OAAOM,QAAQ,SAACC,GACjBlF,EAAKmF,YAAYD,KAErBlF,EAAKoF,SAASC,SAAQ,IAGlBnF,KAAAoF,cAAgB,WACpB,IAAIC,EAAUvF,EAAKwF,aAAaC,mBAC5BC,EAAS1F,EAAKwF,aAAaG,iBAC3BC,EAAO5F,EAAKwF,aAAaK,cAAcN,EAASG,GACpD1F,EAAKoF,SAASU,OAAOF,EAAKhG,EAAGgG,EAAK/F,GAE9BG,EAAK0E,eACL1E,EAAK0E,aAAa5B,MAAMvB,IAAIvB,EAAKwF,aAAaO,eAAeH,IAEzD5F,EAAK0E,aAAasB,YAIvBhG,EAAKiG,kBACJjG,EAAKiG,iBAAiBnD,MAAMvB,IAAIvB,EAAKwF,aAAaO,eAAeH,KAIjE1F,KAAAgG,OAAS,SAACC,GASd,GANAnG,EAAK6E,qBAAuBuB,sBAAsBpG,EAAKkG,QAGvD7B,EAAMgC,OAAOF,GAGRnG,EAAK0E,eAAgB1E,EAAK0E,aAAa4B,WAA5C,CAIKtG,EAAK4E,YACN5E,EAAK4E,UAAYuB,GAIjB,IAAII,EAAKJ,EAAYnG,EAAK4E,UACtB2B,EAAK,KACLA,EAAK,IAETvG,EAAK0E,aAAa8B,SAASD,GAG/BvG,EAAK4E,UAAYuB,EACjBnG,EAAKoF,SAASc,OAAOlG,EAAKyG,qBAAiBC,EAAW1G,EAAK0E,aAAaiC,SAzOxEzG,KAAK0G,YAAc9G,EACnBI,KAAK2G,aAAe9G,EACpBG,KAAKsF,aAAef,GAAW,IAAIqC,EAAe5G,KAAK0G,YAAa1G,KAAK2G,cACzE3G,KAAKuG,gBAAkB,IAAIpH,EAAK0H,UAE3BvC,IACDA,EAAU,CAAEwC,WAAW,EAAOC,aAAa,EAAMC,gBAAiB,MAAUC,aAAa,IAE7FjH,KAAKkF,SAAW/F,EAAK+H,mBAAmBtH,EAAOC,EAAQyE,GACvDtE,KAAKkF,SAASiC,YAAa,EAGtBnH,KAAKgG,OAAeoB,YACpBpH,KAAKgG,OAAeoB,UAAUC,KAAOlI,EAAKmI,SAASC,MAGxDC,OAAOC,oBAAoB,SAAUzH,KAAKoF,eAC1CoC,OAAOE,iBAAiB,SAAU1H,KAAKoF,eAAe,GAgBtDpF,KAAKgG,OAAO,GA4MpB,OAtMIlE,OAAAC,eAAWsC,EAAArC,UAAA,WAAQ,KAAnB,WACI,OAAOhC,KAAKkF,0CAMhBpD,OAAAC,eAAWsC,EAAArC,UAAA,eAAY,KAAvB,WACI,OAAOhC,KAAKwE,8CAMTH,EAAArC,UAAA2F,SAAP,SAAgB3C,GACZhF,KAAKyE,OAAOmD,KAAK5C,GACjBA,EAAM6C,aAAe7H,MAMlBqE,EAAArC,UAAA8F,gBAAP,WACI9H,KAAKyE,OAAOM,QAAQ,SAACC,GAChBA,EAAM6C,kBAAuBrB,EAC9BxB,EAAM+C,WAAU,KAEpB/H,KAAKyE,OAAS,GACdzE,KAAKwE,aAAe,MAMjBH,EAAArC,UAAAiD,YAAP,SAAmBD,GACfhF,KAAKyE,OAASzE,KAAKyE,OAAOuD,OAAO,SAACC,EAAaC,EAAeC,GAC1D,OAAOF,IAASjD,IAEnBA,EAAM6C,kBAAuBrB,GAO3BnC,EAAArC,UAAAoG,SAAP,SAAgBC,GACZ,IAAIC,EAAQtI,KAAKyE,OAAOuD,OAAO,SAACC,GAAkB,OAAOA,EAAKM,OAASF,IACvE,OAAQC,GAASA,EAAME,OAAS,GAO7BnE,EAAArC,UAAAyG,SAAP,SAAgBJ,GACZ,IAAIC,EAAQtI,KAAKyE,OAAOuD,OAAO,SAACC,GAAkB,OAAOA,EAAKM,OAASF,IACvE,IAAKC,GAA0B,IAAjBA,EAAME,OAChB,MAAME,MAAM,WAAaL,EAAO,eAEpC,GAAIC,EAAME,OAAS,EACf,MAAME,MAAM,qBAAuBL,EAAO,WAE9C,OAAOC,EAAM,IAMVjE,EAAArC,UAAA2G,cAAP,SAAqBC,GACjB,IAAI5D,EACJ,GAA6B,iBAAlB,EAA4B,CACnC,IAAIsD,EAAQtI,KAAKyE,OAAOuD,OAAO,SAACC,GAAiB,OAAOA,EAAKM,OAASK,IACtE,IAAKN,GAA0B,IAAjBA,EAAME,OAChB,MAAME,MAAM,WAAaE,EAAc,eAE3C,GAAIN,EAAME,OAAS,EACf,MAAME,MAAM,qBAAuBE,EAAc,WAErD5D,EAAQsD,EAAM,QAEdtD,EAAQ4D,EAGT5I,KAAKwE,cAAsDxE,KAAKwE,eAAiBQ,IAEhFjC,QAAQ8F,IAAI,mBAAqB7I,KAAKwE,aAAa+D,MACnDvI,KAAKwE,aAAasE,gBAGtB/F,QAAQ8F,IAAI,iBAAmB7D,EAAMuD,MACrCvI,KAAK0E,UAAY,KACjB1E,KAAK+I,UAAa/I,KAAKwE,cAAgBQ,EAAQhF,KAAKwE,aAAexE,KAAK+I,UACxE/I,KAAKwE,aAAeQ,EACpBhF,KAAKkF,SAAS8B,gBAAkBhC,EAAMgE,gBACtChJ,KAAKoF,gBAGDJ,EAAMiE,aAGVjJ,KAAKuG,gBAAgB2C,iBACrBlJ,KAAKuG,gBAAgB1D,SAAS7C,KAAKwE,cAChCxE,KAAK+F,kBAAiB/F,KAAKuG,gBAAgB1D,SAAS7C,KAAK+F,kBAE5D5G,EAAKgK,SAASC,WAAa5B,OAAO6B,kBAG/BhF,EAAArC,UAAAsH,sBAAP,WACItJ,KAAK2I,cAAc3I,KAAK+I,YAM5BjH,OAAAC,eAAWsC,EAAArC,UAAA,mBAAgB,KAA3B,WACI,OAAOhC,KAAK+F,sBAKhB,SAA4BwD,GACxBvJ,KAAK+F,iBAAmBwD,EACxBvJ,KAAKuG,gBAAgB2C,iBACrBlJ,KAAKuG,gBAAgB1D,SAAS7C,KAAKwE,cAChCxE,KAAK+F,kBAAiB/F,KAAKuG,gBAAgB1D,SAAS7C,KAAK+F,kBAC5D/F,KAAKoF,iDAMFf,EAAArC,UAAAwH,aAAP,WACIzG,QAAQ8F,IAAI,2BAA2B7I,KAAKkF,SAAStF,MAAK,aAAaI,KAAKkF,SAASrF,QACrF,IAAI4J,EAAgBtK,EAAKuK,cAAcC,OAAO3J,KAAKkF,SAAStF,MAAOI,KAAKkF,SAASrF,QAEjF,OADAG,KAAKkF,SAASc,OAAOhG,KAAKwE,aAAuBiF,GAC1CA,GA+DfpF,EAzQA,GAAa/E,EAAA+E,eA2Qb,IAAAuC,EAAA,WACI,SAAAA,EAAsBgD,EAAgCC,GAAhC7J,KAAA4J,gBAAgC5J,KAAA6J,iBAiB1D,OAfWjD,EAAA5E,UAAAuD,iBAAP,WACI,MAAO,CAAE7F,EAAG8H,OAAOsC,WAAYnK,EAAG6H,OAAOuC,cAEtCnD,EAAA5E,UAAAyD,eAAP,WACI,OAAOzF,KAAK4J,cAAgB5J,KAAK6J,gBAE9BjD,EAAA5E,UAAA2D,cAAP,SAAqBqE,EAAsBxE,GACvC,IAAIyE,EAAkBC,EAGtB,OAFAD,EAAWE,KAAKC,MAAM5E,EAASwE,EAAcrK,GAC7CuK,EAAYC,KAAKC,MAAM5C,OAAOuC,aACvB,CAAErK,EAAGyK,KAAKE,IAAIJ,EAAUD,EAActK,GAAKC,EAAGwK,KAAKE,IAAIH,EAAWF,EAAcrK,KAEpFiH,EAAA5E,UAAA6D,eAAP,SAAsByE,GAClB,OAAOA,EAAQ5K,EAAIM,KAAK4J,eAEhChD,EAlBA,GAAatH,EAAAsH,+GCvRb2D,EAAA,SAAA/K,GAeI,SAAA+K,EAAYC,EAAmBnC,GAA/B,IAAAvI,EACIN,EAAAO,KAAAC,OAAOA,YAfHF,EAAA2K,QAAkB,EAClB3K,EAAA4K,SAAkC,KAwElC5K,EAAA6K,QAAiB,EAzDrB7K,EAAK+H,aAAe2C,EACpB1K,EAAKkH,gBAAkB,EACvBlH,EAAKyI,KAAOF,IA+DpB,OAlFoCzG,EAAAC,UAAA0I,EAAA/K,GAKzB+K,EAAAvI,UAAAiH,WAAP,aACOsB,EAAAvI,UAAA8G,aAAP,aACOyB,EAAAvI,UAAA8D,SAAP,aACOyE,EAAAvI,UAAAsE,SAAP,SAAgBD,KACTkE,EAAAvI,UAAA+F,UAAP,SAAiBzD,KAejBxC,OAAAC,eAAWwI,EAAAvI,UAAA,kBAAe,KAA1B,WACI,OAAOhC,KAAKgH,qBAEhB,SAA2B4D,GACvB5K,KAAKgH,gBAAkB4D,mCAG3B9I,OAAAC,eAAWwI,EAAAvI,UAAA,aAAU,KAArB,WACI,OAAOhC,KAAK0K,cAEhB,SAAsBnB,GAMlB,GALIvJ,KAAK0K,UACL1K,KAAK0C,YAAY1C,KAAK0K,UAE1B1K,KAAK0K,SAAWnB,EAEZvJ,KAAK0K,SAAU,CACf,IAAIG,EAAW7K,KAAK8K,SAAStC,OAC7BxI,KAAK+K,WAAW/K,KAAK0K,SAAUG,qCAIhCN,EAAAvI,UAAAa,SAAP,SAA8CmI,GAC1C,IAAIC,EAAUzL,EAAAwC,UAAMa,SAAQ9C,KAAAC,KAACgL,GAC7B,GAAIhL,KAAK0K,SAAU,CACf,IAAIG,EAAW7K,KAAK8K,SAAStC,OAAS,EACtCxI,KAAKkL,cAAclL,KAAK0K,SAAUG,GAEtC,OAAOI,GAGJV,EAAAvI,UAAA+I,WAAP,SAAgDC,EAAU9C,GACtD,IAAI+C,EAAUzL,EAAAwC,UAAM+I,WAAUhL,KAAAC,KAACgL,EAAO9C,GACtC,GAAIlI,KAAK0K,SAAU,CACf,IAAIG,EAAW7K,KAAK8K,SAAStC,OAAS,EACtCxI,KAAKkL,cAAclL,KAAK0K,SAAUG,GAEtC,OAAOI,GAGJV,EAAAvI,UAAA8C,MAAP,WACI9E,KAAKyK,QAAS,GAEXF,EAAAvI,UAAAmJ,OAAP,WACInL,KAAKyK,QAAS,GAEXF,EAAAvI,UAAAoE,SAAP,WACI,OAAOpG,KAAKyK,QAIhB3I,OAAAC,eAAWwI,EAAAvI,UAAA,QAAK,KAAhB,WACI,OAAOhC,KAAK2K,YAGhB,SAAiBS,GACbpL,KAAK2K,OAASS,mCAEtBb,EAlFA,CAPAnL,EAAA,GAOyCyH,WAAnBvH,EAAAiL,sGCiHtB,SAAgBc,EAAoBC,EAAuBC,GACvD,IAAIC,EAA0B,KAC1BC,EAAiB,KACjBC,EAAW,CACXrD,KAAM,KACNsD,cAAe,CAAEC,SAAU,UAC3BC,KAAM,KACNC,QAAS,KACTC,KAAM,MAENC,EAAiBV,EAAUtD,OAAO,SAACC,GAAS,OAAAA,EAAKI,OAASkD,EAAOG,WACjEM,GAAkBA,EAAexD,OAAS,IAC1CkD,EAAWM,EAAe,IAE9BR,EAAuB5J,EAAAqK,SAAA,GAAQP,EAASC,cAAkBJ,GAEtDG,EAASK,OACTP,EAAuB5J,EAAAqK,SAAA,GAAQT,EAAuB,CAAEO,KAAML,EAASK,QAEvEL,EAASG,OACTJ,EAAiBC,EAASG,MAG9B,IAAIK,OAAkB1F,EAItB,OAHIkF,EAASI,SAAWN,EAAwBM,WAC5CI,EAAetK,EAAAqK,SAAA,GAAQP,EAASI,QAAYN,EAAwBM,UAEjE,CACHK,aAAcT,EAASrD,KACvB+D,MAAOZ,EACPa,MAAOZ,EACPK,QAASI,GAOjB,SAAgBI,EAAenE,GAE3B,IADA,IAAIoE,EAAI,GAAIC,EAAI,GACPC,EAAI,EAAGA,EAAItE,EAAIK,OAAQiE,IACvBF,EAAEpE,EAAIsE,MACPF,EAAEpE,EAAIsE,KAAM,EACZD,EAAE5E,KAAKO,EAAIsE,KAGnB,OAAOD,EA/JXlN,EAAAoN,eAAA,SAA+BC,EAAmBC,GAI9C,IAHA,IAAIC,EAAmB,GAEnBC,OAA0BtG,EACrBiG,EAAI,EAAGA,EAAIE,EAAKI,OAAOvE,OAAQiE,IACpC,GAAIE,EAAKI,OAAON,GAAGO,KAAOJ,EAAS,CAC/BE,EAAQH,EAAKI,OAAON,GACpB,MAIR,GAAIK,EAAO,CACPA,EAAMG,SAASlI,QAAQ,SAACmI,GACpBL,EAASA,EAAOM,OAAOD,EAAKE,YAG5BN,EAAMD,QAAUC,EAAMD,OAAOrE,OAAS,IACtCqE,EAASA,EAAOM,OAAOL,EAAMD,SAIjC,IAAIvB,EAAYqB,EAAKrB,UAAU6B,OAAOL,EAAMO,IAAI/B,WAGhDwB,EAAMO,IAAI/B,UAAUvG,QAAQ,SAACuI,GACzB,IAAKA,EAAIC,MAAqB,gBAAbD,EAAIC,KAAwB,CACzC,IACItC,EADQqC,EACQ3B,cAChBV,EAAQzK,UACuB,iBAApByK,EAAQzK,QACfqM,EAAOjF,KAAKqD,EAAQzK,SAEpBqM,EAASA,EAAOM,OAAOlC,EAAQzK,UAGnCyK,EAAQuC,WACRvC,EAAQuC,UAAUzI,QAAQ,SAACkD,GACvB4E,EAAOjF,KAAKK,EAAKzH,cAMjCsM,EAAMO,IAAII,SAAS1I,QAAQ,SAACwG,GACxB,IAAImC,EAAOrC,EAAoBC,EAAWC,GACtCmC,EAAKtB,MAAM5L,UACuB,iBAAvBkN,EAAKtB,MAAM5L,QAClBqM,EAAOjF,KAAK8F,EAAKtB,MAAM5L,SAEvBqM,EAASA,EAAOM,OAAOO,EAAKtB,MAAM5L,UAGtCkN,EAAKtB,MAAMoB,WACXE,EAAKtB,MAAMoB,UAAUzI,QAAQ,SAACkD,GAC1B4E,EAAOjF,KAAKK,EAAKzH,aAK7BsM,EAAMO,IAAIM,IAAMb,EAAMO,IAAIM,KAAO,GACjCb,EAAMO,IAAIM,IAAI5I,QAAQ,SAACuI,GAEnB,GAAIA,EAAIC,MAAqB,gBAAbD,EAAIC,aAEb,CAEH,IAAIK,EAAqBN,EAGrBM,EAAOC,SACPhB,EAASA,EAAOM,OAAOS,EAAOC,SAGlC,IAAI7B,EAAiBV,EAAUtD,OAAO,SAACC,GAAS,OAAAA,EAAKI,OAASuF,EAAOlC,WACrE,GAAIM,GAAkBA,EAAexD,OAAS,EAAG,CAC7C,IAAIkD,EAAWM,EAAe,GAG1BR,EAAuB5J,EAAAqK,SAAA,GAAQP,EAASC,cAAkBiC,GAC1DpC,EAAwBhL,UACuB,iBAApCgL,EAAwBhL,QAC/BqM,EAAOjF,KAAK4D,EAAwBhL,SAEpCqM,EAASA,EAAOM,OAAO3B,EAAwBhL,UAInDgL,EAAwBqC,SACxBhB,EAASA,EAAOM,OAAO3B,EAAwBqC,SAG/CrC,EAAwBgC,WACxBhC,EAAwBgC,UAAUzI,QAAQ,SAACkD,GAEnCA,EAAKzH,SACLqM,EAAOjF,KAAKK,EAAKzH,eAU7C,OADAqM,EAASP,EAAeO,IAS5BvN,EAAA+L,sBAsCA/L,EAAAgN,+GC9JAwB,EAAA1O,EAAA,IACA2O,EAAA3O,EAAA,KACA4O,EAAA5O,EAAA,IAEA6O,EAAA7O,EAAA,KACA8O,EAAA9O,EAAA,IACA+O,EAAA/O,EAAA,IAEMgP,EAAqB,GAO3BC,EAAA,SAAA7O,GAQI,SAAA6O,EAAoBC,GAApB,IAAAxO,EACIN,EAAAO,KAAAC,OAAOA,YADSF,EAAAwO,cALZxO,EAAAyO,SAAmB,EAkBpBzO,EAAA0O,WAAqB,EA4DrB1O,EAAA+N,OAAS,WACZ,IAAIY,EAAa3O,EAAK4O,gBAClBC,EAAa7O,EAAK8O,IACtBZ,EAAAa,IAAIC,YACAhP,EAAKiP,YAAcZ,EAAAa,WAAWC,KAC9BnP,EAAKoP,KAAK,OAAQP,GAAY,GAE9B7O,EAAKoP,KAAK,OAAQP,GAAY,GAGlC7O,EAAKqP,WAAa,SAACC,GACftP,EAAKqP,WAAa,KAClBrP,EAAKuP,aACLvP,EAAKoP,KAAKT,EAAWa,aAAcX,KAnFvC7O,EAAKyP,cAAc,IAAIzB,EAAA0B,kBAAkB,OAAQ1P,EAAKwO,YAAa,CAAC,EAAG,EAAG,GAAIF,EAAYA,IAC1FtO,EAAKyP,cAAc,IAAIzB,EAAA0B,kBAAkB,QAAS1P,EAAKwO,YAAa,CAAC,EAAG,EAAG,GAAIF,EAAYA,IAC3FtO,EAAKyP,cAAc,IAAIzB,EAAA0B,kBAAkB,OAAQ1P,EAAKwO,YAAa,CAAC,EAAG,EAAG,GAAIF,EAAYA,IAC1FtO,EAAKyP,cAAc,IAAIzB,EAAA0B,kBAAkB,OAAQ1P,EAAKwO,YAAa,CAAC,EAAG,GAAI,IAAKF,EAAYA,IAC5FtO,EAAKyP,cAAc,IAAIzB,EAAA0B,kBAAkB,UAAW1P,EAAKwO,YAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKF,EAAYA,IAC5GtO,EAAKyP,cAAc,IAAIzB,EAAA0B,kBAAkB,UAAW1P,EAAKwO,YAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKF,EAAYA,IAC5GtO,EAAKoP,KAAK,QACVpP,EAAKiP,WAAaZ,EAAAa,WAAWC,OA4GrC,OA9HyBrN,EAAAC,UAAAwM,EAAA7O,GAuBrBsC,OAAAC,eAAWsM,EAAArM,UAAA,SAAM,KAAjB,WACI,OAAOhC,KAAKuO,aAEhB,SAAkBhM,GACVA,GAASvC,KAAKuO,UACdvO,KAAKuO,QAAUhM,EACXvC,KAAKuO,SAAWvO,KAAKyP,iBACrBzP,KAAKyP,oDAKjB3N,OAAAC,eAAWsM,EAAArM,UAAA,UAAO,KAGlB,WACI,OAAOhC,KAAKyP,qBAJhB,SAAmBC,GACf1P,KAAKyP,gBAAkBC,mCAgBpBrB,EAAArM,UAAA2N,OAAP,SAAcD,GACV1P,KAAK4P,QAAS,EACd,IAAIC,EAAS7P,KAAK+O,YAAcZ,EAAAa,WAAWC,KAAO,UAAY,UAC9DjP,KAAKmP,WAAaO,EAClB1P,KAAKkP,KAAKW,EAAO,IAAI,GACrB7B,EAAAa,IAAIiB,aAGRhO,OAAAC,eAAWsM,EAAArM,UAAA,YAAS,KAApB,WACI,OAAOhC,KAAK+O,gBAEhB,SAAqBgB,GACb/P,KAAK+O,YAAcgB,IACnB/P,KAAK+O,WAAagB,EACdA,IAAQ5B,EAAAa,WAAWC,KACnBjP,KAAKkP,KAAK,QAEVlP,KAAKkP,KAAK,2CAKtBpN,OAAAC,eAAWsM,EAAArM,UAAA,aAAU,KAGrB,WACI,OAAOhC,KAAKgQ,iBAJhB,SAAsBC,GAClBjQ,KAAKgQ,YAAcC,mCAuBf5B,EAAArM,UAAAqN,WAAR,WACQrP,KAAKkQ,WAAWC,cAAgBC,OAIhCrC,EAAAsC,OAAOC,WAAWtQ,KAAKkQ,WAAsBlQ,KAAKoB,SAAU8M,EAAAqC,IAAIC,WAAWpP,SAAUpB,KAAKgQ,YAAY7B,EAAAsC,QAAQC,OAI/GrC,EAAArM,UAAA2O,SAAP,SAAgBC,GACZ,OAAQA,EAAWC,eACf,IAAK,eACD7Q,KAAK8Q,IAAM,IAAI7C,EAAA8C,cAAc/Q,QASlCqO,EAAArM,UAAAsE,SAAP,SAAgBD,GACZ7G,EAAAwC,UAAMsE,SAAQvG,KAAAC,KAACqG,GAEVrG,KAAK4P,QAAW5P,KAAKwO,WACtBxO,KAAK8Q,IAAIxK,SAASD,IAG9BgI,EA9HA,CAAyBP,EAAAkD,gBAAZ1R,EAAA+O,oGCfb4C,EAAA7R,EAAA,IACA8R,EAAA9R,EAAA,IACA8O,EAAA9O,EAAA,IACA+R,EAAA/R,EAAA,GAKAiR,EAAA,SAAA7Q,GAkBI,SAAA6Q,EAAY7P,EAA8B4Q,EAAkBC,EAAoBC,GAAhF,IAAAxR,EACIN,EAAAO,KAAAC,KAAMQ,IAAQR,YADwBF,EAAAsR,WAAsCtR,EAAAwR,SAjBxExR,EAAAyR,UAAwB,IAAIpS,KAAKqS,MAMzB1R,EAAA2R,gBAA0B,IA+DnC3R,EAAAwG,SAAW,WAEd,IAAKxG,EAAK8P,OAAQ,CACd,IACI8B,EADMC,YAAYC,MAAQ,IACT9R,EAAK4E,UAC1B5E,EAAK+R,OAAS/R,EAAKuR,IAAMK,IAvD7B5R,EAAKuR,IAAMA,EACXvR,EAAK+R,QAAS,IAyHtB,OA9I4BjQ,EAAAC,UAAAwO,EAAA7Q,GAwBxBsC,OAAAC,eAAWsO,EAAArO,UAAA,YAAS,KAMpB,WACI,OAAOhC,KAAKuR,eAPhB,SAAqBA,GAEjB,IAAIO,EAAMP,EAAU7R,EAAI6R,EAAU7R,EAAI6R,EAAU5R,EAAI4R,EAAU5R,EAC9DmS,EAAM,EAAI3H,KAAK4H,KAAKD,GACpB9R,KAAKuR,UAAUlQ,IAAIkQ,EAAU7R,EAAIoS,EAAKP,EAAU5R,EAAImS,oCAMxDhQ,OAAAC,eAAWsO,EAAArO,UAAA,SAAM,KAAjB,WACI,OAAOhC,KAAK4P,YAEhB,SAAkBrN,GACVA,GAASvC,KAAK4P,SACd5P,KAAK4P,OAASrN,EAIVvC,KAAK4P,OACD5P,KAAK6L,OACL7L,KAAK6L,KAAKuF,SAAW,CAAC,EAAG,KAG7BpR,KAAK0E,UAAYiN,YAAYC,MAAQ,IACjC5R,KAAK6L,OACL7L,KAAK6L,KAAKzK,SAAW,CAACpB,KAAKoB,SAAS1B,EAAGM,KAAKoB,SAASzB,KAKzDK,KAAK4P,QAAU5P,KAAKgS,SACpBhS,KAAKgS,UAGThS,KAAKiS,SAAWjS,KAAK4P,yCAI7B9N,OAAAC,eAAWsO,EAAArO,UAAA,UAAO,KAGlB,WACI,OAAOhC,KAAKgS,aAJhB,SAAmBtC,GACf1P,KAAKgS,QAAUtC,mCAiELW,EAAA6B,MAAd,WACI7B,EAAO8B,QAAU,IAnDN9B,EAAA8B,QAAoB,GACrB9B,EAAAC,WAAa,SAAChC,EAAqBlN,EAAsBgR,EAAYd,GAC/E,IAAIe,EAAShC,EAAOiC,iBACpB,IAAKD,EAAQ,EAGTA,EAAS,IAAIhC,EAAOlR,KAAKmE,OAAOC,UAAU+K,GAAa9N,QAAS,IAAK,EAAG8Q,IACjE3O,OAAOtB,IAAI,IAClBgR,EAAOzP,MAAMvB,IAAI,IACjBgP,EAAO8B,QAAQvK,KAAKyK,GACpBlB,EAAAoB,OAAOC,eAAe3P,SAASwP,GAK/B,IAAII,EAAQ,IAAIxB,EAAGyB,OAAO,CAAEC,OAAQN,EAAOzS,MAAQ,IACnD6S,EAAMG,eAAiB1B,EAAA2B,eACvBJ,EAAMK,cAAgB5B,EAAA6B,eAAiB7B,EAAA8B,cAAgB9B,EAAA+B,eACvDR,EAAMS,QAAS,EACf,IAAI5O,EAA0B,CAC1B6O,KAAM,EACN/R,SAAU,CAACA,EAAS1B,EAAG0B,EAASzB,GAChCyT,MAAO,EACPC,eAAe,EACfC,eAAgB,EAChBC,QAAS,GAET1H,EAAO,IAAIoF,EAAGuC,KAAKlP,GACvBuH,EAAK4H,SAAShB,GACd5G,EAAK6H,WAAW,GAChB7H,EAAK8H,aAAe,EACpB9H,EAAK+H,gBAAkB,EACvB/H,EAAKgI,mBAAoB,EACzBhI,EAAK0B,KAAO0D,EAAGuC,KAAKM,QACnBjI,EAAakI,cAAgB1B,EAC9BA,EAAOxG,KAAOA,EACdqC,EAAAqC,IAAIyD,QAAQnI,GAGhBwG,EAAOjR,SAAWA,EAClB,IAAI6S,EAAM7B,aAAkB8B,aAAgB,IAAI/U,KAAKqS,MAAMY,EAAO,GAAKhR,EAAS1B,EAAG0S,EAAO,GAAKhR,EAASzB,GAAK,IAAIR,KAAKqS,MAAMY,EAAO1S,EAAI0B,EAAS1B,EAAG0S,EAAOzS,EAAIyB,EAASzB,GAOvK,OANA0S,EAAO8B,UAAYF,EACnB5B,EAAOf,OAASA,EAChBe,EAAOR,QAAS,EAChBQ,EAAOxG,KAAKuF,SAAS,GAAKiB,EAAO8B,UAAUzU,EAAI2S,EAAOjB,SACtDiB,EAAOxG,KAAKuF,SAAS,GAAKiB,EAAO8B,UAAUxU,EAAI0S,EAAOjB,SAE/CiB,GAOIhC,EAAAiC,eAAiB,WAC5B,IAAK,IAAI7F,EAAI,EAAGqF,EAAMzB,EAAO8B,QAAQ3J,OAAQiE,EAAIqF,EAAKrF,IAAK,CACvD,IAAI2H,EAAM/D,EAAO8B,QAAQ1F,GACzB,GAAI2H,EAAIvC,OACJ,OAAOuC,EAGf,OAAO,MAEf/D,EA9IA,CAA4BlR,KAAK+E,QAApB5E,EAAA+Q,4FCRb,IAAAgE,EAAAjV,EAAA,GACAkV,EAAAlV,EAAA,KAQMmV,EAAgB,CACE,mBACA,WACA,UAMxBxR,QAAQ8F,IAAI,yCAA0C0L,GACtD,IACI,IAAIC,EAAM,CACNC,OAAQ,CAAEC,SAAUH,GACpBI,OAAQ,WACJ5R,QAAQ8F,IAAI,2BACZ,IAAM2B,EAAM6J,EAAA9B,OAAOqC,SACbC,EAAO,IAAIP,EAAAQ,UAAUtK,GAC3BA,EAAI7C,SAASkN,GACbrK,EAAI7B,cAAckM,KAGzBrN,OAAeuN,cAAgBP,EAEpC,MAAOQ,GACHjS,QAAQ8F,IAAImM,GAQZ,IAAIC,GAAO,WAAaC,SAASC,SAASC,SAAW,QAAU,QACpD,wDACPC,EAAKH,SAASI,cAAc,UAChCD,EAAGJ,IAAMA,EACTI,EAAG9H,KAAO,kBACV8H,EAAGE,OAAQ,EACX,IAAIC,EAAIN,SAASO,qBAAqB,UAAU,GAC7CD,EAAEE,YAAWF,EAAEE,WAAWC,aAAaN,EAAIG,qFChDlD,SAAYI,GACRA,IAAA,iBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,yBAJJ,CAAYtW,EAAAsW,eAAAtW,EAAAsW,aAAY,KAOxB,SAAYC,GACRA,IAAA,iBACAA,IAAA,WAEAA,IAAA,qBACAA,IAAA,eAEAA,IAAA,qBACAA,IAAA,yBAEAA,IAAA,iBACAA,IAAA,eAEAA,IAAA,uBACAA,IAAA,6BACAA,IAAA,wBAEAA,IAAA,sCAEAA,IAAA,oCAnBJ,CAAYvW,EAAAuW,WAAAvW,EAAAuW,SAAQ,KAsBpB,SAAYC,GACRA,IAAA,6BACAA,IAAA,kBACAA,IAAA,sBAHJ,CAAYxW,EAAAwW,aAAAxW,EAAAwW,WAAU,KAOtB,SAAYrF,GACRA,IAAA,WACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,aAJJ,CAAYnR,EAAAmR,UAAAnR,EAAAmR,QAAO,KAOnB,SAAYzB,GACRA,IAAA,eACAA,IAAA,iBAFJ,CAAY1P,EAAA0P,aAAA1P,EAAA0P,WAAU,2FCXlBnH,SAhCJ1I,EAAAC,EAAA,GACA2W,EAAA3W,EAAA,KACA4W,EAAA5W,EAAA,IAEA6W,EAAA7W,EAAA,IAOAE,EAAAsV,OAAA,WACI,IAAK/M,EAAc,CACf,IACMqO,EAAsC,CACxCC,KAF8BjB,SAASkB,eAAe,SAGtDpP,gBAAiB,EACjBF,WAAW,EACXG,aAAa,EACbF,aAAa,EACbsP,WAAY7O,OAAO6B,kBAEvBxB,EAAe,IAAImO,EAAA3R,aAAa4R,EAAAK,YAAaL,EAAAM,aAAcL,GAE/D,OAAOrO,GAEXvI,EAAAkX,UAAA,WACQ3O,GACAA,EAAa4O,SAAStR,UAEzB0C,OAAuBrB,GAOjBlH,EAAA8B,SAAW,IAAIjC,EAAKqS,MAI/BlS,EAAAoX,sBAAA,SAAsCC,EAA2BvJ,EAA0BwJ,GAEvF,IAAIpC,EAAW,CACXqC,MAAO,CACHC,MAAO,GACPC,IAAK,KAETnM,MAAO,CACHkM,MAAO,UACPC,IAAK,WAETnU,MAAO,CACHkU,MAAO,GACPC,IAAK,GACLC,uBAAwB,GAE5BC,MAAO,CACHH,MAAO,GACPC,IAAK,EACLG,uBAAwB,GAE5BC,aAAc,IAAIhY,EAAKqS,MACvB4F,cAAe,CACX/M,IAAK,EACLgN,IAAK,KAETC,cAAe,CACXjN,IAAK,EACLgN,IAAK,IAETE,SAAU,CACNlN,IAAK,GACLgN,IAAK,GAETG,UAAW,MACXC,UAAW,IACXC,iBAAkB,EAClBC,aAAc,IACdC,IAAK,IAAIzY,EAAKqS,MAAM,GAAI,IACxBqG,WAAW,EACXC,UAAW,SACXC,YAAa,CACTrY,EAAG,EACHC,EAAG,EACH6M,EAAG,KAGPoK,IACApC,EAAG5S,EAAAqK,SAAA,GAAQuI,EAAQoC,IAGvB,IAAIoB,EAAU,IAAIjC,EAAUkC,QAIxBtB,EACAvJ,EACAoH,GAGJ,OADAwD,EAAQE,MAAO,EACRF,GAGA1Y,EAAA6Y,iBAAgC,CACnC7M,eAAW9E,EACXuG,YAAQvG,EACR4R,YAAQ5R,qFC3GHlH,EAAAgX,YAAsB,KACtBhX,EAAAiX,aAAuB,KACvBjX,EAAA+Y,iBAAmB/Y,EAAAgX,YAAc,EACjChX,EAAAgZ,kBAAoBhZ,EAAAiX,aAAe,EACnCjX,EAAAiZ,UAAoB,IACpBjZ,EAAAkZ,WAAqB,GACrBlZ,EAAAmZ,iBAAmB,GACnBnZ,EAAAoZ,SAAW,WAEXpZ,EAAAqZ,gBAAkB,QAGlBrZ,EAAAsZ,qBAAuB,GACvBtZ,EAAAuZ,mBAAqB,EAErBvZ,EAAAwZ,UAAY,CACrBC,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY5Z,EAAAoZ,SACZS,KAAM,QACNC,gBAAiB,EACjBC,OAAQ,GAGC/Z,EAAAga,WAAoC,CAC7CP,MAAO,OACPC,QAAS,EACTC,SAAU,GACVC,WAAY5Z,EAAAoZ,SACZS,KAAM,SACNC,gBAAiB,EACjBC,OAAQ,QAGC/Z,EAAAia,eACb,CACIR,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY5Z,EAAAoZ,SACZS,KAAM,SACNC,gBAAiB,EACjBC,OAAQ,SAGC/Z,EAAAka,aACb,CACIT,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY5Z,EAAAoZ,SACZS,KAAM,QACNC,gBAAiB,EACjBC,OAAQ,SAGC/Z,EAAAma,cACT,CACIV,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY5Z,EAAAoZ,SACZS,KAAM,QACNC,gBAAiB,EACjBC,OAAQ,SAGH/Z,EAAAoa,eACb,CACIX,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY5Z,EAAAoZ,SACZS,KAAM,SACNC,gBAAiB,EACjBC,OAAQ,SAGC/Z,EAAAqa,cACb,CACIZ,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY5Z,EAAAoZ,SACZS,KAAM,QACNC,gBAAiB,EACjBC,OAAQ,UAGC/Z,EAAAsa,iBACT,CACIb,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY,SACZC,KAAM,QACNC,gBAAiB,EACjBC,OAAQ,SAGC/Z,EAAAua,YACb,CACId,MAAO,SACPC,QAAS,EACTC,SAAU,GACVC,WAAY,SACZC,KAAM,SACNC,gBAAiB,EACjBC,OAAQ,QACRS,YAAY,EACZC,mBAAoB,EACpBC,eAAe,qFChHvB,IAAAC,EAAA7a,EAAA,IACA8a,EAAA9a,EAAA,IACA+a,EAAA/a,EAAA,IAEA+O,EAAA/O,EAAA,IAIAgb,EAAA,WAsCI,SAAAA,IAAA,IAAAta,EAAAE,KAlCQA,KAAAqa,UAA2B,GAK3Bra,KAAAsa,eAAgC,GAEhCta,KAAAua,MAAuB,GAEvBva,KAAAwa,YAAsB,EACtBxa,KAAAya,kBAA4B,EAI5Bza,KAAA0a,eAAyB,EACzB1a,KAAA2a,gBAA0B,EAG3B3a,KAAA4a,eAAyB,EACzB5a,KAAA6a,iBAA2B,EAC1B7a,KAAA8a,gBAA0B,EAK1B9a,KAAA+a,eAAyB,EAK1B/a,KAAAgb,MAAuB,GA2CvBhb,KAAAsG,SAAW,SAACD,GAQf,IANA,IAGIuL,EAAMD,YAAYC,MAAQ,IAGrBnF,EAAI,IAAMqF,EAAMhS,EAAKkb,MAAMxS,OAAQiE,EAAIqF,EAAKrF,IACjD,GAAI3M,EAAKkb,MAAMvO,IAAM3M,EAAKkb,MAAMvO,GAAKmF,EAAK,CACtC,IAAIqJ,EAAM,EACV,OAAQxO,GACJ,KAAK0B,EAAA2H,WAAWoF,WACZD,EAAM,EACN,MACJ,KAAK9M,EAAA2H,WAAWqF,KACZF,EAAM,GACN,MACJ,KAAK9M,EAAA2H,WAAWsF,OACZH,EAAM,GAGd,IAAII,EAAW,KAALhV,EAAa4U,EACvBnb,EAAK2a,mBAAqBY,EAMlC,GADAvb,EAAK0a,aAAenU,EAChBvG,EAAK0a,YA3BM,IA2BkB,CAI7B,GAHA1a,EAAK0a,aA5BM,IA+BP1a,EAAKya,MAAMpM,EAAA0H,SAASyF,MAAQxb,EAAKya,MAAMpM,EAAA0H,SAAS0F,SAAU,CAC1D,IAAIC,EA/BYC,GA+BR3b,EAAKya,MAAMpM,EAAA0H,SAAS6F,WAC5B5b,EAAK6b,aAAaxN,EAAA0H,SAASyF,KAAME,GAIrC,GAAI1b,EAAKya,MAAMpM,EAAA0H,SAAS+F,IAAM9b,EAAKya,MAAMpM,EAAA0H,SAASgG,OAAQ,CAClDL,EArCYC,GAqCR3b,EAAKya,MAAMpM,EAAA0H,SAASiG,SAC5Bhc,EAAK6b,aAAaxN,EAAA0H,SAAS+F,GAAIJ,GAInC,GAAI1b,EAAK2a,mBAAqB,EAAG,CAC7B,IAAIsB,EAAS5R,KAAKC,MAAMtK,EAAK2a,mBACzBuB,EAAyB,CACzBC,SAAUnc,EAAKya,MAAMpM,EAAA0H,SAAS+F,IAC9BM,QAASH,GAEb7B,EAAAiC,aAAajE,KAAKgC,EAAAkC,aAAcJ,GAChClc,EAAK6b,aAAaxN,EAAA0H,SAAS+F,IAAKG,GAChCjc,EAAK2a,mBAAqBsB,GAOlC,IAAIM,EAAavc,EAAKib,cACtBjb,EAAKib,cAAgBjb,EAAKkb,MAAM7M,EAAA2H,WAAWoF,YAActJ,GAAO9R,EAAKkb,MAAM7M,EAAA2H,WAAWqF,MAAQvJ,EAC1FyK,IAAevc,EAAKwc,WACpBpC,EAAAiC,aAAajE,KAAKgC,EAAAqC,WAAY,CAAEF,WAAYA,EAAYC,UAAWxc,EAAKib,iBA0LxE/a,KAAAwc,QAA4B,CAChCC,KAAMtO,EAAA0H,SAAS6G,MACfT,SAAU,EACVU,SAAU,EACVC,MAAO,IAnSP5c,KAAKgN,GAAK,EAGVhN,KAAKsa,eAAenM,EAAAyH,aAAakG,SAAW,EAC5C9b,KAAKsa,eAAenM,EAAAyH,aAAa8F,WAAa,EAC9C1b,KAAKsa,eAAenM,EAAAyH,aAAaiG,OAAS,EAC1C7b,KAAKsa,eAAenM,EAAAyH,aAAa2F,SAAW,EAG5Cvb,KAAKua,MAAMpM,EAAA0H,SAAS6G,OAAS,EAC7B1c,KAAKua,MAAMpM,EAAA0H,SAASyF,MAAQ,IAC5Btb,KAAKua,MAAMpM,EAAA0H,SAASgH,UAAY,EAChC7c,KAAKua,MAAMpM,EAAA0H,SAASiH,iBAAmB,EACvC9c,KAAKua,MAAMpM,EAAA0H,SAAS+F,IAAM,IAG1BxB,EAAY2C,YAAY,GAAK,EAC7B,IAAK,IAAItQ,EAAI,EAAGA,EAAI,IAAOA,IACvB2N,EAAY2C,YAAYtQ,GAAK2N,EAAY2C,YAAYtQ,EAAI,GAHlD,IAGwDA,EAGnEzM,KAAKgd,eAuRb,OAjRIlb,OAAAC,eAAWqY,EAAApY,UAAA,cAAW,KAAtB,WAII,OAHIhC,KAAKid,cACLjd,KAAKid,YAAc,IAAI9C,EAAA+C,YAAYjD,EAAA9B,mBAEhCnY,KAAKid,6CA6EhBnb,OAAAC,eAAWqY,EAAApY,UAAA,YAAS,KAApB,WACI,OAAOhC,KAAK+a,+CAQTX,EAAApY,UAAAmb,UAAP,WACInd,KAAKod,gBACLpd,KAAKqd,aAAgBrd,KAAKkd,YAAYI,WAAWtd,KAAK6a,mBAMnDT,EAAApY,UAAAub,cAAP,SAAqBC,GACbA,IACAxd,KAAK6a,kBAAoB,GAGb7a,KAAKgN,GACVhN,KAAKua,MAAMpM,EAAA0H,SAAS6G,OACrB1c,KAAKua,MAAMpM,EAAA0H,SAAS4H,MACpBtT,KAAKC,MAAMpK,KAAKua,MAAMpM,EAAA0H,SAASyF,OAChCtb,KAAKua,MAAMpM,EAAA0H,SAASgH,UACjB7c,KAAKua,MAAMpM,EAAA0H,SAASiH,iBACxB9c,KAAKua,MAAMpM,EAAA0H,SAAS+F,IACb5b,KAAK6a,kBAYjBT,EAAApY,UAAAob,cAAP,WACsBpd,KAAKgN,GAAvB,IACI0Q,EAAO,CACP9B,GAAI5b,KAAK2d,QAAQxP,EAAA0H,SAASgG,OAC1B+B,IAAM5d,KAAK2d,QAAQxP,EAAA0H,SAASgH,UAC5BH,MAAO1c,KAAK2d,QAAQxP,EAAA0H,SAAS6G,OAC7BpB,KAAMtb,KAAK2d,QAAQxP,EAAA0H,SAAS0F,SAC5BkC,KAAM,EACNI,OAAQ,EACRC,UAAW9d,KAAK6a,kBAGpB9X,QAAQ8F,IAAI,2BAA4B6U,GAEpCpe,EAAAib,MAAMM,iBAAmB6C,EAAKI,UAG1BJ,EAAK9B,IAAM,IACX8B,EAAK9B,GAAK5b,KAAKua,MAAMpM,EAAA0H,SAASgG,QAElC7b,KAAK+d,QAAQ5P,EAAA0H,SAAS+F,GAAI8B,EAAK9B,IAC/B5b,KAAK+d,QAAQ5P,EAAA0H,SAAS6G,MAAOgB,EAAKhB,OAClC1c,KAAK+d,QAAQ5P,EAAA0H,SAAS4H,KAAMC,EAAKD,MACjCzd,KAAK+d,QAAQ5P,EAAA0H,SAASyF,KAAMoC,EAAKpC,MACjCtb,KAAK+d,QAAQ5P,EAAA0H,SAASiH,gBAAiBY,EAAKG,QAC5C7d,KAAK+d,QAAQ5P,EAAA0H,SAASgH,SAAUa,EAAKE,KAErC5d,KAAKgd,gBAGblb,OAAAC,eAAWqY,EAAApY,UAAA,eAAY,KAAvB,WACI,OAAOhC,KAAK0a,mBAEhB,SAAwBnY,GACpBvC,KAAK0a,cAAgBnY,mCAGlB6X,EAAApY,UAAA+b,QAAP,SAAexQ,EAAgBhL,GAC3BvC,KAAKua,MAAMhN,GAAQhL,EACfgL,IAASY,EAAA0H,SAASgH,WAClB7c,KAAK4a,eAAiBR,EAAY4D,aAAazb,GAC/CvC,KAAKua,MAAMpM,EAAA0H,SAASoI,aAAe7D,EAAY2C,YAAY/c,KAAK4a,eAAiB,GAAKR,EAAY2C,YAAY/c,KAAK4a,gBACnH5a,KAAKua,MAAMpM,EAAA0H,SAASqI,UAAYle,KAAKua,MAAMpM,EAAA0H,SAASgH,UAAYzC,EAAY2C,YAAY/c,KAAK4a,gBAC7F5a,KAAK8a,gBAAkBV,EAAY2C,YAAY/c,KAAK4a,eAAiB,IAEzE5a,KAAKme,YAAY5Q,EAAMhL,GACvB2X,EAAAiC,aAAajE,KAAKgC,EAAAkE,iBAAkBpe,KAAKwc,UAGtCpC,EAAApY,UAAA2b,QAAP,SAAepQ,GACX,OAAOvN,KAAKua,MAAMhN,IAGf6M,EAAApY,UAAA2Z,aAAP,SAAoBpO,EAAgBhL,EAAe8b,GAE/C,IAAIC,EAAWte,KAAKua,MAAMhN,GAAQhL,EAC9B8b,GAAYC,EAAWD,IACvBC,EAAWD,GAEXC,EAAW,IACXA,EAAW,GAGfte,KAAKme,YAAY5Q,EAAM+Q,GACvBte,KAAKua,MAAMhN,GAAQ+Q,EAGf/Q,IAASY,EAAA0H,SAASgH,WAClB7c,KAAKua,MAAMpM,EAAA0H,SAASqI,UAAYI,EAAWlE,EAAY2C,YAAY/c,KAAK4a,gBAGpE0D,GAAYte,KAAK8a,kBACjB9a,KAAK4a,eAAiBR,EAAY4D,aAAaM,GAC/Cte,KAAK8a,gBAAkBV,EAAY2C,YAAY/c,KAAK4a,eAAiB,GAErE5a,KAAKua,MAAMpM,EAAA0H,SAASoI,aAAeje,KAAK8a,gBAAkBV,EAAY2C,YAAY/c,KAAK4a,gBACvF5a,KAAKua,MAAMpM,EAAA0H,SAASqI,UAAYI,EAAWlE,EAAY2C,YAAY/c,KAAK4a,gBAGxE5a,KAAKwc,QAAQC,KAAOtO,EAAA0H,SAAS0I,eAC7Bve,KAAKwc,QAAQP,SAAWjc,KAAK4a,eAAiB,EAC9C5a,KAAKwc,QAAQG,SAAW3c,KAAK4a,eAC7B5a,KAAKwc,QAAQI,MAAQ5c,KAAKua,MAC1BL,EAAAiC,aAAajE,KAAKgC,EAAAkE,iBAAkBpe,KAAKwc,SAGzC8B,EAAWte,KAAKua,MAAMpM,EAAA0H,SAASiH,iBAAmB,EAClD9c,KAAKwc,QAAQC,KAAOtO,EAAA0H,SAASiH,gBAC7B9c,KAAKwc,QAAQP,SAAWjc,KAAK2d,QAAQxP,EAAA0H,SAASiH,iBAC9C9c,KAAKwc,QAAQG,SAAW2B,EACxBte,KAAK+d,QAAQ5P,EAAA0H,SAASiH,gBAAiBwB,GACvCte,KAAKwc,QAAQI,MAAQ5c,KAAKua,MAC1BL,EAAAiC,aAAajE,KAAKgC,EAAAkE,iBAAkBpe,KAAKwc,SAGzCxc,KAAK+d,QAAQ5P,EAAA0H,SAASyF,KAAMtb,KAAKua,MAAMpM,EAAA0H,SAAS0F,UAChDvb,KAAK+d,QAAQ5P,EAAA0H,SAAS+F,GAAI5b,KAAKua,MAAMpM,EAAA0H,SAASgG,QAG9C7b,KAAKwc,QAAQC,KAAOlP,EACpBvN,KAAKwc,QAAQP,SAAW,EACxBjc,KAAKwc,QAAQG,SAAW3c,KAAKua,MAAMpM,EAAA0H,SAASqI,UAC5Cle,KAAKwc,QAAQI,MAAQ5c,KAAKua,QAKlCL,EAAAiC,aAAajE,KAAKgC,EAAAkE,iBAAkBpe,KAAKwc,UAO/BpC,EAAA4D,aAAd,SAA2BQ,GACvB,IAAK,IAAI/R,EAAI,EAAGqF,EAAMsI,EAAY2C,YAAYvU,OAAQiE,EAAIqF,EAAKrF,IAC3D,GAAI+R,EAAMpE,EAAY2C,YAAYtQ,GAC9B,OAAOA,EAAI,GAKf2N,EAAApY,UAAAgb,aAAR,WAEIhd,KAAKqa,UAAUlM,EAAAyH,aAAaiG,OAAS,IAA6B,GAAtB7b,KAAK4a,eACjD5a,KAAKqa,UAAUlM,EAAAyH,aAAa2F,SAAW,IAA6B,GAAtBvb,KAAK4a,eACnD5a,KAAKqa,UAAUlM,EAAAyH,aAAa8F,WAAa,EAAK1b,KAAK4a,eAAiB,EACpE5a,KAAKqa,UAAUlM,EAAAyH,aAAakG,SAAW,EAAK9b,KAAK4a,eAAiB,EAGlE5a,KAAKua,MAAMpM,EAAA0H,SAASgG,OAAS7b,KAAKqa,UAAUlM,EAAAyH,aAAaiG,QAAU,EAAI7b,KAAKsa,eAAenM,EAAAyH,aAAaiG,OAAO,IAC/G7b,KAAKua,MAAMpM,EAAA0H,SAAS0F,SAAWvb,KAAKqa,UAAUlM,EAAAyH,aAAa2F,UAAY,EAAIvb,KAAKsa,eAAenM,EAAAyH,aAAa2F,SAAW,IAGvHvb,KAAKua,MAAMpM,EAAA0H,SAASiG,SAAW9b,KAAKqa,UAAUlM,EAAAyH,aAAakG,UAAY,EAAI9b,KAAKsa,eAAenM,EAAAyH,aAAakG,SAAW,IACvH9b,KAAKua,MAAMpM,EAAA0H,SAAS6F,WAAa1b,KAAKqa,UAAUlM,EAAAyH,aAAa8F,YAAc,EAAI1b,KAAKsa,eAAenM,EAAAyH,aAAa8F,WAAa,KAUzHtB,EAAApY,UAAAmc,YAAR,SAAoB5Q,EAAgB+Q,GAChCte,KAAKwc,QAAQC,KAAOlP,EACpBvN,KAAKwc,QAAQP,SAAWjc,KAAKua,MAAMhN,GACnCvN,KAAKwc,QAAQG,SAAW2B,EACxBte,KAAKwc,QAAQI,MAAQ5c,KAAKua,OAlUfH,EAAA2C,YAA6B,GAoUhD3C,EAnVA,GAqVW9a,EAAAib,MAAQ,IAAIH,oFC7VvB,IAAAnJ,EAAA7R,EAAA,IACA+R,EAAA/R,EAAA,GACAqf,EAAArf,EAAA,IACA8R,EAAA9R,EAAA,IAKAsf,EAAA,WAEA,OADI,SAAmBC,EAAuBC,GAAvB5e,KAAA2e,QAAuB3e,KAAA4e,SAD9C,GAAatf,EAAAof,cAQb,IAAAG,EAAA,WAiBI,SAAAA,IAAA,IAAA/e,EAAAE,KAXQA,KAAA8e,aAAmC,GACnC9e,KAAA+e,aAA8B,GAK9B/e,KAAAgf,mBAAqC,GAE5Bhf,KAAAif,cAAgB,EAAI,GA4K7Bjf,KAAAkf,aAAe,SAACC,GAEpB,IAAI9M,EAAkB,KAClB+M,EAAiB,KAQrB,GAPID,EAAIE,MAAMC,OAAO,GAAG1M,iBAAmB1B,EAAA2B,gBACvCR,EAAS8M,EAAIE,MACbD,EAAQD,EAAII,OACLJ,EAAII,MAAMD,OAAO,GAAG1M,iBAAmB1B,EAAA2B,iBAC9CR,EAAS8M,EAAII,MACbH,EAAQD,EAAIE,OAEZhN,EAEAvS,EAAK0f,MAAMtH,KAAK,CAAE3K,KAAM,gBAAiBkS,UAAWL,IAAUtf,EAAK0Q,WAAYkP,WAAYrN,EAAQsN,UAAWP,QAFlH,CAOA,GAAItf,EAAK0Q,aAAe2O,EAAIE,MAGxB,OAFAvf,EAAKkf,mBAAmBpX,KAAKuX,EAAII,YACjCzf,EAAK0f,MAAMtH,KAAK,CAAE3K,KAAM,gBAAiB6D,SAAUtR,EAAK0Q,WAAWY,SAAUvF,KAAMsT,EAAII,QAEpF,GAAIzf,EAAK0Q,aAAe2O,EAAII,MAG/B,OAFAzf,EAAKkf,mBAAmBpX,KAAKuX,EAAIE,YACjCvf,EAAK0f,MAAMtH,KAAK,CAAE3K,KAAM,gBAAiB6D,SAAUtR,EAAK0Q,WAAWY,SAAUvF,KAAMsT,EAAIE,QAK3F,IAAIO,EAAmB9f,EAAKif,aAAa/W,OAAO,SAAC6X,GAC7C,OAAQA,IAAWV,EAAIE,MAAMrS,IAAM6S,IAAWV,EAAII,MAAMvS,KAE5D,GAAI4S,GAAoBA,EAAiBpX,OAAS,EAAG,CACjD,IAAIsX,EAAkB,IAAIpB,EAAYS,EAAIE,MAAOF,EAAII,OACrDzf,EAAKgf,aAAalX,KAAKkY,MAKvB9f,KAAA+f,WAAa,SAACZ,GAGlB,KADuBA,EAAIE,MAAMC,OAAO,GAAG1M,iBAAmB1B,EAAA2B,gBAAkBsM,EAAII,MAAMD,OAAO,GAAG1M,iBAAmB1B,EAAA2B,gBACvH,CAGA,GAAI/S,EAAK0Q,aAAe2O,EAAIE,MAAQ,CAChC,IAAIW,EAAUlgB,EAAKkf,mBAAmBiB,QAAQd,EAAII,OAIlD,OAHAzf,EAAKkf,mBAAmBkB,OAAOF,EAAS,QACxClgB,EAAK0f,MAAMtH,KAAK,CAAE3K,KAAM,mBAAoB6D,SAAUtR,EAAK0Q,WAAWY,SAAUvF,KAAMsT,EAAII,QAGvF,GAAIzf,EAAK0Q,aAAe2O,EAAII,MAAO,CAClCS,EAAUlgB,EAAKkf,mBAAmBiB,QAAQd,EAAII,OAIlD,OAHAzf,EAAKkf,mBAAmBkB,OAAOF,EAAS,QACxClgB,EAAK0f,MAAMtH,KAAK,CAAE3K,KAAM,mBAAoB6D,SAAUtR,EAAK0Q,WAAWY,SAAUvF,KAAMsT,EAAIE,QAQ9F,IADA,IAAIc,GAAoB,EACf1T,EAAI,EAAGA,EAAI3M,EAAKgf,aAAatW,OAAQiE,IAAK,CAC/C,IAAIqT,EAAkBhgB,EAAKgf,aAAarS,GACxC,GACKqT,EAAGnB,QAAUQ,EAAIE,OAASS,EAAGlB,QAAUO,EAAII,OAC3CO,EAAGnB,QAAUQ,EAAII,OAASO,EAAGlB,QAAUO,EAAIE,MAAQ,CACpDc,EAAW1T,EACX,OAIJ0T,GAAY,GACZrgB,EAAKgf,aAAaoB,OAAOC,EAAU,KAjPvCngB,KAAKwf,MAAQ,IAAIvO,EAAGmP,MAAM,CACtBC,QAAS,CAAC,GAAI,QAGlBrgB,KAAKsgB,iBAKLtgB,KAAKugB,OAAS,IAAItP,EAAGuC,KAAK,CACtBL,KAAM,IAEV,IAAIV,EAAQ,IAAIxB,EAAGuP,MACnB/N,EAAMgO,SAAWzgB,KAAK0gB,UAAUC,IAAI,kBACpClO,EAAMG,eAAiB1B,EAAA+B,eACvBR,EAAMK,cAAgB5B,EAAA8B,cAAgB9B,EAAA0P,YAAc1P,EAAA6B,eAAiB7B,EAAA2B,eACrE7S,KAAKugB,OAAO9M,SAAShB,GACrBzS,KAAKwf,MAAMxL,QAAQhU,KAAKugB,QAKxBvgB,KAAKwQ,WAAa,IAAIS,EAAGuC,KAAK,CAC1BL,KAAM,GACNE,eAAe,IAEnBrT,KAAKwQ,WAAW+C,QAAU,MAC1Bd,EAAQ,IAAIxB,EAAGyB,OAAO,CAClBC,OAAQ,MAENC,eAAiB1B,EAAA6B,eACvBN,EAAMK,cAAgB5B,EAAA+B,eAAiB/B,EAAA8B,cAAgB9B,EAAA0P,YAAc1P,EAAA2B,eACrEJ,EAAMgO,SAAWzgB,KAAK0gB,UAAUC,IAAI,UACpC3gB,KAAKwQ,WAAWiD,SAAShB,GACzBzS,KAAKwf,MAAMxL,QAAQhU,KAAKwQ,YAKxBxQ,KAAKwf,MAAMqB,UAAY5P,EAAGmP,MAAMU,cAChC9gB,KAAKwf,MAAM9d,GAAG,eAAgB1B,KAAKkf,aAAclf,MACjDA,KAAKwf,MAAM9d,GAAG,aAAc1B,KAAK+f,WAAY/f,MA2SrD,OArSW6e,EAAA7c,UAAA+e,WAAP,WAEI,IADA,IAAIC,EAAShhB,KAAKwf,MAAMwB,OACfvU,EAAIuU,EAAOxY,OAAO,EAAGiE,GAAI,EAAGA,IAAK,CACtC,IAAIwU,EAAID,EAAOvU,GACXwU,IAAMjhB,KAAKwQ,YAAcyQ,IAAMjhB,KAAKugB,QACpCvgB,KAAKwf,MAAM0B,WAAWD,KAQlCnf,OAAAC,eAAW8c,EAAA7c,UAAA,SAAM,KAAjB,WACI,OAAOhC,KAAKwf,MAAMwB,wCAQfnC,EAAA7c,UAAAN,GAAP,SAAUyf,EAAmBC,EAAcC,GACvCA,EAAUA,GAAWrhB,KACrBA,KAAKwf,MAAM9d,GAAGyf,EAAWC,EAASC,IAO/BxC,EAAA7c,UAAAmE,OAAP,SAAcE,GACVrG,KAAKwf,MAAM8B,KAAKthB,KAAKif,cAAe5Y,EAAG,KACvC8K,EAAAoB,OAAOnR,SAAS1B,EAAIM,KAAKwQ,WAAW+Q,qBAAqB,GACzDpQ,EAAAoB,OAAOnR,SAASzB,EAAIK,KAAKwQ,WAAW+Q,qBAAqB,IAOtD1C,EAAA7c,UAAAkf,WAAP,SAAkBrV,GACd7L,KAAKwf,MAAM0B,WAAWrV,IAOnBgT,EAAA7c,UAAAgS,QAAP,SAAenI,GAEX,GAAIA,EAAKyT,QAAUzT,EAAKyT,OAAO9W,OAAS,EACpC,IAAK,IAAIiE,EAAI,EAAGqF,EAAMjG,EAAKyT,OAAO9W,OAAQiE,EAAIqF,EAAKrF,IAAK,CACpD,IAAIgG,EAAa5G,EAAKyT,OAAO7S,GACzBgG,EAAM+O,eAAiB/O,EAAMgO,WAC7BhO,EAAMgO,SAAWzgB,KAAK0gB,UAAUC,IAAIlO,EAAM+O,eAItDxhB,KAAKwf,MAAMxL,QAAQnI,IAOhBgT,EAAA7c,UAAAyf,qBAAP,SAA4B5V,GACxB,GAAIA,IAAS7L,KAAKwQ,WAMlB,IADA,IAAI2P,EAAmB,EAChBA,GAAY,GAAG,CAClBA,GAAY,EACZ,IAAK,IAAI1T,EAAI,EAAGA,EAAIzM,KAAK8e,aAAatW,OAAQiE,IAAK,CAC/C,IAAIqT,EAAiB9f,KAAK8e,aAAarS,GACvC,GAAIqT,EAAGnB,QAAU9S,GAAQiU,EAAGlB,QAAU/S,EAAO,CACzCsU,EAAW1T,EACX,OAIJ0T,GAAY,GACZngB,KAAK8e,aAAaoB,OAAOC,EAAU,QAhBvCngB,KAAKgf,mBAAqB,IA0B3BH,EAAA7c,UAAA0f,mBAAP,SAA0B7V,GAEtB,IADA,IAAI8V,EAAiC,GAC5BlV,EAAI,EAAGqF,EAAM9R,KAAK8e,aAAatW,OAAQiE,EAAIqF,EAAKrF,IAAK,CAC1D,IAAIqT,EAAkB9f,KAAK8e,aAAarS,GACpCqT,EAAGnB,QAAU9S,GAAQiU,EAAGlB,QAAU/S,GAClC8V,EAAW/Z,KAAKkY,GAGxB,OAAO6B,GAQJ9C,EAAA7c,UAAA4f,gBAAP,SAAuB/V,GACnB7L,KAAK+e,aAAanX,KAAKiE,EAAKmB,KAMhClL,OAAAC,eAAW8c,EAAA7c,UAAA,iBAAc,KAAzB,WACI,OAAOhC,KAAKgf,oDAgFRH,EAAA7c,UAAAse,eAAR,WACItgB,KAAK0gB,UAAY,IAAIjC,EAAAoD,WACrB7hB,KAAK0gB,UAAUrf,IAAI,SAAU,IAAI4P,EAAG6Q,SAAS7Q,EAAG6Q,SAASC,cACzD/hB,KAAK0gB,UAAUrf,IAAI,iBAAkB,IAAI4P,EAAG6Q,SAAS7Q,EAAG6Q,SAASC,cACjE/hB,KAAK0gB,UAAUrf,IAAI,cAAe,IAAI4P,EAAG6Q,SAAS7Q,EAAG6Q,SAASC,cAC9D/hB,KAAK0gB,UAAUrf,IAAI,mBAAoB,IAAI4P,EAAG6Q,SAAS7Q,EAAG6Q,SAASC,cACnE/hB,KAAK0gB,UAAUrf,IAAI,cAAe,IAAI4P,EAAG6Q,SAAS7Q,EAAG6Q,SAASC,cAC9D/hB,KAAK0gB,UAAUrf,IAAI,SAAU,IAAI4P,EAAG6Q,SAAS7Q,EAAG6Q,SAASC,cAGzD,IAAIC,EAA8B,IAAI/Q,EAAGgR,gBACrCjiB,KAAK0gB,UAAUC,IAAI,UACnB3gB,KAAK0gB,UAAUC,IAAI,kBACnB,CACIuB,SAAU,IACVC,YAAa,GACbC,UAAWnR,EAAGoR,SAASC,kBACvBC,WAAYtR,EAAGoR,SAASG,mBACxBC,kBAAmBxR,EAAGoR,SAASC,kBAC/BI,mBAAoBzR,EAAGoR,SAASG,mBAChCG,gBAAgB,IAExB3iB,KAAKwf,MAAMoD,mBAAmBZ,GAE9B,IAAIa,EAA2B,IAAI5R,EAAGgR,gBAClCjiB,KAAK0gB,UAAUC,IAAI,UACnB3gB,KAAK0gB,UAAUC,IAAI,eACnB,CACIuB,SAAU,GACVC,YAAa,GACbC,UAAWnR,EAAGoR,SAASC,kBACvBC,WAAYtR,EAAGoR,SAASG,mBACxBC,kBAAmBxR,EAAGoR,SAASC,kBAC/BI,mBAAoBzR,EAAGoR,SAASG,mBAChCG,gBAAiB,IAEzB3iB,KAAKwf,MAAMoD,mBAAmBC,GAG9B,IAAIC,EAA2B,IAAI7R,EAAGgR,gBAClCjiB,KAAK0gB,UAAUC,IAAI,UACnB3gB,KAAK0gB,UAAUC,IAAI,eACnB,CACIuB,SAAU,GACVC,YAAa,IACbC,UAAWnR,EAAGoR,SAASC,kBACvBC,WAAYtR,EAAGoR,SAASG,mBACxBC,kBAAmBxR,EAAGoR,SAASC,kBAC/BI,mBAAoBzR,EAAGoR,SAASG,mBAChCG,gBAAiB,IAEzB3iB,KAAKwf,MAAMoD,mBAAmBE,GAE9B,IAAIC,EAAoC,IAAI9R,EAAGgR,gBAC3CjiB,KAAK0gB,UAAUC,IAAI,UACnB3gB,KAAK0gB,UAAUC,IAAI,oBACnB,CACIuB,SAAU,GACVC,YAAa,GACbC,UAAWnR,EAAGoR,SAASC,kBACvBC,WAAYtR,EAAGoR,SAASG,mBACxBC,kBAAmBxR,EAAGoR,SAASC,kBAC/BI,mBAAoBzR,EAAGoR,SAASG,mBAChCG,gBAAiB,IAEzB3iB,KAAKwf,MAAMoD,mBAAmBG,GAE9B,IAAIC,EAA8B,IAAI/R,EAAGgR,gBACrCjiB,KAAK0gB,UAAUC,IAAI,UACnB3gB,KAAK0gB,UAAUC,IAAI,UACnB,CACIuB,SAAU,IACVC,YAAa,IACbC,UAAWa,OAAOC,UAClBX,WAAYtR,EAAGoR,SAASG,mBACxBC,kBAAmBQ,OAAOC,UAC1BR,mBAAoBzR,EAAGoR,SAASG,mBAChCG,gBAAiB,IAEzB3iB,KAAKwf,MAAMoD,mBAAmBI,GAE9B,IAAIG,EAA2B,IAAIlS,EAAGgR,gBAClCjiB,KAAK0gB,UAAUC,IAAI,eACnB3gB,KAAK0gB,UAAUC,IAAI,kBACnB,CACIuB,SAAU,GACVC,YAAa,GACbC,UAAWnR,EAAGoR,SAASC,kBACvBC,WAAYtR,EAAGoR,SAASG,mBACxBC,kBAAmBxR,EAAGoR,SAASC,kBAC/BI,mBAAoBzR,EAAGoR,SAASG,mBAChCG,gBAAiB,IAEzB3iB,KAAKwf,MAAMoD,mBAAmBO,IAEtCtE,EAtWA,GAAavf,EAAAuf,UAwWFvf,EAAAiR,IAAM,IAAIsO,qFCxXrB,IAAAuE,EAAAhkB,EAAA,KAKAikB,EAAA,WAoBI,SAAAA,IAAA,IAAAvjB,EAAAE,KARQA,KAAAsjB,QAAkB,GAClBtjB,KAAAujB,UAAoB,GACpBvjB,KAAAwjB,SAAmB,GA0DpBxjB,KAAAyjB,yBAA2B,SAACC,EAAwBxhB,GAClDpC,EAAK6jB,aAAazhB,KAAQpC,EAAK6jB,aAAazhB,GAAS,IAC1DpC,EAAK6jB,aAAazhB,GAAO0F,KAAK8b,IArD9B1jB,KAAK2jB,aAAe,GACpB3jB,KAAK4jB,SAAW,GAChB,IAAK,IAAInX,EAAY,EAAGA,EAAI,IAAKA,IAAOzM,KAAK4jB,SAASnX,IAAK,EAE3DyI,SAASxN,iBAAiB,UAAW1H,KAAK6jB,QAAQC,KAAK9jB,OAAO,GAC9DkV,SAASxN,iBAAiB,QAAS1H,KAAK+jB,MAAMD,KAAK9jB,OAAO,GAsDlE,OAhDWqjB,EAAArhB,UAAAmE,OAAP,SAAc6d,GAGV,IAAIC,EAA4BjkB,KAAK2jB,aAAaK,GAClDhkB,KAAKkkB,qBAAqBD,GAI1BA,EAAUjkB,KAAK2jB,aAAaP,EAAAhf,MAAM+f,QAClCnkB,KAAKkkB,qBAAqBD,IAMtBZ,EAAArhB,UAAAkiB,qBAAR,SAA6BD,GACzB,GAAIA,EAEA,IADA,IAAInS,EAAMmS,EAAQzb,OACTiE,EAAY,EAAGA,EAAIqF,EAAKrF,IAAK,CAClC,IAAI2X,EAAKH,EAAQxX,GACb2X,GAAMA,EAAGC,cAAgBD,EAAGhD,SACzBphB,KAAK4jB,SAASQ,EAAGE,MACjBtkB,KAAK4jB,SAAS5jB,KAAKsjB,UAAYc,EAAGG,QAClCvkB,KAAK4jB,SAAS5jB,KAAKujB,YAAca,EAAGI,UACpCxkB,KAAK4jB,SAAS5jB,KAAKwjB,WAAaY,EAAGK,UACtCL,EAAGhD,UACCgD,EAAGM,wBAAuB1kB,KAAK4jB,SAASQ,EAAGE,MAAO,MAM9DjB,EAAArhB,UAAA6hB,QAAR,SAAgB7O,GACZhV,KAAK4jB,SAAS5O,EAAE2P,QAAS,GAGrBtB,EAAArhB,UAAA+hB,MAAR,SAAc/O,GACVhV,KAAK4jB,SAAS5O,EAAE2P,QAAS,GAQtBtB,EAAArhB,UAAA4iB,UAAP,SAAiBC,GACb,OAAO7kB,KAAK4jB,SAASiB,IAE7BxB,EAhFA,GAAa/jB,EAAA+jB,iBAmFb,IAAAyB,EAAA,WAYI,SAAAA,EACWR,EACAjc,EACA+Y,EACAsD,EACAF,EACAC,EACAF,QAJA,IAAAnD,WAAA5a,QACA,IAAAke,OAAA,QACA,IAAAF,OAAA,QACA,IAAAC,OAAA,QACA,IAAAF,OAAA,GANAvkB,KAAAskB,MACAtkB,KAAAqI,OACArI,KAAAohB,UACAphB,KAAA0kB,wBACA1kB,KAAAwkB,WACAxkB,KAAAykB,UACAzkB,KAAAukB,SAEf,OAhBWO,EAAA9iB,UAAAqiB,WAAP,WACI,YAAwB7d,IAAjBxG,KAAKohB,SAepB0D,EArBA,GAAaxlB,EAAAwlB,oGCxFb,IAAAC,EAAA,oBAAAA,IAAA,IAAAjlB,EAAAE,KAEYA,KAAAglB,MAAkC,KAClChlB,KAAAilB,KAAgC,KAChCjlB,KAAAwI,OAAiB,EAoBlBxI,KAAAklB,QAAU,SAACxH,GACd,IAAIyH,EAAc,IAAIC,EAatB,OAZAD,EAAYzH,KAAOA,EACnByH,EAAYE,SAAWF,EAAYG,KAAO,KAC1CH,EAAYI,KAAOzlB,EACdA,EAAKklB,OAING,EAAYE,SAAWvlB,EAAKmlB,KAC5BnlB,EAAKmlB,KAAMK,KAAOH,EAClBrlB,EAAKmlB,KAAOE,IALZrlB,EAAKklB,MAAQG,EACbrlB,EAAKmlB,KAAOE,GAMhBrlB,EAAK0I,SACE2c,GAGJnlB,KAAAwlB,WAAa,SAAC9H,GACjB,IAAI+H,EAAe,IAAIL,EAavB,OAZAK,EAAa/H,KAAOA,EACpB+H,EAAaJ,SAAWI,EAAaH,KAAO,KAC5CG,EAAaF,KAAOzlB,EACfA,EAAKklB,OAINS,EAAaH,KAAOxlB,EAAKklB,MACzBllB,EAAKklB,MAAMK,SAAWI,EACtB3lB,EAAKklB,MAAQS,IALb3lB,EAAKklB,MAAQS,EACb3lB,EAAKmlB,KAAOQ,GAMhB3lB,EAAK0I,SACEid,GA4Bf,OA7EI3jB,OAAAC,eAAWgjB,EAAA/iB,UAAA,QAAK,KAAhB,WACI,OAAOhC,KAAKglB,WAEhB,SAAiBU,GACb1lB,KAAKglB,MAAQU,mCAGjB5jB,OAAAC,eAAWgjB,EAAA/iB,UAAA,OAAI,KAAf,WACI,OAAOhC,KAAKilB,UAEhB,SAAgBS,GACZ1lB,KAAKilB,KAAOS,mCAGhB5jB,OAAAC,eAAWgjB,EAAA/iB,UAAA,SAAM,KAAjB,WACI,OAAOhC,KAAKwI,wCAqCTuc,EAAA/iB,UAAA2jB,WAAP,SAAkBD,GACVA,EAAKL,WAAUK,EAAKL,SAASC,KAAOI,EAAKJ,MACzCI,EAAKJ,OAAMI,EAAKJ,KAAKD,SAAWK,EAAKL,UACzCrlB,KAAKwI,UAGFuc,EAAA/iB,UAAA4jB,SAAP,WACI,IAAIX,EAAOjlB,KAAKglB,MACZa,EAAS7lB,KAAKglB,MAAOM,KACzBL,EAAMK,KAAO,KACbL,EAAMI,SAAWrlB,KAAKilB,KACtBjlB,KAAKilB,KAAMK,KAAOL,EAClBjlB,KAAKilB,KAAOA,EAEZjlB,KAAKglB,MAAQa,EACb7lB,KAAKglB,MAAOK,SAAW,MAGpBN,EAAA/iB,UAAA+C,QAAP,SAAe+gB,GAEX,IADA,IAAIJ,EAAO1lB,KAAKglB,MACTU,GACHI,EAASJ,GACTA,EAAOA,EAAKJ,MAGxBP,EAnFA,GAAazlB,EAAAylB,aAqFb,IAAAK,EAAA,oBAAAA,IACWplB,KAAAqlB,SAAoC,KACpCrlB,KAAAslB,KAAiC,KAyC5C,OArCWF,EAAApjB,UAAA+jB,aAAP,SAAoBrI,GAChB,IAAIgI,EAAO1lB,KAAKulB,KAAKL,QAAQxH,GACzB2H,EAAWrlB,KAAKqlB,SACpBK,EAAKJ,KAAOtlB,KACZ0lB,EAAKL,SAAWA,EAChBrlB,KAAKqlB,SAAWK,EACZL,IACAA,EAASC,KAAOI,GAEpBA,EAAKH,KAAOvlB,KAAKulB,KACjBvlB,KAAKulB,KAAKS,MAAQhmB,KAAKimB,aAGpBb,EAAApjB,UAAAkkB,YAAP,SAAmBxI,GACf,IAAIgI,EAAO1lB,KAAKulB,KAAKL,QAAQxH,GACzB4H,EAAOtlB,KAAKslB,KAChBI,EAAKL,SAAWrlB,KAChB0lB,EAAKJ,KAAOA,EACZtlB,KAAKslB,KAAOI,EACRJ,IACAA,EAAKD,SAAWK,GAEpBA,EAAKH,KAAOvlB,KAAKulB,KACjBvlB,KAAKulB,KAAKY,KAAOnmB,KAAKomB,YAGnBhB,EAAApjB,UAAAikB,UAAP,WAEI,IADA,IAAIP,EAA0B1lB,KACvB0lB,EAAKL,UAAYK,EAAOA,EAAKL,SACpC,OAAOK,GAGJN,EAAApjB,UAAAokB,SAAP,WAEI,IADA,IAAIV,EAA0B1lB,KACvB0lB,EAAKJ,MAAQI,EAAOA,EAAKJ,KAChC,OAAOI,GAEfN,EA3CA,GAAa9lB,EAAA8lB,+GCrFbjmB,EAAAC,EAAA,GAKAinB,EAAA,SAAA7mB,GAiBI,SAAA6mB,EAAY3gB,EAAkB4gB,EAAwBlZ,EAAgDmZ,GAAtG,IAAAzmB,EACIN,EAAAO,KAAAC,OAAOA,YAD2FF,EAAAymB,eAd9FzmB,EAAA0mB,cAAwB,EAGxB1mB,EAAA2mB,aAAmC,GACnC3mB,EAAA4mB,gBAAiC,GAKjC5mB,EAAA6mB,WAAqB,EAsFrB7mB,EAAA8mB,oBAAsB,SAACC,GAC3B,IAAMC,EAAWhnB,EAAK4mB,gBAAgB,GAChCK,EAAwBjnB,EAAK2mB,aAAaK,GAC1CE,EAAUlnB,EAAK4mB,gBAAgB5mB,EAAK4mB,gBAAgBle,OAAO,GAC3Dye,EAAuBnnB,EAAK2mB,aAAaO,GAG3CE,GAAUpnB,EAAK0mB,cAAgBK,GAAgB/mB,EAAKwmB,eACxDxmB,EAAKqnB,gBAAgBD,GAEjBL,EAAe/mB,EAAK0mB,cAEhBO,EAASrnB,EAAIqnB,EAASnnB,MAAQ,IAC9BE,EAAK4mB,gBAAgB9e,KAAK9H,EAAK4mB,gBAAgBU,SAC/CL,EAASrnB,EAAIunB,EAAQvnB,EAAIunB,EAAQrnB,OAIjCqnB,EAAQvnB,EAAII,EAAKunB,aAAa3nB,IAC9BI,EAAK4mB,gBAAgBY,QAAQxnB,EAAK4mB,gBAAgBa,OAClDN,EAAQvnB,EAAIqnB,EAASrnB,EAAIunB,EAAQrnB,OAGzCE,EAAK0mB,cAAgBK,GAtGrB/mB,EAAK0nB,aAAe9hB,GAAQ,IAAIvG,EAAKqS,MAAM,IAAK,KAChD1R,EAAKwmB,eAAiBA,GAAkB,EACxCxmB,EAAKymB,aAAezmB,EAAKymB,cAAgB,EACzCzmB,EAAK2nB,YAAYra,GACjBtN,EAAK0mB,cAAgB,EACrB1mB,EAAK4nB,aAAa,KAyG1B,OAjI8B9lB,EAAAC,UAAAwkB,EAAA7mB,GA2B1BsC,OAAAC,eAAWskB,EAAArkB,UAAA,gBAAa,KAAxB,WACI,OAAOhC,KAAKwmB,+CAGTH,EAAArkB,UAAA0lB,aAAP,SAAoBb,GACZ7mB,KAAKwmB,gBAAkBK,GACvB7mB,KAAK4mB,oBAAoBC,IAIjC/kB,OAAAC,eAAWskB,EAAArkB,UAAA,eAAY,KAAvB,WACI,OAAOhC,KAAKqnB,kBAEhB,SAAwBM,GACpB3nB,KAAKqnB,aAAeM,mCAExB7lB,OAAAC,eAAWskB,EAAArkB,UAAA,iBAAc,KAAzB,WACI,OAAOhC,KAAKsmB,oBAEhB,SAA0BsB,GACtB5nB,KAAKsmB,eAAiBsB,mCAGnBvB,EAAArkB,UAAAylB,YAAP,SAAmBra,GAQf,IAPA,IACIya,EADA3f,EAAQ,EAIR4f,EAAkB9nB,KAAK+nB,WAAW3a,EAAU,GAC5CxN,EAAQkoB,EAAEloB,MAAQI,KAAKumB,aAEpBvmB,KAAKymB,aAAaje,OAAS,GAC3BxI,KAAKymB,aAAaje,OAAS4E,EAAS5E,QACpCxI,KAAK2mB,YAAc3mB,KAAKqnB,aAAa3nB,EAAIE,GAC1C,CAGFioB,EAAe3f,EAAQkF,EAAS5E,QAChCsf,EAAI9nB,KAAK+nB,WAAW3a,EAAUya,IAC5BG,OAAS,EAGX,IAAIC,EAAM,IAAI9oB,EAAK+E,OAAO4jB,GAC1BG,EAAIvoB,EAAIM,KAAK2mB,WACbsB,EAAIrlB,MAAMvB,IAAIrB,KAAKumB,aAAcvmB,KAAKumB,cACtC0B,EAAItlB,OAAOtB,IAAI,EAAG,GAClBrB,KAAKymB,aAAa7e,KAAKqgB,GACvBjoB,KAAK0mB,gBAAgB9e,KAAK5H,KAAKymB,aAAaje,OAAO,GACnDxI,KAAK6C,SAASolB,GAGdjoB,KAAK2mB,YAAcsB,EAAIroB,MACvBmD,QAAQ8F,IAAOif,EAAEtkB,YAAY0kB,SAAQ,cAAcJ,EAAEloB,MAAK,eAAeqoB,EAAIroB,MAAK,kBAAkBI,KAAK2mB,YACzGze,MAIAme,EAAArkB,UAAA+lB,WAAR,SAAmB3a,EAAwCya,GACvD,IAAIC,EACJ,GAAsC,iBAA3B1a,EAASya,GAA4B,CAC5C,IAAIM,EAAMhpB,EAAKmE,OAAOC,UAAU6J,EAASya,IACrCM,GAAQA,EAAI3nB,SACZuC,QAAQqlB,MAAM,uBAAyBhb,EAASya,IAEpDC,EAAIK,EAAI3nB,aAERsnB,EAAI1a,EAASya,GAEjB,OAAOC,GA6BHzB,EAAArkB,UAAAmlB,gBAAR,SAAwBD,GACpB,IAAI,IAAIza,EAAI,EAAGA,EAAGzM,KAAKymB,aAAaje,OAAQiE,IACxCzM,KAAKymB,aAAaha,GAAGrL,SAAS1B,GAAKwnB,GAG/Cb,EAjIA,CAA8BlnB,EAAK0H,WAAtBvH,EAAA+mB,yGCLblnB,EAAAC,EAAA,GACAC,EAAAD,EAAA,IAIAipB,EAAA,SAAA7oB,GAoCI,SAAA6oB,EAAYC,EAAsBC,EAA0B7oB,EAAeC,EAAgBC,EAAeC,QAA9C,IAAAH,MAAA,QAAe,IAAAC,MAAA,GAA3E,IAAAG,EACIN,EAAAO,KAAAC,OAAOA,YA1BHF,EAAA6B,WAAqB,EASrB7B,EAAAyC,MAAgB,EA2GjBzC,EAAAgD,QAAU,SAACkS,GAGd,OAFAlV,EAAK0oB,oBAAoBxT,GACzBlV,EAAK2oB,MAAQ3oB,EAAK4oB,sBACX,GAGH5oB,EAAA6oB,YAAsB,EACtB7oB,EAAA8oB,YAAsB,EAQtB9oB,EAAA+oB,YAAc,SAAC7T,GACnBlV,EAAK8oB,YAAa,EAClB,IAAIhR,EAAM5C,EAAE0I,KAAKoL,iBAAiBhpB,EAAKipB,QACvCjpB,EAAK6oB,YAAc/Q,EAAIlY,GAEnBI,EAAAkpB,UAAY,SAAChU,GACjBlV,EAAK8oB,YAAa,EAClB9oB,EAAK2oB,MAAQ3oB,EAAK4oB,qBAClB1T,EAAEiU,SAAU,GAGRnpB,EAAAopB,WAAa,SAAClU,GAClB,GAAIlV,EAAK8oB,WAEL,OADA9oB,EAAK0oB,oBAAoBxT,IAClB,GAkBPlV,EAAAS,aAAe,WACnBT,EAAKqpB,eAAeC,MAAQtpB,EAAKupB,iBACjCvpB,EAAKwpB,cAAcF,MAAQtpB,EAAKypB,iBAG5BzpB,EAAAY,WAAa,SAACsU,GAClBlV,EAAK0pB,sBAGD1pB,EAAAgB,kBAAoB,WACxBhB,EAAK0pB,sBAGD1pB,EAAAiB,aAAe,WACnBjB,EAAK2pB,QAAQjpB,QAAQ4oB,MAAQtpB,EAAK4pB,sBAClC5pB,EAAKwpB,cAAcF,MAAQtpB,EAAK6pB,sBAG5B7pB,EAAAoB,YAAc,WAClBpB,EAAK0pB,sBA3JL1pB,EAAKsB,SAASC,IAAI3B,GAAK,EAAGC,GAAK,GAC/BG,EAAKQ,gBAAkBT,EACvBC,EAAKO,eAAiBT,EAEtBE,EAAK2pB,QAAU,IAAItqB,EAAK+E,OACxBpE,EAAK2pB,QAAQ9mB,OAAOtB,IAAI,GACxBvB,EAAK2pB,QAAQjoB,aAAc,EAC3B1B,EAAK2pB,QAAQloB,YAAa,EAC1BzB,EAAK2pB,QAAQhoB,OAAS,QACtB3B,EAAK+C,SAAS/C,EAAK2pB,SACnB3pB,EAAK2pB,QACA/nB,GAAG,cAAe5B,EAAKS,cACvBmB,GAAG,YAAa5B,EAAKY,YACrBgB,GAAG,aAAc5B,EAAKgD,SACtBpB,GAAG,mBAAoB5B,EAAKgB,mBAC5BY,GAAG,YAAa5B,EAAKiB,cACrBW,GAAG,WAAY5B,EAAKoB,aAGzBpB,EAAK8pB,YAAcrB,EACnBzoB,EAAKipB,OAAS,IAAI5pB,EAAK+E,OACvBpE,EAAKipB,OAAO3nB,SAASC,IAAI,EAAGvB,EAAKQ,gBAAgB,GACjDR,EAAKipB,OAAOpmB,OAAOtB,IAAI,EAAG,IAC1BvB,EAAK+C,SAAS/C,EAAKipB,QACnBjpB,EAAKipB,OAAOvnB,aAAc,EAC1B1B,EAAKipB,OAAOxnB,YAAa,EACzBzB,EAAKipB,OAAOtnB,OAAS,QACrB3B,EAAKipB,OACArnB,GAAG,cAAe5B,EAAK+oB,aACvBnnB,GAAG,YAAa5B,EAAKkpB,WACrBtnB,GAAG,mBAAoB5B,EAAKkpB,WAC5BtnB,GAAG,cAAe5B,EAAKopB,YAI5BppB,EAAK+pB,WAAWvB,EAAcC,GAC9BzoB,EAAKgqB,WAAY,EACjBhqB,EAAK0pB,qBAEL1pB,EAAK2oB,MAAQ,KA8JrB,OA3O4B7mB,EAAAC,UAAAwmB,EAAA7oB,GAiFxBsC,OAAAC,eAAWsmB,EAAArmB,UAAA,QAAK,KAAhB,WACI,OAAOhC,KAAKuC,WAEhB,SAAiBA,GACTvC,KAAKuC,QAAUA,IACfvC,KAAKuC,MAAQA,EACbvC,KAAK+oB,OAAO3nB,SAAS1B,EAAIM,KAAK+pB,KAAOxnB,EACrCvC,KAAKkY,KAAK,cAAe3V,GACzBvC,KAAKkY,KAAK,eAAgB3V,qCAIlCT,OAAAC,eAAWsmB,EAAArmB,UAAA,eAAY,KAAvB,WACI,OAAOhC,KAAKsC,mBAEhB,SAAwBC,GACpBvC,KAAKsC,cAAgBC,EACrBvC,KAAKypB,QAAQtnB,QAAU,CAAC,IAAI9C,EAAAgD,cAAc,EAAGrC,KAAKsC,cAAe,sCAGrER,OAAAC,eAAWsmB,EAAArmB,UAAA,YAAS,KAApB,WACI,OAAOhC,KAAK2B,eAEhB,SAAqBO,GACjBlC,KAAK2B,UAAYO,EACjBlC,KAAKwpB,sDAGT1nB,OAAAC,eAAWsmB,EAAArmB,UAAA,OAAI,KAAf,WACI,OAAOhC,KAAKyC,UAEhB,SAAgBA,GAKZ,GAJIzC,KAAKyC,MACLzC,KAAK0C,YAAY1C,KAAKyC,MAE1BzC,KAAKyC,KAAOA,EACRzC,KAAKyC,KAAM,CACXzC,KAAKyC,KAAKE,OAAOtB,IAAI,GAAK,IAC1B,IAAI3B,EAAKM,KAAKJ,MAAQI,KAAK4C,MAAMlD,EAAK,EAClCC,EAAKK,KAAKH,OAASG,KAAK4C,MAAMjD,EAAK,EACvCK,KAAKyC,KAAKrB,SAASC,IAAI3B,EAAGC,GAC1BK,KAAK6C,SAAS7C,KAAKyC,wCAcnB4lB,EAAArmB,UAAA0mB,mBAAR,WACI,IACIsB,GADWhqB,KAAK+oB,OAAOrpB,EAAIM,KAAKiqB,MACfjqB,KAAK+pB,KAC1B,OAAO/pB,KAAKkqB,cAAcF,EAAK,IAqB3B3B,EAAArmB,UAAAwmB,oBAAR,SAA4BxT,GACxB,IAAImV,EAAcnV,EAAE0I,KAAKoL,iBAAiB9oB,KAAK+oB,OAAOqB,QAClDpqB,KAAK4oB,YAAc5oB,KAAK2oB,cACxBwB,EAAYzqB,GAAKM,KAAK2oB,aAE1B3oB,KAAK+oB,OAAOrpB,EAAIyK,KAAKE,IAAIrK,KAAK+pB,KAAM5f,KAAKkN,IAAIrX,KAAKiqB,KAAME,EAAYzqB,IACpEM,KAAKkY,KAAK,cAAelY,KAAK0oB,uBAE1BL,EAAArmB,UAAAkoB,cAAR,SAAsBG,EAAKC,GACvB,IAAIxC,EAAI3d,KAAKogB,IAAI,GAAID,GACjBE,GAAUrgB,KAAKsgB,MAAOJ,EAAMvC,GAAMwC,EAAW,EAAI,EAAI,IAAOngB,KAAaugB,KAAKL,IAAQ,GAAKlgB,KAAKogB,IAAI,IAAKD,MAAexC,GAAG6C,QAAQL,GACvI,OAAOM,WAAWJ,IA0BdnC,EAAArmB,UAAAwnB,mBAAR,WACIxpB,KAAKmpB,eAAeC,MAAQppB,KAAK2B,UAAY3B,KAAKqpB,iBAAmBrpB,KAAK6qB,eAC1E7qB,KAAKspB,cAAcF,MAAQppB,KAAK2B,UAAY3B,KAAKupB,gBAAkBvpB,KAAK8qB,eAGrEzC,EAAArmB,UAAA6nB,WAAP,SAAkBvb,EAAqBsb,GAEnC5pB,KAAKmpB,eAAiB,IAAIhqB,EAAK2E,QAAQ3E,EAAKmE,OAAOC,UAAU+K,GAAa9N,QAAQgD,aAClFxD,KAAKmpB,eAAe3lB,YAAYC,UAAYtE,EAAKuE,YAAYC,QAC7D3D,KAAKspB,cAAgB,IAAInqB,EAAK2E,QAAQ3E,EAAKmE,OAAOC,UAAU+K,GAAa9N,QAAQgD,aAGjF,IAAIunB,EAAc/qB,KAAKmpB,eAAetpB,OAAS,EAC3CmrB,EAAahrB,KAAKmpB,eAAevpB,MAAQgqB,EApNhC,EAqNb5pB,KAAK6qB,eAAiB,IAAI1rB,EAAK4E,UAAU,EAAG,EAAIgnB,EAAaC,EAAYD,GACzE/qB,KAAK0pB,sBAAwB,IAAIvqB,EAAK4E,UAAU,EAAG,EAAIgnB,EAAaC,EAAYD,GAChF/qB,KAAKqpB,iBAAmB,IAAIlqB,EAAK4E,UAAU,EAAG,EAAIgnB,EAAaC,EAAYD,GAE3E,IAAIrrB,EAAIsrB,EAzNK,EA0NbhrB,KAAK8qB,cAAgB,IAAI3rB,EAAK4E,UAAUrE,EAAG,EAAIqrB,EAAanB,EAAamB,GACzE/qB,KAAK2pB,qBAAuB,IAAIxqB,EAAK4E,UAAUrE,EAAG,EAAIqrB,EAAanB,EAAamB,GAChF/qB,KAAKupB,gBAAkB,IAAIpqB,EAAK4E,UAAUrE,EAAG,EAAIqrB,EAAanB,EAAamB,GAG3E/qB,KAAKwpB,qBAELxpB,KAAKypB,QAAQjpB,QAAUR,KAAKmpB,eAC5BnpB,KAAKypB,QAAQ7pB,MAAQI,KAAKK,eAC1BL,KAAKypB,QAAQ5pB,OAASG,KAAKM,gBAG3BN,KAAK+oB,OAAOvoB,QAAUR,KAAKspB,cAC3BtpB,KAAK+oB,OAAOlpB,OAASG,KAAKM,gBAG1BN,KAAK+pB,KAAO/pB,KAAKK,eAAiBL,KAAK4pB,YACvC5pB,KAAKiqB,KAAO,GAEpB5B,EA3OA,CAA4BlpB,EAAK0H,WAApBvH,EAAA+oB,uGCLblX,EAAA/R,EAAA,GAEA6rB,EAAA7rB,EAAA,KACA8rB,EAAA9rB,EAAA,GAGM+rB,EAAsB,CAExB,6BACA,2BACA,4BACA,qBACA,sBAMJrW,EAAA,SAAAtV,GAKI,SAAAsV,EAAYtK,GAAZ,IAAA1K,EACIN,EAAAO,KAAAC,KAAMwK,EAAK,SAAOxK,YAIfF,EAAAwG,SAAW,SAACD,GACXvG,EAAKsrB,UACLtrB,EAAKsrB,QAAQC,UAAY,MAI1BvrB,EAAAmJ,WAAa,WAChBnJ,EAAKwrB,eAAiB,IAAIna,EAAAhS,KAAKosB,KAAK,cAAe,CAC9CtS,SAAU,OACVC,WAAY,mBACZC,KAAM,MACNW,YAAY,EACZT,OAAQ,QACRD,gBAAiB,IAEtBtZ,EAAKwrB,eAAe3oB,OAAOtB,IAAI,GAAK,IACpCvB,EAAKwrB,eAAelqB,SAASC,IAAI6pB,EAAA7S,iBAAkB6S,EAAA5S,kBAAoB,IACvExY,EAAK+C,SAAS/C,EAAKwrB,gBAKnBna,EAAAhS,KAAKmE,OAAO4O,QACXsZ,IAAI,sBACJC,KAAK3rB,EAAK4rB,kBAMP5rB,EAAA4rB,gBAAkB,kBAAA9pB,EAAA+pB,UAAA7rB,OAAA,uEAGlB8rB,EAAiBza,EAAAhS,KAAK2E,QAAQ+nB,UAAU,sBAC5C7rB,KAAKorB,QAAU,IAAIja,EAAAhS,KAAK+E,OAAO0nB,GAC/B5rB,KAAKorB,QAAQhqB,SAASC,IAAI6pB,EAAA7S,iBAAkB6S,EAAA5S,mBAC5CtY,KAAKorB,QAAQzoB,OAAOtB,IAAI,GAAK,IAC7BrB,KAAKorB,QAAQxoB,MAAMvB,IAAI,IACvBrB,KAAK6C,SAAS7C,KAAKorB,SAEnBroB,QAAQ8F,IAAI,4CAA6CsiB,GACzDha,EAAAhS,KAAKmE,OACAkoB,IAAIL,GACJM,KAAKzrB,KAAK8rB,4BAGXhsB,EAAAgsB,kBAAoB,kBAAAlqB,EAAA+pB,UAAA7rB,OAAA,2EAIpBisB,EAAc,yCACF,uCACC,+CACjB/rB,KAAK6H,aAAa4O,SAASuV,QAAQC,YAAYC,aAAaC,QAAUJ,EACtE/rB,KAAK6H,aAAa4O,SAASuV,QAAQC,YAAYC,aAAaE,MAH5C,uCAIhBpsB,KAAK6H,aAAa4O,SAASuV,QAAQC,YAAYC,aAAa9Z,OAH3C,+CAIjB8C,SAASrJ,KAAKwgB,MAAM5qB,OAASsqB,EAG7B5a,EAAAoB,OAAO4F,iBAAmBhH,EAAAhS,KAAKmE,OAAOC,UAAU,sBAAsBma,KAClE4O,EAAYnb,EAAAhS,KAAKmE,OAAOC,UAAU,sBAAsBma,KAC5DvM,EAAAoB,OAAO4F,iBAAiBC,OAASkU,EAAUlU,OAC3CjH,EAAAoB,OAAO4F,iBAAiBC,OAAOrT,QAAQ,SAACwnB,GACpCA,EAAEC,OAASD,EAAEC,QAAU,EACvBD,EAAEE,YAAcF,EAAEE,aAAe,EACjCF,EAAEG,eAAiB,EACnBH,EAAEI,YAAcJ,EAAEI,aAAe,EACjCJ,EAAEK,UAAYL,EAAEK,WAAa,IAG3BC,EAAK,IAAI5B,EAAA6B,YAAY9sB,KAAK6H,cAChC7H,KAAK6H,aAAaF,SAASklB,GAC3B7sB,KAAK6H,aAAac,cAAckkB,YA3EhC/sB,EAAKkJ,gBAAkB,IA6E/B,OApF+BpH,EAAAC,UAAAiT,EAAAtV,GAoF/BsV,EApFA,CAA+B3D,EAAA5G,OAAlBjL,EAAAwV,0GClBb3D,EAAA/R,EAAA,GACA2tB,EAAA3tB,EAAA,KACA4tB,EAAA5tB,EAAA,IACA6W,EAAA7W,EAAA,IACA6tB,EAAA7tB,EAAA,KACA8tB,EAAA9tB,EAAA,KACA+tB,EAAA/tB,EAAA,KACAguB,EAAAhuB,EAAA,KAGA0tB,EAAA,SAAAttB,GAgCI,SAAAstB,EAAYtiB,GAAZ,IAAA1K,EACIN,EAAAO,KAAAC,KAAMwK,EAAK,WAASxK,KA7BPF,EAAAutB,cAA2B,CAExC,8BACA,6BACA,6BACA,0BACA,6BACA,6BACA,2BAEA,uBACA,sBACA,sBACA,4BACA,2BACA,6BACA,0BACA,uBAGA,kBACA,uBACA,kBACA,+BACA,oCACA,+BA2BGvtB,EAAAwG,SAAW,SAACD,GACXvG,EAAKsrB,UACLtrB,EAAKsrB,QAAQC,UAAY,MAI1BvrB,EAAAmJ,WAAa,WAChBlG,QAAQ8F,IAAI,qBAAqBmkB,EAAAzS,MAAMM,iBAAgB,OACvD,IAAIhO,EAAmBkgB,EAAArgB,eAAeyE,EAAAoB,OAAO4F,iBAAkB6U,EAAAzS,MAAMM,kBACrEhO,EAASA,EAAOM,OAAOrN,EAAKutB,eAE5Blc,EAAAhS,KAAKmE,OACA4O,QACAsZ,IAAI3e,GACJ4e,KAAK3rB,EAAKwtB,oBACV5rB,GAAG,WAAY5B,EAAKytB,aAGrBztB,EAAAwtB,mBAAqB,WACrBxtB,EAAK+H,aAAaO,SAAS,UAC3BrF,QAAQ8F,IAAI,oBAEZ/I,EAAK+H,aAAaF,SAAS,IAAIulB,EAAAM,UAAU1tB,EAAK+H,eAC9C/H,EAAK+H,aAAaF,SAAS,IAAIwlB,EAAAM,aAAa3tB,EAAK+H,eACjD/H,EAAK+H,aAAaF,SAAS,IAAIylB,EAAAM,SAAS5tB,EAAK+H,eAC7C/H,EAAK+H,aAAa8lB,iBAAmB,IAAIV,EAAAW,UAAU9tB,EAAK+H,eAG5D,IACoB/H,EAAK+H,aAAaY,SAAS,QACjColB,aACZ,MAAO7Y,GACLjS,QAAQ8F,IAAI,cAAemM,KAK3BlV,EAAAytB,WAAa,SAACjqB,EAA6BwqB,GAC/C,IAAIC,EAAWzqB,EAAOyqB,SACtBhrB,QAAQ8F,IAAI,aAAeklB,EAASpD,QAAQ,GAAK,aAAemD,EAASzlB,MACzEvI,EAAKwrB,eAAe7oB,KAAO,WAAasrB,EAASpD,QAAQ,GAAK,MA9D9D7qB,EAAKkJ,gBAAkB,EACvBlJ,EAAKwrB,eAAiB,IAAIna,EAAAhS,KAAKosB,KAAK,cAAe,CAC/CtS,SAAU,GACVC,WAAY,mBACZC,KAAM,MACNW,YAAY,EACZf,MAAO,SACPM,OAAQ,QACRD,gBAAiB,IAErBtZ,EAAKwrB,eAAe3oB,OAAOtB,IAAI,GAAK,IACpCvB,EAAKwrB,eAAelqB,SAASC,IAAI4U,EAAAoC,iBAAkBpC,EAAAqC,kBAAoB,IACvExY,EAAK+C,SAAS/C,EAAKwrB,gBAEnB,IAAIM,EAAiBza,EAAAhS,KAAK2E,QAAQ+nB,UAAU,6BAC5C/rB,EAAKsrB,QAAU,IAAIja,EAAAhS,KAAK+E,OAAO0nB,GAC/B9rB,EAAKsrB,QAAQhqB,SAASC,IAAI4U,EAAAoC,iBAAkBpC,EAAAqC,mBAC5CxY,EAAKsrB,QAAQzoB,OAAOtB,IAAI,GAAK,IAC7BvB,EAAKsrB,QAAQxoB,MAAMvB,IAAI,IACvBvB,EAAK+C,SAAS/C,EAAKsrB,WA6C3B,OAlGiCxpB,EAAAC,UAAAirB,EAAAttB,GAkGjCstB,EAlGA,CAAiC3b,EAAA5G,OAApBjL,EAAAwtB,iGCVb,IAAA3S,EAAA/a,EAAA,IACA8O,EAAA9O,EAAA,IAEA0O,EAAA1O,EAAA,IACA4tB,EAAA5tB,EAAA,IACA+R,EAAA/R,EAAA,GAEA4uB,EAAA,WAKI,SAAAA,EAAmB3lB,EACP3I,EACAC,EACAsuB,EACAC,EACAC,EACA5iB,EACAoJ,QAAA,IAAAA,OAAA,GAPO3U,KAAAqI,OACPrI,KAAAN,IACAM,KAAAL,IACAK,KAAAiuB,OACAjuB,KAAAkuB,cACAluB,KAAAmuB,iBACAnuB,KAAAuL,SACAvL,KAAA2U,SAXJ3U,KAAAouB,SAAmB,EACnBpuB,KAAAquB,UAAoB,EAWxBruB,KAAKquB,UAAY1c,YAAYC,MAAQ,IAsD7C,OAnDI9P,OAAAC,eAAWisB,EAAAhsB,UAAA,WAAQ,KAAnB,WAAwB,OAAOhC,KAAK2U,YACpC,SAAoBpS,GAAkBvC,KAAK2U,OAASpS,mCAE7CyrB,EAAAhsB,UAAAsE,SAAP,SAAgBD,GAAhB,IAAAvG,EAAAE,KACI,GAAIA,KAAK2U,QAAU3U,KAAKouB,SAAWpuB,KAAKkuB,YAAa,CAGjD,IAAItc,EAAMD,YAAYC,MAAQ,IAC9B,GAAI5R,KAAKquB,WAAazc,EAAK,CAElB5R,KAAKwS,iBACNxS,KAAKwS,eAAkBrB,EAAAoB,OAAOqC,SAASnM,SAAS,QAAgB+J,gBAEpE,IAAI8b,EAAUnU,EAAA+C,YAAYqR,UAAUvB,EAAAzS,MAAM8C,aAAa/R,UAAWtL,KAAKuL,QACnEijB,EAAWF,EAAgBva,cAE3BrU,EAAIM,KAAKN,EAAKyK,KAAKskB,SAAWzuB,KAAKiuB,KAASjuB,KAAKiuB,KAAO,EACxDtuB,EAAIK,KAAKL,EAEb2uB,EAAQltB,SAAW,CAAC1B,EAAGC,GACvBuO,EAAAqC,IAAIyD,QAAQsa,GAEZE,EAAQptB,SAASC,IAAI3B,EAAGC,GACxB6uB,EAAQvc,SAAU,EAClBuc,EAAQhgB,WAAY,EACpBxO,KAAKwS,eAAe3P,SAAS2rB,GAE7B,IAAIE,EAAU,IAAI5gB,EAAAkD,eAClB0d,EAAQnf,cAAc,IAAIzB,EAAA0B,kBAAkB,OAAQ,8BAA+B,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,KACrGkf,EAAQ/rB,OAAOtB,IAAI,IACnBqtB,EAAQttB,SAASC,IAAI3B,EAAGC,EAAI,IAC5B+uB,EAAQxf,KAAK,OAAQ,GAAG,GAExBlP,KAAKwS,eAAe3P,SAAS6rB,GAE7BC,WAAW,WACP7uB,EAAK0S,eAAe9P,YAAYgsB,GAChCF,EAAQhgB,WAAY,EACpBggB,EAAQvc,SAAU,GACnB,KAEFuc,EAAgBxc,QAAU,WACvBjP,QAAQ8F,IAAI,YACZ/I,EAAKsuB,YAGTpuB,KAAKouB,WACLpuB,KAAKquB,UAAa1c,YAAYC,MAAQ,IAAQ5R,KAAKmuB,kBAInEH,EAnEA,GAAa1uB,EAAA0uB,2GCDbjd,EAAA,SAAAvR,GAEI,SAAAuR,EAAY6d,UACRpvB,EAAAO,KAAAC,KAAM4uB,IAAU5uB,KAcxB,OAjBmC4B,EAAAC,UAAAkP,EAAAvR,GAMxBuR,EAAA/O,UAAA6sB,QAAP,WACI,IAAIC,EAAkBnd,YAAYC,MAC9Bmd,EAAsB,IAAhB5kB,KAAKskB,SACXO,EAAOhvB,KAAKivB,SAAWjvB,KAAKkvB,SAAYH,GAAOD,EACnD,GAAIE,EAAK,CACL,IAAIG,EAAMhlB,KAAKskB,SACfO,EAAMA,GAAOG,EAAM,GACnBnvB,KAAKivB,SAAWtd,YAAYC,MAEhC,OAAOod,GAEfje,EAjBA,CANA3R,EAAA,KAMmCgwB,IAAtB9vB,EAAAyR,mGCNb,IAAAwB,EAAAnT,EAAA,IAEA+O,EAAA/O,EAAA,IAKIiwB,EAAgB,IAKhBC,EAAiB,KAKrBF,EAAA,WAgBI,SAAAA,EAAsBR,GAAtB,IAAA9uB,EAAAE,KAAsBA,KAAA4uB,YAJZ5uB,KAAAivB,SAAmB,EA8BtBjvB,KAAAsG,SAAW,SAACD,GACfvG,EAAKyvB,eAGDzvB,EAAK0vB,eAAiBF,GACtBxvB,EAAK2vB,oBAGL3vB,EAAK0vB,eAAiBH,GACtBvvB,EAAK4vB,WAAY,EAGb5vB,EAAK+uB,YACL/uB,EAAK8uB,UAAU/gB,SACf/N,EAAKmvB,SAAWtd,YAAYC,QAGhC9R,EAAK4vB,WAAY,GA1CrB1vB,KAAKkvB,SAAWN,EAAUe,WAAWxhB,EAAAsC,QAAQmf,OA6CrD,OA1CYR,EAAAptB,UAAAutB,aAAR,WACI,IAAIM,EAAKtd,EAAOnR,SAAS1B,EAAIM,KAAK4uB,UAAUlvB,EACxCowB,EAAKvd,EAAOnR,SAASzB,EAAIK,KAAK4uB,UAAUjvB,EAC5CK,KAAKwvB,eAAiBrlB,KAAK4H,KAAK8d,EAAKA,EAAKC,EAAKA,IAG3CV,EAAAptB,UAAAytB,kBAAR,WAEI,IAAI1f,EAAMwC,EAAOnR,SAAS1B,EAAIM,KAAK4uB,UAAUlvB,EAEzCqQ,EAAM,GAAK/P,KAAK4uB,UAAUrd,WAAapD,EAAAa,WAAWC,KAClDjP,KAAK4uB,UAAUrd,UAAYpD,EAAAa,WAAWC,KAC/Bc,EAAM,GAAK/P,KAAK4uB,UAAUrd,WAAapD,EAAAa,WAAW+gB,QACzD/vB,KAAK4uB,UAAUrd,UAAYpD,EAAAa,WAAW+gB,QAIvCX,EAAAptB,UAAA6sB,QAAP,WACI,IAAIC,EAAkBnd,YAAYC,MAClC,OAAQ5R,KAAKivB,SAAWjvB,KAAKkvB,UAAYJ,GAuBjDM,EA9DA,GAAa9vB,EAAA8vB,mGCjBbje,EAAA/R,EAAA,GAEM4wB,EAAQ7e,EAAAmF,YAAc,GACtB2Z,EAAQ,EACRC,EAAY,EAKlBtC,EAAA,SAAApuB,GACI,SAAAouB,EAAoB/lB,GAApB,IAAA/H,EACIN,EAAAO,KAAAC,OAAOA,KADSF,EAAA+H,eAMhB,CAAC,GAAI,SAAU,MAAO,MAAM9C,QACxB,SAAAorB,GAAU,OAAAjb,SAASxN,iBAAiByoB,EAAS,mBAAoB,SAACxvB,GAC1Db,EAAKswB,aACLC,EAAc/uB,WAAW,8BAEzB+uB,EAAc/uB,WAAW,+BAE7B+uB,EAAcztB,MAAMvB,IAAI6uB,KACzB,KAOP,IAAIG,EAAgB,IAAIlf,EAAA5R,OAAO,8BAA+BywB,EAAOC,GACrEI,EAAcvtB,QAAU,WAAM,OAAAhD,EAAKwwB,oBACnCD,EAAcztB,MAAMvB,IAAI6uB,GACxBpwB,EAAK+C,SAASwtB,GAEd,IAAIE,EAAa,IAAIpf,EAAA5R,OAAO,6BAA8BywB,EAAQ,GAAIC,UACtEM,EAAWztB,QAAU,WAAM,OAAAhD,EAAK+H,aAAac,cAAc,YAC3D4nB,EAAWloB,KAAO,cAClBkoB,EAAW3tB,MAAMvB,IAAI6uB,GACrBpwB,EAAK+C,SAAS0tB,KAoBtB,OAnD+B3uB,EAAAC,UAAA+rB,EAAApuB,GAkC3BsC,OAAAC,eAAY6rB,EAAA5rB,UAAA,eAAY,KAAxB,WACI,IAAIwuB,EAAWtb,SACf,SAAUsb,EAAIC,mBAAsBD,EAAIE,sBAAyBF,EAAIG,yBAA4BH,EAAII,sDAEjGhD,EAAA5rB,UAAAsuB,iBAAR,WACI,IAAIE,EAAWtb,SACX2b,EAAc3b,SAAS4b,gBAEvBC,EAAoBF,EAAOG,mBAAqBH,EAAOI,sBAAwBJ,EAAOK,yBAA2BL,EAAOM,oBACxHC,EAAiBZ,EAAIa,gBAAkBb,EAAIc,qBAAuBd,EAAIe,sBAAwBf,EAAIgB,iBAEjGxxB,KAAKowB,aAGNgB,EAAerxB,KAAKywB,GAFpBO,EAAkBhxB,KAAK8wB,IAKnCjD,EAnDA,CAA+BzuB,KAAK0H,WAAvBvH,EAAAsuB,0GCTb3c,EAAA7R,EAAA,IACA+E,EAAA/E,EAAA,IACA+R,EAAA/R,EAAA,GACA8O,EAAA9O,EAAA,IACAqyB,EAAAryB,EAAA,KACAsyB,EAAAtyB,EAAA,KACA4tB,EAAA5tB,EAAA,IACA2O,EAAA3O,EAAA,KACA8a,EAAA9a,EAAA,IACA6W,EAAA7W,EAAA,IACAuyB,EAAAvyB,EAAA,KACA+a,EAAA/a,EAAA,IACAwyB,EAAAxyB,EAAA,KACAyyB,EAAAzyB,EAAA,KACA4O,EAAA5O,EAAA,IAEA0yB,EAAA1yB,EAAA,KACA+O,EAAA/O,EAAA,IAGAouB,EAAA,SAAAhuB,GAeI,SAAAguB,EAAYhjB,GAAZ,IAAA1K,EACIN,EAAAO,KAAAC,KAAMwK,EAAK,SAAOxK,YATdF,EAAAiyB,cAAwB,EACxBjyB,EAAAkyB,SAAmB,EACnBlyB,EAAAmyB,UAAoB,EACpBnyB,EAAAoyB,UAAoB,EAGXpyB,EAAAqyB,YAAc,GAwWvBryB,EAAAsyB,iBAAmB,SAACzxB,GACxBb,EAAKkyB,SAAWrgB,YAAYC,MAAQjR,EAAM0xB,aAC1CvyB,EAAKoyB,UAAYvxB,EAAM2xB,kBACvBxyB,EAAKiyB,cAAgBpxB,EAAM0xB,aAAevyB,EAAKqyB,aAvW/CryB,EAAKkJ,gBAAkBiN,EAAA0C,gBACvB7Y,EAAKyyB,UAwWb,OA1X+B3wB,EAAAC,UAAA2rB,EAAAhuB,GAqBpBguB,EAAAxrB,UAAAsE,SAAP,SAAgBD,GAIZ6H,EAAAqC,IAAIpK,OAAOE,GACXrG,KAAKwS,eAAe9S,EAAKuW,EAAAoC,iBAAmBrY,KAAKwyB,KAAK9yB,EACtDM,KAAKwS,eAAe7S,EAAKsW,EAAAM,aAAe,GAKxCyW,EAAAzS,MAAM8C,aAAapQ,SAASlI,QAAQ,SAAA0tB,GAChCA,EAAE/K,aAAavW,EAAAoB,OAAOnR,SAAS1B,GAC/B+yB,EAAErxB,SAAS1B,EAAIyR,EAAAoB,OAAOnR,SAAS1B,EAAIuW,EAAAoC,mBAOvC,IADA,IAAI2I,EAAS9S,EAAAqC,IAAIyQ,OACRvU,EAAI,EAAGqF,EAAMkP,EAAOxY,OAAQiE,EAAIqF,EAAKrF,IAAK,CAC/C,IACId,GADAE,EAAOmV,EAAOvU,IACoCsH,cAMtD,GALIpI,GAAiBA,EAAcsG,SAAWpG,EAAK0B,OAAS0D,EAAGuC,KAAKkf,SAChE/mB,EAAcvK,SAASC,IAAI8I,KAAKC,MAAMyB,EAAK0V,qBAAqB,IAAKpX,KAAKC,MAAMyB,EAAK0V,qBAAqB,KAC1G5V,EAAc0f,SAAWxf,EAAK8mB,mBAG9B9mB,EAAK+mB,SAAiC,aAAtB/mB,EAAK+mB,QAAQrlB,MACzBvN,KAAK6yB,UAAUC,mBAAmBjnB,EAAK+mB,SAAU,CACjD,IAAIlzB,EAAIM,KAAKwyB,KAAKpxB,SAAS1B,EAAImM,EAAKzK,SAAS,GACzCzB,EAAIK,KAAKwyB,KAAKpxB,SAASzB,EAAIkM,EAAKzK,SAAS,GACzC2xB,EAAW5oB,KAAK4H,KAAKrS,EAAIA,EAAIC,EAAIA,GACjCkM,EAAK+mB,QAAQG,UAAYA,GACzB/yB,KAAK6yB,UAAUG,mBAAmBnnB,IAUlD,IAASY,EAAI,EAAGqF,EAAM5D,EAAAqC,IAAI0iB,eAAezqB,OAAQiE,EAAIqF,EAAKrF,IAAK,CAC3D,IAAIZ,KAAYqC,EAAAqC,IAAI0iB,eAAexmB,IAC1BsH,eAAiBlI,EAAKkI,cAActC,iBACzCzR,KAAKkzB,2BAA2BrnB,GAGhCA,EAAK+mB,SAAiC,cAAtB/mB,EAAK+mB,QAAQrlB,MAC7BvN,KAAK6yB,UAAUG,mBAAmBnnB,GAO1C,IAASY,EAAI,EAAGqF,EAAM9R,KAAKwS,eAAe1H,SAAStC,OAAQiE,EAAIqF,EAAKrF,IAAK,CACrE,IAAIzB,EAAahL,KAAKwS,eAAe1H,SAAS2B,GAC1CzB,GAASA,EAAM1E,UACf0E,EAAM1E,SAASD,GAOvB,IAASoG,EAAI,EAAGqF,EAAMkb,EAAAzS,MAAM8C,aAAa8V,YAAY3qB,OAAQiE,EAAIqF,EAAKrF,IAClEugB,EAAAzS,MAAM8C,aAAa8V,YAAY1mB,GAAGnG,SAASD,GAG/CrG,KAAKuJ,IAAIjD,SAASD,GAClB2mB,EAAAzS,MAAMjU,SAASD,GAEf,IAAIuL,EAAMD,YAAYC,MAKtB,GAAIob,EAAAzS,MAAMoD,QAAQxP,EAAA0H,SAAS+F,KAAO,EAAG,CACjC5b,KAAKozB,mBAAoB,EACzBpzB,KAAKwyB,KAAKvgB,SAAU,EACpB,IAAIohB,EAAWrzB,KAAK6H,aAAaY,SAAS,YACtC6qB,EAAoBtzB,KAAK6H,aAAa2B,eAC1C6pB,EAASE,cAAcD,EAAmBtzB,KAAK4C,OAC/CywB,EAASG,YAAa,EACtBxzB,KAAK6H,aAAac,cAAc0qB,QAC5B,GAAIrzB,KAAKgyB,UAAYpgB,EAAK,CAC9B,GAAI5R,KAAKiyB,WAAargB,EAAK,CAEnBlS,EAAKuW,EAAAoC,iBAAmBrY,KAAKwyB,KAAK9yB,EAClCC,EAAKsW,EAAAM,aAAe,GAExBvW,KAAKyzB,OAAS/zB,EAAIM,KAAK0zB,aAAa1zB,KAAKkyB,UAAY,EAAGlyB,KAAKkyB,UAAY,GACzElyB,KAAK2zB,OAASh0B,EAAIK,KAAK0zB,aAAa1zB,KAAKkyB,UAAWlyB,KAAKkyB,WAIzDlyB,KAAKkyB,WAAalyB,KAAKkyB,UAAYlyB,KAAKmyB,YACxCnyB,KAAKiyB,UAAYrgB,EAAM5R,KAAK+xB,cAGhC/xB,KAAKwS,eAAe9S,EAAIM,KAAKyzB,OAC7BzzB,KAAKwS,eAAe7S,EAAIK,KAAK2zB,SAI7BnG,EAAAxrB,UAAAuwB,MAAR,WACIvyB,KAAKwS,eAAiB,IAAIrB,EAAAhS,KAAK0H,UAC/B7G,KAAKwS,eAAe5P,MAAMjD,GAAK,EAC/BK,KAAK6C,SAAS7C,KAAKwS,gBACnBrB,EAAAoB,OAAOC,eAAiBxS,KAAKwS,eAK7BxS,KAAKwyB,KAAO,IAAIf,EAAAmC,cAAc5zB,KAAKwS,gBACnCxS,KAAKwyB,KAAKnqB,KAAO,OACjBrI,KAAKwyB,KAAK9yB,EAAIuW,EAAAoC,iBACdrY,KAAKwS,eAAe3P,SAAS7C,KAAKwyB,MAClCxyB,KAAKwyB,KAAKtjB,KAAK,OAAQ+G,EAAA4C,oBAKvB7Y,KAAKuJ,IAAM,IAAImoB,EAAAmC,SACf7zB,KAAK8zB,WAAa9zB,KAAKuJ,IAKvB4Q,EAAA+C,YAAY6W,gBAAgB,OAAQ,SAACC,GAAO,WAAIrC,EAAAxW,KAAK6Y,EAAIxzB,WACzD2Z,EAAA+C,YAAY6W,gBAAgB,WAAY,SAACC,GACrC,MAA2B,iBAAhBA,EAAIxzB,QACJ,IAAIoxB,EAAAqC,SAASD,EAAIE,QAAU,EAAG,EAAG,CAACF,EAAIxzB,UAEtC,IAAIoxB,EAAAqC,SAASD,EAAIE,QAAU,EAAGF,EAAIG,QAAU,EAAGH,EAAIxzB,WAGlE2Z,EAAA+C,YAAY6W,gBAAgB,SAAU,SAACC,GAAO,WAAInC,EAAAuC,SAElDp0B,KAAK6yB,UAAY,IAAIf,EAAAuC,aAAar0B,MAClCka,EAAAiC,aAAaza,GAAGwY,EAAAqC,WAAY,SAAC5b,GAA4B,OAAAA,EAAM2b,UAAYtO,EAAAa,IAAIylB,OAAOtmB,EAAAa,IAAI0lB,aAC1Fra,EAAAiC,aAAaza,GAAGwY,EAAAsa,aAAcx0B,KAAKoyB,mBAGhC5E,EAAAxrB,UAAA6rB,WAAP,eAAA/tB,EAAAE,KACIA,KAAK+gB,aAMLiM,EAAAzS,MAAM4C,YACNnP,EAAAa,IAAI4lB,UAAUzH,EAAAzS,MAAM8C,aAAaqX,YAAc,GAC/C1H,EAAAzS,MAAM8C,aAAapQ,SAASlI,QAAQ,SAAC4vB,EAAKC,GACtC90B,EAAK0S,eAAezH,WAAW4pB,EAAKC,GACpCD,EAAIjN,aAAasF,EAAAzS,MAAM8C,aAAavG,MAAM,MAM9CkW,EAAAzS,MAAM8C,aAAa5P,SAAS1I,QAAQ,SAAC8G,GACjC/L,EAAK0S,eAAe3P,SAASgJ,EAAKkI,eAI9BlI,EAAKyT,QAAUzT,EAAKyT,OAAO9W,OAAS,GACpC0F,EAAAqC,IAAIyD,QAAQnI,KAKpBqC,EAAAqC,IAAIC,WAAWpP,SAAS,GAAK4rB,EAAAzS,MAAM8C,aAAavG,MAAM,GACtD5I,EAAAqC,IAAIC,WAAWpP,SAAS,GAAK4rB,EAAAzS,MAAM8C,aAAavG,MAAM,GAEtD9W,KAAK6yB,UAAU3gB,QACflS,KAAKwyB,KAAKvgB,SAAU,EACpBjS,KAAKozB,mBAAoB,EACzBpzB,KAAKuJ,IAAI0I,SAAU,EACnBjS,KAAK6H,aAAac,cAAc3I,OAMpC8B,OAAAC,eAAWyrB,EAAAxrB,UAAA,oBAAiB,KAA5B,SAA6BO,GACrBvC,KAAKwyB,KAAKqC,gBAAkBtyB,IAC5BvC,KAAKwyB,KAAKqC,cAAgBtyB,EACrBvC,KAAKwyB,KAAKqC,gBACX70B,KAAKwyB,KAAKtjB,KAAK,OAAQ+G,EAAA4C,oBACvB7K,EAAAa,IAAIimB,0CASRtH,EAAAxrB,UAAA+yB,cAAR,SAAsBlpB,GAAtB,IAAA/L,EAAAE,KACQiL,EAA8BY,EAAKkI,cAEnCihB,EAAY/pB,EAAQrI,MAAMlD,EAC1Bu1B,EAAMhqB,EAAQ7J,SAAS1B,EAAI,GAC3Bw1B,EAAMjqB,EAAQ7J,SAASzB,EAAI,IAE3Bw1B,EAAOlqB,EAAQ7J,SAAS1B,EAAIuW,EAAAoC,iBAC5B+c,EAAOnf,EAAAM,aAEP8e,EAAS,IAAIlxB,EAAMmxB,MAAMrqB,EAAQ7J,UAChCm0B,GAAG,CAAE71B,EAAGu1B,EAAKt1B,EAAGu1B,GAAO,KAExBtyB,EAAQ,IAAIuB,EAAMmxB,MAAMrqB,EAAQrI,OAC/B2yB,GAAG,CAAE71B,EAAGs1B,EAAY,GAAKr1B,EAAGq1B,EAAY,IAAO,KAC/CQ,OAAOrxB,EAAMsxB,OAAOC,OAAOC,MAE5BC,EAAW,IAAIzxB,EAAMmxB,MAAMrqB,EAAQ7J,UAClCm0B,GAAG,CAAE71B,EAAGy1B,EAAMx1B,EAAGy1B,GAAQ,KACzBI,OAAOrxB,EAAMsxB,OAAOI,KAAKC,IACzB3mB,WAAW,WAAM,OAAArP,EAAK0S,eAAe9P,YAAYuI,KAEtDoqB,EAAOU,MAAMnzB,EAAOgzB,GAAU9e,QAC9B9W,KAAKg2B,aAAanqB,IAOd2hB,EAAAxrB,UAAAkxB,2BAAR,SAAmCrnB,GAC/B,IAAIZ,EAA8BY,EAAKkI,cAEvC,OAD8BlI,EAAKkI,cAActC,iBAE7C,KAAK,EACDub,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAAS6G,MAAO,GACnC1c,KAAK+0B,cAAclpB,GACnB7L,KAAKuJ,IAAI0sB,eAAehrB,EAAQ7J,SAAU,UAAW6U,EAAAsD,gBAAiB,KACtEvL,EAAAa,IAAIqnB,OACJ,MAEJ,KAAK,EACDlJ,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAAS6G,MAAO,IACnC1c,KAAK+0B,cAAclpB,GACnB7L,KAAKuJ,IAAI0sB,eAAehrB,EAAQ7J,SAAU,YAAa6U,EAAAsD,gBAAiB,KACxEvL,EAAAa,IAAIqnB,OACJ,MAEJ,KAAK,EACDlJ,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAAS6G,MAAO,KACnC1c,KAAK+0B,cAAclpB,GACnB7L,KAAKuJ,IAAI0sB,eAAehrB,EAAQ7J,SAAU,aAAc6U,EAAAsD,gBAAiB,KACzEvL,EAAAa,IAAIsnB,MACJ,MAMJ,KAAK,IACDn2B,KAAKuJ,IAAI0sB,eAAehrB,EAAQ7J,SAAU,4BAA6B6U,EAAAsD,gBACvEvZ,KAAK+0B,cAAclpB,GACnBmC,EAAAa,IAAIunB,YACJp2B,KAAK6yB,UAAUwD,YAAY,KAC3B,MAEJ,KAAK,IACDr2B,KAAKuJ,IAAI0sB,eAAehrB,EAAQ7J,SAAU,iBAAkB6U,EAAAsD,gBAC5DvZ,KAAK+0B,cAAclpB,GACnBmC,EAAAa,IAAIunB,YACJp2B,KAAK6yB,UAAUwD,YAAY,KAE3B,MAKJ,KAAKloB,EAAA2H,WAAWoF,WAER,IAAItJ,EAAMD,YAAYC,MAAQ,MACzBob,EAAAzS,MAAMS,MAAM7M,EAAA2H,WAAWoF,aAAe8R,EAAAzS,MAAMS,MAAM7M,EAAA2H,WAAWoF,YAActJ,IAC5E5R,KAAKuJ,IAAI0sB,eAAehrB,EAAQ7J,SAAU,UAAW6U,EAAAyD,eAAgB,KAEzEsT,EAAAzS,MAAMS,MAAM7M,EAAA2H,WAAWoF,YAAclb,KAAKs2B,eAAe,GAE7D,MACJ,KAAKnoB,EAAA2H,WAAWqF,KAEJvJ,EAAMD,YAAYC,MAAQ,MACzBob,EAAAzS,MAAMS,MAAM7M,EAAA2H,WAAWqF,OAAS6R,EAAAzS,MAAMS,MAAM7M,EAAA2H,WAAWqF,MAAQvJ,IAChE5R,KAAKuJ,IAAI0sB,eAAehrB,EAAQ7J,SAAU,UAAW6U,EAAAyD,eAAgB,KAEzEsT,EAAAzS,MAAMS,MAAM7M,EAAA2H,WAAWqF,MAAQnb,KAAKs2B,eAAe,KAU3D9I,EAAAxrB,UAAAs0B,eAAR,SAAuBC,GACnB,IAAI3kB,EAAMD,YAAYC,MAAQ,IAE9B,OADAA,GAAO2kB,GAWJ/I,EAAAxrB,UAAAg0B,aAAP,SAAoBnqB,EAAe2qB,QAAA,IAAAA,OAAA,GAC/BtoB,EAAAqC,IAAI2Q,WAAWrV,GACX2qB,GACAx2B,KAAKwS,eAAe9P,YAAamJ,EAAakI,eAEjDlI,EAAakI,cAAgB,MAG1ByZ,EAAAxrB,UAAA+e,WAAR,eAAAjhB,EAAAE,KACQgtB,EAAAzS,MAAM8C,eACN2P,EAAAzS,MAAM8C,aAAapQ,SAASlI,QAAQ,SAAC4vB,EAAeC,GAChD90B,EAAK0S,eAAe9P,YAAYiyB,KAEpC3H,EAAAzS,MAAM8C,aAAa5P,SAAS1I,QAAQ,SAAC8G,GAC7BA,IAASqC,EAAAqC,IAAIC,aACb1Q,EAAK0S,eAAe9P,YAAYmJ,EAAKkI,eACrC7F,EAAAqC,IAAI2Q,WAAWrV,GACfA,EAAKkI,cAAgB,QAKnB/T,KAAKwS,eAAe1H,SAAS9C,OAAO,SAACyuB,GAA0B,MAAW,SAAXA,EAAEpuB,OACvEtD,QAAQ,SAACiG,GACTlL,EAAK0S,eAAe9P,YAAYsI,KAEpCkD,EAAAqC,IAAIwQ,aACJhT,EAAAsC,OAAO6B,UAIPsb,EAAAxrB,UAAA0xB,YAAR,SAAoBrpB,EAAagN,GAC7B,OAAOhN,EAAOF,KAAKskB,UAAYpX,EAAMhN,IAQ7CmjB,EA1XA,CAA+Brc,EAAA5G,OAAlBjL,EAAAkuB,0GCnBbrpB,EAAA/E,EAAA,IAEA6a,EAAA7a,EAAA,IACA+R,EAAA/R,EAAA,GACA8a,EAAA9a,EAAA,IACA8rB,EAAA9rB,EAAA,GACAs3B,EAAAt3B,EAAA,KACA8O,EAAA9O,EAAA,IACA4tB,EAAA5tB,EAAA,IACAu3B,EAAAv3B,EAAA,KACA+a,EAAA/a,EAAA,IAEA4O,EAAA5O,EAAA,IAEA+O,EAAA/O,EAAA,IAEMw3B,EAA0B,GAEhChD,EAAA,SAAAp0B,GAMI,SAAAo0B,EAAoBjd,GAApB,IAAA7W,EACIN,EAAAO,KAAAC,OAAOA,KADSF,EAAA6W,YAsFb7W,EAAAwG,SAAW,SAACD,GAQf,OAPAvG,EAAKsB,SAAS1B,EAAIwrB,EAAA3Y,OAAOnR,SAAS1B,EAClCI,EAAKsB,SAASzB,EAAIurB,EAAA3Y,OAAOnR,SAASzB,EAE9BG,EAAK+0B,eACL/0B,EAAK+2B,aAAa1wB,OAAOE,GAGrBvG,EAAK+2B,aAAaC,eACtB,KAAKJ,EAAAI,cAAcC,KACfj3B,EAAKk3B,cAAc9e,MAAO,EAC1B,MACJ,KAAKwe,EAAAI,cAAc7nB,KACnB,KAAKynB,EAAAI,cAAcG,SACfn3B,EAAKk3B,cAAc9e,KAAOpY,EAAK+2B,aAAaK,UAC5Cp3B,EAAKk3B,cAAcG,kBAAoB,GACvCr3B,EAAKk3B,cAAcI,iBAAmB,GACtC,MACJ,KAAKV,EAAAI,cAAc/G,MACnB,KAAK2G,EAAAI,cAAcO,UACfv3B,EAAKk3B,cAAc9e,KAAOpY,EAAK+2B,aAAaK,UAC5Cp3B,EAAKk3B,cAAcG,iBAAmB,IACtCr3B,EAAKk3B,cAAcI,iBAAmB,IACtC,MAEJ,KAAKV,EAAAI,cAAcQ,OACfx3B,EAAKk3B,cAAc9e,KAAOpY,EAAK+2B,aAAaK,UAC5Cp3B,EAAKk3B,cAAcG,iBAAmB,IACtCr3B,EAAKk3B,cAAcI,iBAAmB,IAU9C,GAPAt3B,EAAKk3B,cAAc7wB,OAAY,KAALE,GAC1BvG,EAAKk3B,cAAcO,eAAez3B,EAAKsB,SAAS1B,EAAGI,EAAKsB,SAASzB,GACjEG,EAAK03B,YAAYrxB,OAAY,KAALE,GAKpBvG,EAAK+2B,aAAaK,WAAap3B,EAAK+2B,aAAaC,gBAAkBJ,EAAAI,cAAcC,KAAM,CACvF/J,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAASyF,KAAY,MAALjV,GACnC,IACIoxB,EADQ,EACCttB,KAAKutB,GAAa,IAC/B53B,EAAKurB,SAAYvrB,EAAK+2B,aAAaC,gBAAkBJ,EAAAI,cAAc7nB,KAAQwoB,GAAUA,OAErF33B,EAAKurB,SAAW,EAEpBvrB,EAAK03B,YAAYtf,KAAO8U,EAAAzS,MAAM+B,UAC9B9c,EAAAwC,UAAMsE,SAAQvG,KAAAD,EAACuG,IAGXvG,EAAA63B,aAAe,SAACh3B,GACpB,IAAIuB,EAAuBvB,EAAMi3B,SAC7BhpB,EAAMjO,EAAMk3B,UAAmC,IAAvB1mB,EAAAyH,qBAA6BzH,EAAAyH,qBACzD,OAAQ1W,GACJ,KAAKw0B,EAAAI,cAAcC,KACZj3B,EAAKg4B,4BAA4BC,aAAaj4B,EAAKg4B,4BACtDh4B,EAAKg4B,2BAA6BnJ,WAAW,WACzC7uB,EAAKoP,KAAK,OAAQiC,EAAA0H,oBAClB7K,EAAAa,IAAIimB,QACL,KACH,MACJ,KAAK4B,EAAAI,cAAc7nB,KACf8oB,aAAaj4B,EAAKg4B,4BAClBh4B,EAAKoP,KAAK,OAAQN,GAClBZ,EAAAa,IAAImpB,KAAKr3B,EAAMk3B,WACf,MACJ,KAAKnB,EAAAI,cAAc/G,MACfgI,aAAaj4B,EAAKg4B,4BAClBh4B,EAAKoP,KAAK,QAASN,GACnBZ,EAAAa,IAAImpB,KAAKr3B,EAAMk3B,WACf,MACJ,KAAKnB,EAAAI,cAAcG,SACfc,aAAaj4B,EAAKg4B,4BAClBh4B,EAAKoP,KAAK,WAAYN,GACtBZ,EAAAa,IAAIopB,OACJ,MACJ,KAAKvB,EAAAI,cAAcO,UACfU,aAAaj4B,EAAKg4B,4BAClBh4B,EAAKoP,KAAK,YAAaN,GACvBZ,EAAAa,IAAIopB,OACJ,MACJ,KAAKvB,EAAAI,cAAcQ,OACfS,aAAaj4B,EAAKg4B,4BAClBh4B,EAAKoP,KAAK,SAAUN,GACpBZ,EAAAa,IAAIopB,OACJ,MACJ,KAAKvB,EAAAI,cAAcoB,aACfH,aAAaj4B,EAAKg4B,4BAClBh4B,EAAKoP,KAAK,eAAgBN,GAC1BZ,EAAAa,IAAIspB,aACJ,MACJ,KAAKzB,EAAAI,cAAcsB,cACfL,aAAaj4B,EAAKg4B,4BAClBh4B,EAAKoP,KAAK,gBAAiBN,GAC3BZ,EAAAa,IAAIspB,eAjLZr4B,EAAK+2B,aAAe,IAAIH,EAAA2B,mBAAmBnqB,EAAAqC,KAC3CrC,EAAAqC,IAAI7O,GAAG,gBAAiB5B,EAAKw4B,gBAAiBx4B,GAC9CoO,EAAAqC,IAAI7O,GAAG,gBAAiB5B,EAAKy4B,gBAAiBz4B,GAE9C,IAAI0U,EAAM,CACNqC,MAAO,CACHC,MAAO,GACPC,IAAK,GAETS,UAAW,SACXC,UAAW,IACXL,cAAe,CACX/M,IAAK,IACLgN,IAAK,KAETzM,MAAO,CACHkM,MAAO,UACPC,IAAK,WAETE,MAAO,CACHH,MAAO,EACPC,IAAK,GACLG,uBAAwB,GAE5BtU,MAAO,CACHkU,MAAO,GACPC,IAAK,IAETY,aAAc,GACdJ,SAAU,CACNlN,IAAK,IACLgN,IAAK,KAETS,UAAW,SACXC,YAAa,CACTrY,EAAG,EACHC,EAAGi3B,EAAgB,GACnBpqB,EAAG,KAIX1M,EAAK03B,YAAcvd,EAAAvD,sBAAsB5W,EAAM,CAACX,KAAK2E,QAAQ+nB,UAAU,iCAAkCrX,GAEzG1U,EAAKk3B,cAAgB/c,EAAAvD,sBAAsBC,EAAW,CAACxX,KAAK2E,QAAQ+nB,UAAU,qBAE9E,IAAM2M,EAAQ,yBACd14B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,QAASgpB,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK5B,EAAiBA,IACpG92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,OAAQgpB,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK5B,EAAiBA,IACnG92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,WAAYgpB,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK5B,EAAiBA,IACvG92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,YAAagpB,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK5B,EAAiBA,IACxG92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,SAAUgpB,EAAO,CAAC,EAAG,EAAG,EAAG,GAAI5B,EAAiBA,IACzF92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,OAAQgpB,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAE,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI5B,EAAiBA,IAElI92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,eAAgBgpB,EAAO,CAAC,GAAI,GAAI,IAAK5B,EAAiBA,IAC/F92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,gBAAiBgpB,EAAO,CAAC,GAAI,GAAI,IAAK5B,EAAiBA,IAChG92B,EAAKyP,cAAc,IAAI2b,EAAA1b,kBAAkB,WAAYgpB,EAAO,CAAC,GAAI,GAAI,IAAK5B,EAAiBA,IAC3F92B,EAAK6C,OAAOtB,IAAI,GAAK,KAErB6Y,EAAAiC,aAAaza,GAAGwY,EAAAue,WAAY34B,EAAK63B,gBA2SzC,OA9WmC/1B,EAAAC,UAAA+xB,EAAAp0B,GA2E/BsC,OAAAC,eAAW6xB,EAAA5xB,UAAA,gBAAa,KAAxB,WACI,OAAOhC,KAAK62B,aAAa6B,mBAM7B,SAAyBpa,GACrBte,KAAK62B,aAAa6B,cAAgBpa,mCAkH9BsV,EAAA5xB,UAAAs2B,gBAAR,SAAwB33B,GAAxB,IAAAb,EAAAE,KAKQ6L,EAAgBlL,EAAMkL,KACtB8sB,EAAWh4B,EAAMkL,KAAKkI,cAEtB6kB,EAAmBzuB,KAAK0uB,IAAIl4B,EAAMyQ,SAAS,IAE/C,GAAIwnB,EAP4B,IAOQ,CAGhCD,aAAehC,EAAAtoB,MACVsqB,EAAInqB,WACLxO,KAAK84B,qBAAqBH,EAAK9sB,IAIvC,IAAIktB,EAAgB/4B,KAAK62B,aAAaC,cACtC,GAAIiC,IAAkBrC,EAAAI,cAAckC,UAChCD,IAAkBrC,EAAAI,cAAcoB,cAChCa,IAAkBrC,EAAAI,cAAcsB,cAIhC,OAFApqB,EAAAa,IAAIoqB,mBACJ/e,EAAAiC,aAAajE,KAAKgC,EAAAsa,aAAc,CAACnC,aAAc,IAAKC,kBAAmB,IAK/E,GAAIsG,EA5B2B,IA4BQ,CACnC71B,QAAQ8F,IAAI,kBAAoB+vB,GAChC,IAAIM,EAAwB,IAAIhO,EAAAla,eAChCkoB,EAAM3pB,cAAc,IAAI2b,EAAA1b,kBAAkB,QAAS,oCAC/C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIonB,EAAiBA,IACzCsC,EAAMv2B,OAAOtB,IAAI,IACjB63B,EAAMC,MAAM93B,IAAI,IAChB63B,EAAMx5B,EAAIM,KAAKN,EACfw5B,EAAMv5B,EAAIK,KAAKL,EAAI,GACnBu5B,EAAMriB,MAAQ,GACdqiB,EAAM7N,SAAWlhB,KAAKskB,SAAWtkB,KAAKutB,GACtC13B,KAAK2W,UAAU9T,SAASq2B,GACxBA,EAAM/pB,WAAa,WAAM,OAAArP,EAAK6W,UAAUjU,YAAYw2B,IACpDA,EAAMhqB,KAAK,QAAS,GAAG,GAGxB0pB,EA7CmC,MA8ClC5qB,EAAAa,IAAIoqB,cACJl2B,QAAQ8F,IAAI,aAAelI,EAAMyQ,YASjCwiB,EAAA5xB,UAAAu2B,gBAAR,SAAwB53B,GAAxB,IAAAb,EAAAE,KACQqS,EAAiB1R,EAAM+e,WAAW3L,cACtC,IAAK1B,EAAOR,OAAQ,CAChB,GAAIlR,EAAM8e,UACNzR,EAAAa,IAAIuqB,UAEJpM,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAAS+F,IAAKvJ,EAAOf,YACrC,CAGH,IAAI+nB,EAA0B,IAAInO,EAAAla,eAClCqoB,EAAQ9pB,cAAc,IAAI2b,EAAA1b,kBAAkB,MACxC,uCACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,KAE5B6pB,EAAQ12B,OAAOtB,IAAI,IACnBg4B,EAAQF,MAAM93B,IAAI,IAClBg4B,EAAQ35B,EAAI2S,EAAO3S,EACnB25B,EAAQ15B,EAAI0S,EAAO1S,EACnB05B,EAAQxiB,MAAQ,GAChBwiB,EAAQhO,SAAWlhB,KAAKskB,SAAWtkB,KAAKutB,GACxC13B,KAAK2W,UAAU9T,SAASw2B,GACxBA,EAAQlqB,WAAa,WAAM,OAAArP,EAAK6W,UAAUjU,YAAY22B,IACtDA,EAAQnqB,KAAK,MAAO,IAAI,GACxBlB,EAAAa,IAAIyqB,gBAERjnB,EAAOR,QAAS,IAShB+hB,EAAA5xB,UAAA82B,qBAAR,SAA6BH,EAAU9sB,GAAvC,IAAA/L,EAAAE,KACQiL,EAAWY,EAAakI,cACxBwlB,EAAKtuB,EAGT,GAAIsuB,EAAGxtB,MACc5B,KAAKskB,UAAY8K,EAAGxtB,KAAKytB,OAC1B,CACZ,IAAIC,EAAetf,EAAA+C,YAAYwc,aAAa1M,EAAAzS,MAAM8C,aAAa/R,UAAWiuB,EAAGxtB,KAAKR,QAClFvL,KAAK25B,YAAYhB,EAAKc,GAK9Bz5B,KAAKg2B,aAAanqB,GAClB8sB,EAAIhpB,OAAO,WAAM,OAAA7P,EAAK6W,UAAUjU,YAAYuI,KAI5C,IAAIuT,EAAMma,EAAIhJ,WAAWxhB,EAAAsC,QAAQmL,IAAM,EACvCoR,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAASgH,SAAU2B,IAOlCoV,EAAA5xB,UAAA23B,YAAR,SAAoBhB,EAAUiB,GAC1B,IAAI3uB,EAAW2uB,EAAiB7lB,cAChC9I,EAAQvL,EAAIi5B,EAAIj5B,EAChBuL,EAAQtL,EAAIg5B,EAAIh5B,EAAI,GACpBK,KAAK2W,UAAU9T,SAASoI,GAGxB,IAAIgqB,EAAMhqB,EAAQ7J,SAAS1B,EAAI,GAC3Bw1B,EAAMjqB,EAAQ7J,SAASzB,EAAI,IAC3B01B,EAAS,IAAIlxB,EAAMmxB,MAAMrqB,EAAQ7J,UAChCm0B,GAAG,CAAE71B,EAAGu1B,EAAKt1B,EAAGu1B,GAAO,KACvB/lB,WAAW,WACRyqB,EAASx4B,SAAW,CAAC6J,EAAQ7J,SAAS1B,EAAGuL,EAAQ7J,SAASzB,GAC1DuO,EAAAqC,IAAIyD,QAAQ4lB,KAIhB5E,EAAY/pB,EAAQrI,MAAMlD,EAC1Bm6B,EAAY5uB,EAAQrI,MAAMjD,EAC1BiD,EAAQ,IAAIuB,EAAMmxB,MAAMrqB,EAAQrI,OAC/B2yB,GAAG,CAAE71B,EAAGs1B,EAAY,GAAKr1B,EAAGq1B,EAAY,IAAO,KAC/CQ,OAAOrxB,EAAMsxB,OAAOC,OAAOC,MAE5BR,EAAOn1B,KAAKN,EACZ01B,EAAOp1B,KAAKL,EAAI,EAChBi2B,EAAW,IAAIzxB,EAAMmxB,MAAMrqB,EAAQ7J,UAClCm0B,GAAG,CAAE71B,EAAGy1B,EAAMx1B,EAAGy1B,GAAQ,KACzBI,OAAOrxB,EAAMsxB,OAAOI,KAAKC,IACzBxvB,SAAS,SAACsR,GACPgiB,EAASx4B,SAAW,CAAC6J,EAAQ7J,SAAS1B,EAAGuL,EAAQ7J,SAASzB,KAE7DwP,WAAW,WAAM,OAAAlE,EAAQrI,MAAMvB,IAAI2zB,EAAW6E,KAEnDxE,EAAOU,MAAMnzB,EAAOgzB,GAAU9e,SAU3B8c,EAAA5xB,UAAAg0B,aAAP,SAAoBnqB,EAAe2qB,QAAA,IAAAA,OAAA,GAC/BtoB,EAAAqC,IAAI2Q,WAAWrV,GACX2qB,GACAx2B,KAAK2W,UAAUjU,YAAamJ,EAAakI,eAE5ClI,EAAakI,cAAgB,MAEtC6f,EA9WA,CAAmC1I,EAAAla,gBAAtB1R,EAAAs0B,mGCnBb,IAmOYkD,EAnOZ3lB,EAAA/R,EAAA,GAEA4tB,EAAA5tB,EAAA,IACA8a,EAAA9a,EAAA,IACA+O,EAAA/O,EAAA,IAEAi5B,EAAA,WAuBI,SAAAA,EAAY7Y,GAtBKxf,KAAA85B,SAAW,IACX95B,KAAA+5B,WAAa,MACb/5B,KAAAg6B,mBAAqB,KAErBh6B,KAAAi6B,cAAgB,IAChBj6B,KAAAk6B,qBAAuB,IACvBl6B,KAAAm6B,mBAAqB,IAG9Bn6B,KAAAo6B,gBAA0B,EAC1Bp6B,KAAAq6B,oBAA8B,EAG9Br6B,KAAA+4B,eAAgC,EAChC/4B,KAAAs6B,IAAM,IAAInpB,EAAAkS,eAEVrjB,KAAA63B,WAAY,EACZ73B,KAAAu6B,WAAY,EACZv6B,KAAA43B,SAA0Bd,EAAcC,KAExC/2B,KAAAw6B,gBAA0B,EAG9Bx6B,KAAKwf,MAAQA,EAmMrB,OA7LI1d,OAAAC,eAAWs2B,EAAAr2B,UAAA,gBAAa,KAAxB,WACI,OAAOhC,KAAKw6B,oBAMhB,SAAyBlc,GACrBte,KAAKw6B,eAAiBlc,EACjBte,KAAKw6B,iBACNx6B,KAAK63B,WAAY,EACjB73B,KAAK+4B,cAAgBjC,EAAcC,uCAI3Cj1B,OAAAC,eAAWs2B,EAAAr2B,UAAA,YAAS,KAApB,WACI,OAAOhC,KAAKu6B,2CAGhBz4B,OAAAC,eAAWs2B,EAAAr2B,UAAA,UAAO,KAAlB,WACI,OAAQhC,KAAKu6B,WAAav6B,KAAKo6B,gBAAkBzoB,YAAYC,uCAGjE9P,OAAAC,eAAWs2B,EAAAr2B,UAAA,YAAS,KAApB,WACI,OAAOhC,KAAK63B,2CAGhB/1B,OAAAC,eAAWs2B,EAAAr2B,UAAA,gBAAa,KAAxB,WACI,OAAOhC,KAAK+4B,+CAGTV,EAAAr2B,UAAAy4B,UAAP,SAAiBlpB,GACb,IAAImpB,EAEAnpB,IAAculB,EAAcQ,OAC5BoD,EAAc,CAAC,EAAG16B,KAAK+5B,YAChBxoB,IAAculB,EAAcG,SACnCyD,EAAc,CAAoB,IAAlB16B,KAAK+5B,WAAmB/5B,KAAK+5B,YACtCxoB,IAAculB,EAAcO,YACnCqD,EAAc,CAAmB,GAAlB16B,KAAK+5B,WAAmB/5B,KAAK+5B,aAEhD/5B,KAAKwf,MAAMhP,WAAWmqB,aAAaD,GACnC16B,KAAKwf,MAAMiC,qBAAqBzhB,KAAKwf,MAAMhP,YAC3CxQ,KAAKo6B,gBAAkBzoB,YAAYC,MAAQ5R,KAAKi6B,eAG7C5B,EAAAr2B,UAAA44B,cAAP,eAAA96B,EAAAE,KACI,OAAQA,KAAK+4B,eACT,KAAKjC,EAAc7nB,KACnB,KAAK6nB,EAAcG,SACfj3B,KAAK43B,SAAWd,EAAcoB,aAC9B,MAEJ,KAAKpB,EAAc/G,MACnB,KAAK+G,EAAcO,UACfr3B,KAAK43B,SAAWd,EAAcsB,cAC9B,MAEJ,QACIp4B,KAAK43B,SAAWd,EAAckC,SAGtCj2B,QAAQ8F,IAAI,iBAAmBiuB,EAAc92B,KAAK+4B,eAAiB,OAASjC,EAAc92B,KAAK43B,WAE/F,IAAI8C,EAAwB,CAAC,EAAG16B,KAAKg6B,mBACrCh6B,KAAKwf,MAAMhP,WAAWqqB,eACtB76B,KAAKwf,MAAMhP,WAAWmqB,aAAaD,GACnC16B,KAAKq6B,oBAAsB1oB,YAAYC,MAAQ5R,KAAKk6B,qBAEpDl6B,KAAK04B,eAAgB,EACrB/J,WAAW,WAAM,OAAA7uB,EAAK44B,eAAgB,GAAM14B,KAAKm6B,oBAEjDjgB,EAAAiC,aAAajE,KAAKgC,EAAAue,WAAY,CAC1Bb,SAAU53B,KAAK43B,SACfkD,SAAU96B,KAAK+4B,cACfwB,WAAW,EACX1C,WAAW,IAEf73B,KAAK+4B,cAAgB/4B,KAAK43B,UAGvBS,EAAAr2B,UAAAmE,OAAP,SAAcE,GAiBV,GAHArG,KAAK43B,SAAWd,EAAcC,KAEN5sB,KAAK0uB,IAAI74B,KAAKwf,MAAMhP,WAAWY,SAAS,IAAM,IAC/C,CACnB,IAAI2pB,EAAwB/6B,KAAKwf,MAAMyT,eAAe+H,MAAM,SAACnvB,GAAS,OAAAA,EAAKyT,OAAO,GAAGpM,SACrFlT,KAAKu6B,UAAYQ,OAEjB/6B,KAAKu6B,WAAY,EAIrB,IAAI/e,EAAYxb,KAAKi7B,uBAGrB,GAAIj7B,KAAKu6B,WAAav6B,KAAKw6B,eAKvB,OAJKx6B,KAAKs6B,IAAI1V,UAxBI,KAwBgB5kB,KAAKs6B,IAAI1V,UAlBtB,MAkB8CoI,EAAAzS,MAAM2gB,cAAgBl7B,KAAKq6B,oBAAsB1oB,YAAYC,OAC5H5R,KAAK46B,qBAET56B,KAAKwf,MAAMhP,WAAWY,SAAS,IAAMoK,GAKrCxb,KAAKwf,MAAMhP,WAAWY,SAAS,GAAKoK,EAIxC,IAAI2f,EAASnO,EAAAzS,MAAMoD,QAAQxP,EAAA0H,SAASyF,MAAQ,EACxC8f,EAAwBp7B,KAAKs6B,IAAI1V,UAnCX,KAmCmCuW,GAAUn7B,KAAKw6B,eAqB5E,GAnBIx6B,KAAKs6B,IAAI1V,UA1CS,KA0CW5kB,KAAKs6B,IAAI1V,UApCjB,IAqCrB5kB,KAAK43B,SAAWd,EAAc7nB,MACvBjP,KAAKs6B,IAAI1V,UA3CE,KA2CkB5kB,KAAKs6B,IAAI1V,UArCvB,OAsCtB5kB,KAAK43B,SAAWd,EAAc/G,QAI7B/vB,KAAKs6B,IAAI1V,UA/CQ,KA+CY5kB,KAAKs6B,IAAI1V,UAzCpB,KAyCyC5kB,KAAKs6B,IAAI1V,UAvCnD,MAuCwE5kB,KAAKq7B,UAC3Fr7B,KAAK+4B,gBAAkBjC,EAAc7nB,KACrCjP,KAAK43B,SAAWd,EAAcG,SACvBj3B,KAAK+4B,gBAAkBjC,EAAc/G,MAC5C/vB,KAAK43B,SAAWd,EAAcO,UACvBr3B,KAAK+4B,gBAAkBjC,EAAcC,OAC5C/2B,KAAK43B,SAAWd,EAAcQ,OAC9B8D,GAAe,IAKnBp7B,KAAK43B,WAAa53B,KAAK+4B,eAAiBqC,IAAiBp7B,KAAKk3B,UAAW,CACzE,IAAIoE,GAAmB,EACvB,OAAQt7B,KAAK43B,UACT,KAAKd,EAAcG,SACfj3B,KAAKy6B,UAAU3D,EAAcG,UAC7BqE,GAAmB,EACnB,MACJ,KAAKxE,EAAcO,UACfr3B,KAAKy6B,UAAU3D,EAAcO,WAC7BiE,GAAmB,EACnB,MACJ,KAAKxE,EAAcQ,OACft3B,KAAKy6B,UAAU3D,EAAcQ,QAC7BgE,GAAmB,EAG3BphB,EAAAiC,aAAajE,KAAKgC,EAAAue,WAAY,CAC1Bb,SAAU53B,KAAK43B,SACfkD,SAAU96B,KAAK+4B,cACfwB,UAAWe,EACXzD,UAAWuD,IAKnBp7B,KAAK+4B,cAAgB/4B,KAAK43B,SAC1B53B,KAAK63B,UAAYuD,GAGb/C,EAAAr2B,UAAAi5B,qBAAR,WACI,IAAI1pB,EAAoB,EAOxB,OANIvR,KAAK+4B,gBAAkBjC,EAAc7nB,MAAQjP,KAAK+4B,gBAAkBjC,EAAcG,SAClF1lB,GAAa,EACNvR,KAAK+4B,gBAAkBjC,EAAc/G,OAAS/vB,KAAK+4B,gBAAkBjC,EAAcO,YAC1F9lB,EAAY,GAGZvR,KAAKu7B,UAEc,GAAZhqB,EAEgBA,EAAYvR,KAAK85B,UAAY95B,KAAKk3B,UAAY,EAAI,IAIrFmB,EA3NA,GAAa/4B,EAAA+4B,qBA6Nb,SAAYvB,GACRA,IAAA,eACAA,IAAA,iBACAA,IAAA,eAEAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,mBAEAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uBAXJ,CAAYA,EAAAx3B,EAAAw3B,gBAAAx3B,EAAAw3B,cAAa,mGClOzB3yB,EAAA/E,EAAA,IACA+R,EAAA/R,EAAA,GACA6a,EAAA7a,EAAA,IACA4tB,EAAA5tB,EAAA,IACA8a,EAAA9a,EAAA,IACA6W,EAAA7W,EAAA,IACA+O,EAAA/O,EAAA,IAEAy0B,EAAA,SAAAr0B,GAmBI,SAAAq0B,IAAA,IAAA/zB,EACIN,EAAAO,KAAAC,OAAOA,YANHF,EAAA07B,gBAAkB,EA8OlB17B,EAAA27B,gBAAkB,SAAC96B,GACvBb,EAAKm2B,eAAe9kB,EAAAoB,OAAOnR,SAAaT,EAAMub,OAAM,MAAOjG,EAAAuD,aAAc,KAGrE1Z,EAAA47B,iBAAmB,SAAC/6B,GACxB,OAAQA,EAAM8b,MACV,KAAKtO,EAAA0H,SAAS6G,MACV5c,EAAK67B,SAASl5B,KAAO9B,EAAMgc,SAASif,WACpC,MACJ,KAAKztB,EAAA0H,SAASyF,KACVxb,EAAK+7B,QAAQp5B,KAAU9B,EAAMgc,SAASgO,QAAQ,GAAE,MAAMhqB,EAAMic,MAAMzO,EAAA0H,SAAS0F,SAASoP,QAAQ,GAC5F,MACJ,KAAKxc,EAAA0H,SAAS0F,QACVzb,EAAK+7B,QAAQp5B,KAAU0H,KAAKC,MAAMzJ,EAAMic,MAAMzO,EAAA0H,SAASyF,OAAM,MAAM3a,EAAMgc,SAASgO,QAAQ,GAC1F,MACJ,KAAKxc,EAAA0H,SAAS+F,GACV9b,EAAKg8B,MAAMr5B,KAAU0H,KAAKsgB,MAAM9pB,EAAMgc,UAAS,MAAMhc,EAAMic,MAAMzO,EAAA0H,SAASgG,OAC1E,MACJ,KAAK1N,EAAA0H,SAASgG,MACV/b,EAAKg8B,MAAMr5B,KAAU0H,KAAKsgB,MAAM9pB,EAAMic,MAAMzO,EAAA0H,SAAS+F,KAAI,MAAMjb,EAAMgc,SACrE,MACJ,KAAKxO,EAAA0H,SAASgH,SACV,IAAI2B,EAAM7d,EAAMgc,SAAWhc,EAAMsb,SACtB,GAAPuC,GACA1e,EAAKm2B,eAAe,CAAEv2B,EAAG,EAAGC,EAAG,IAAM,IAAI6e,EAAG,OAAQvI,EAAAwD,eAAgB,IACxE3Z,EAAKi8B,UAAUp7B,GACf,MACJ,KAAKwN,EAAA0H,SAAS0I,eACVze,EAAKk8B,cAAcr7B,KAWvBb,EAAAk8B,cAAgB,SAACr7B,GACrBb,EAAKm8B,OAAOx5B,KAAU0H,KAAKsgB,MAAM9pB,EAAMic,MAAMzO,EAAA0H,SAASqI,WAAU,MAAMvd,EAAMic,MAAMzO,EAAA0H,SAASoI,aAC3Fne,EAAKo8B,UAAUt8B,MAAQ,EACvBE,EAAKq8B,gBAAgB,SAAWx7B,EAAMgc,UACtC7c,EAAKs8B,SAAS35B,KAAO,SAASuqB,EAAAzS,MAAMK,gBAlRpC9a,EAAKyyB,UAkTb,OAvU8B3wB,EAAAC,UAAAgyB,EAAAr0B,GAwBlBq0B,EAAA7xB,UAAAuwB,MAAR,WAEIvyB,KAAKq8B,kBAAoB,IAAIl9B,KAAKosB,KAAK,GAAItV,EAAA4D,aAC3C7Z,KAAKq8B,kBAAkBj7B,SAAW,IAAIjC,KAAKqS,MAAMyE,EAAAK,YAAaL,EAAAM,cAC9DvW,KAAKq8B,kBAAkB15B,OAAOtB,IAAI,EAAG,GACrCrB,KAAK6C,SAAS7C,KAAKq8B,mBAGnBr8B,KAAKs8B,MAAQ,IAAIn9B,KAAK+E,OAAO/E,KAAK2E,QAAQ+nB,UAAU,yBACpD7rB,KAAKs8B,MAAM97B,QAAQgD,YAAYC,UAAYtE,KAAKuE,YAAYC,QAC5D3D,KAAKs8B,MAAMl7B,SAASC,IAAI,GACxBrB,KAAKs8B,MAAMj0B,KAAO,iBAClBrI,KAAKs8B,MAAM35B,OAAOtB,IAAI,GACtBrB,KAAK6C,SAAS7C,KAAKs8B,OAEnBt8B,KAAKu8B,gBAAkB,IAAIp9B,KAAKosB,KAAK,GAAItV,EAAA4D,aACzC7Z,KAAKu8B,gBAAgBn7B,SAASC,IAAI,IAAK,KACvCrB,KAAKu8B,gBAAgB55B,OAAOtB,IAAI,GAAK,GACrCrB,KAAKs8B,MAAMz5B,SAAS7C,KAAKu8B,iBAEzB,IAkDQtU,EAOAuU,GArDAA,EAAM,IAAIr9B,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,6BAA6B/C,UACzEA,QAAQgD,YAAYC,UAAYtE,KAAKuE,YAAY+4B,OACrDD,EAAIp7B,SAASC,IAAI,EANL,GAOZrB,KAAKs8B,MAAMz5B,SAAS25B,GAEpBx8B,KAAK87B,MAAQ,IAAI38B,KAAKosB,KAAK,IAAKtV,EAAAqD,YAChCtZ,KAAK87B,MAAM16B,SAAW,IAAIjC,KAAKqS,MAAM,GAAI7R,IACzC68B,EAAI35B,SAAS7C,KAAK87B,QAEd7T,EAAM,IAAI9oB,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,wBAAwB/C,UACpEY,SAASC,IAAI,EAAG1B,GACpB68B,EAAI35B,SAASolB,IAMTuU,EAAM,IAAIr9B,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,6BAA6B/C,UACzEA,QAAQgD,YAAYC,UAAYtE,KAAKuE,YAAY+4B,OACrDD,EAAIp7B,SAASC,IAAI,IAvBL,GAwBZrB,KAAKs8B,MAAMz5B,SAAS25B,GAEpBx8B,KAAK67B,QAAU,IAAI18B,KAAKosB,KAAK,IAAKtV,EAAAqD,YAClCtZ,KAAK67B,QAAQz6B,SAAW,IAAIjC,KAAKqS,MAAM,GAAI7R,IAC3C68B,EAAI35B,SAAS7C,KAAK67B,SAElB77B,KAAKgY,QAAUiC,EAAAvD,sBAAsB8lB,EAAK,CAACr9B,KAAK2E,QAAQ+nB,UAAU,qBAClE7rB,KAAKgY,QAAQuf,eAAe,GAAI,IAChCv3B,KAAKgY,QAAQ0kB,YAAc,GAC3B18B,KAAKgY,QAAQL,aAAe,GAC5B3X,KAAKgY,QAAQE,MAAO,GAOhBskB,EAAM,IAAIr9B,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,6BAA6B/C,UACzEA,QAAQgD,YAAYC,UAAYtE,KAAKuE,YAAY+4B,OACrDD,EAAIp7B,SAASC,IAAI,IA3CL,GA4CZrB,KAAKs8B,MAAMz5B,SAAS25B,GAEpBx8B,KAAK27B,SAAW,IAAIx8B,KAAKosB,KAAK,IAAKtV,EAAAqD,YACnCtZ,KAAK27B,SAASv6B,SAAW,IAAIjC,KAAKqS,MAAM,GAAI7R,IAC5C68B,EAAI35B,SAAS7C,KAAK27B,WAEd1T,EAAM,IAAI9oB,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,uBAAuB/C,UACnEY,SAASC,IAAI,EAAG1B,GACpB68B,EAAI35B,SAASolB,IAKTuU,EAAM,IAAIr9B,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,4BAA4B/C,UACxEA,QAAQgD,YAAYC,UAAYtE,KAAKuE,YAAY+4B,OACrDD,EAAIp7B,SAASC,IAAI,EAAG4U,EAAAM,aAAeimB,EAAI38B,QACvCG,KAAK6C,SAAS25B,GAGdx8B,KAAK28B,aAAe,IAAIx9B,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,8BAA8B/C,SACxFR,KAAK28B,aAAav7B,SAASC,IAAI,EAAG,GAClCm7B,EAAI35B,SAAS7C,KAAK28B,cAGlB38B,KAAKk8B,UAAY,IAAI/8B,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,2BAA2B/C,SAClFR,KAAKk8B,UAAU96B,SAASC,IAAI,EAAG,GAC/Bm7B,EAAI35B,SAAS7C,KAAKk8B,WAClBl8B,KAAK48B,QAAUJ,EAAI58B,MAAQ,EAG3BI,KAAKi8B,OAAS,IAAI98B,KAAKosB,KAAK,WAAYtV,EAAA0D,eACxC3Z,KAAKi8B,OAAO9C,MAAM93B,IAAI,IACtBrB,KAAKi8B,OAAOt5B,OAAOtB,IAAI,IACvBrB,KAAKi8B,OAAO76B,SAAW,IAAIjC,KAAKqS,MAAMgrB,EAAI58B,MAAQ,EAAG48B,EAAI38B,OAAS,GAClE28B,EAAI35B,SAAS7C,KAAKi8B,QAGlBj8B,KAAKo8B,SAAW,IAAIj9B,KAAKosB,KAAK,SAASyB,EAAAzS,MAAMK,eAAkB3E,EAAAqD,YAC/DtZ,KAAKo8B,SAASz5B,OAAOtB,IAAI,EAAG,IAC5BrB,KAAKo8B,SAASh7B,SAASC,IAAIm7B,EAAI98B,EAAI88B,EAAI58B,MAAQ,EAAG48B,EAAI78B,GACtDK,KAAK6C,SAAS7C,KAAKo8B,UAGvBliB,EAAAiC,aAAaza,GAAGwY,EAAAkE,iBAAkBpe,KAAK07B,kBACvCxhB,EAAAiC,aAAaza,GAAGwY,EAAAkC,aAAcpc,KAAKy7B,kBAGhC5H,EAAA7xB,UAAAsE,SAAP,SAAgBD,GACZrG,KAAKgY,QAAQ7R,OAAY,KAALE,GAEhBrG,KAAKu8B,gBAAgBtqB,SAAWjS,KAAKw7B,gBAAkB7pB,YAAYC,QACnE5R,KAAKu8B,gBAAgBtqB,SAAU,EAC3BjS,KAAK68B,cACL78B,KAAK68B,gBAIb78B,KAAKq8B,kBAAkB55B,KAAU0O,EAAAoB,OAAOnR,SAAS1B,EAAEirB,QAAQ,GAAE,KAAKxZ,EAAAoB,OAAOnR,SAASzB,EAAEgrB,QAAQ,IASzFkJ,EAAA7xB,UAAAi0B,eAAP,SAAsB70B,EAAqD07B,EAAiBzQ,EAA+B0Q,GAA3H,IAAAj9B,EAAAE,KACQg9B,EAAM3Q,GAASpW,EAAAqD,WACf2jB,EAAU,IAAI99B,KAAKosB,KAAKuR,EAASE,GACrCD,EAAUA,GAAW,EACrBE,EAAQ77B,SAASC,IAAI4U,EAAAoC,iBAAmB0kB,EAAS9mB,EAAAM,aAAenV,EAASzB,EAAI,IAC7Es9B,EAAQr6B,MAAMvB,IAAI,EAAG,GAErBrB,KAAK6C,SAASo6B,GAEd,IAAInN,EAAM1uB,EAASzB,EAAIsW,EAAAqC,kBAAqB,KAAO,IAC/C4c,EAAMjf,EAAAM,aAAenV,EAASzB,EAAImwB,EACzB,IAAI3rB,EAAMmxB,MAAM2H,EAAQ77B,UAChCm0B,GAAG,CAAE51B,EAAGu1B,GAAO,KACbpe,QAEP,IAAIlU,EAAQ,IAAIuB,EAAMmxB,MAAM2H,EAAQr6B,OAC/B2yB,GAAG,CAAE71B,EAAG,IAAKC,EAAG,KAAO,MACvB61B,OAAOrxB,EAAMsxB,OAAOC,OAAOC,MAE5BuH,EAAO,IAAI/4B,EAAMmxB,MAAM2H,GACtB1H,GAAG,CAAE1e,MAAO,GAAK,KACjB1H,WAAW,WAAM,OAAArP,EAAK4C,YAAYu6B,KACvCr6B,EAAMmzB,MAAMmH,GAAMpmB,SAQf+c,EAAA7xB,UAAAm7B,oBAAP,SAA2BL,EAAiBzQ,GAA5C,IAAAvsB,EAAAE,KACQg9B,EAAM3Q,GAASpW,EAAA2D,iBACfqjB,EAAU,IAAI99B,KAAKosB,KAAKuR,EAASE,GACrCC,EAAQt6B,OAAOtB,IAAI,GAAK,IACxB47B,EAAQ77B,SAASC,IAAI4U,EAAAoC,iBAAkB,KAEvCrY,KAAK6C,SAASo6B,GAEd,IAAIr6B,EAAQ,IAAIuB,EAAMmxB,MAAM2H,EAAQr6B,OAC/B2yB,GAAG,CAAE71B,EAAG,IAAKC,EAAG,KAAO,MACvB61B,OAAOrxB,EAAMsxB,OAAOC,OAAOC,MAE5BuH,EAAO,IAAI/4B,EAAMmxB,MAAM2H,GACtB1H,GAAG,CAAE1e,MAAO,GAAK,KACjB1H,WAAW,WAAM,OAAArP,EAAK4C,YAAYu6B,KACvCr6B,EAAMmzB,MAAMmH,GAAMpmB,SAQf+c,EAAA7xB,UAAAo7B,gBAAP,SAAuBC,EAAaC,EAAyBT,QAAzB,IAAAS,MAAA,UAAyB,IAAAT,MAAA,MACzD78B,KAAKu8B,gBAAgB95B,KAAO46B,EAC5Br9B,KAAKs8B,MAAMrqB,SAAU,EACrBjS,KAAKu8B,gBAAgBtqB,SAAU,EAC/BjS,KAAKw7B,gBAAkB7pB,YAAYC,MAAQ0rB,EAC3Ct9B,KAAK68B,aAAeA,GAOhBhJ,EAAA7xB,UAAAm6B,gBAAR,SAAwBW,GAAxB,IAAAh9B,EAAAE,KACQg9B,EAA6B,CAC7BjkB,MAAO,SACPC,QAAS,EACTC,SAAU,OACVC,WAAYjD,EAAAyC,SACZS,KAAM,QACNC,gBAAiB,EACjBC,OAAQ,UAGR4jB,EAAU,IAAI99B,KAAKosB,KAAKuR,EAASE,GACrCC,EAAQr6B,MAAMvB,IAAI,GAClB47B,EAAQt6B,OAAOtB,IAAI,IACnB47B,EAAQ77B,SAASC,IAAI4U,EAAAoC,iBAAkBpC,EAAAM,aAAepF,EAAAoB,OAAOnR,SAASzB,EAAI,IAC1EK,KAAK6C,SAASo6B,GAEd,IAAInN,EAAM3e,EAAAoB,OAAOnR,SAASzB,EAAIsW,EAAAqC,kBAAqB,KAAO,IACtD4c,EAAMjf,EAAAM,aAAepF,EAAAoB,OAAOnR,SAASzB,EAAImwB,EAChC,IAAI3rB,EAAMmxB,MAAM2H,EAAQ77B,UAChCm0B,GAAG,CAAE51B,EAAGu1B,GAAO,KACbpe,QAEP,IAAIlU,EAAQ,IAAIuB,EAAMmxB,MAAM2H,EAAQr6B,OAC/B2yB,GAAG,CAAE71B,EAAG,IAAKC,EAAG,KAAO,MACvB61B,OAAOrxB,EAAMsxB,OAAOC,OAAOC,MAE5BuH,EAAO,IAAI/4B,EAAMmxB,MAAM2H,GACtB1H,GAAG,CAAE1e,MAAO,IAAO,KACnB1H,WAAW,WAAM,OAAArP,EAAK4C,YAAYu6B,KACvCr6B,EAAMmzB,MAAMmH,GAAMpmB,SAiDd+c,EAAA7xB,UAAA+5B,UAAR,SAAkBp7B,GACdX,KAAKi8B,OAAOx5B,KAAU0H,KAAKsgB,MAAM9pB,EAAMic,MAAMzO,EAAA0H,SAASqI,WAAU,MAAMvd,EAAMic,MAAMzO,EAAA0H,SAASoI,aAC3Fje,KAAKo8B,SAAS35B,KAAO,SAASuqB,EAAAzS,MAAMK,eAEpC,IAAIoP,EAAM7f,KAAKE,IAAI1J,EAAMic,MAAMzO,EAAA0H,SAASqI,UAAYvd,EAAMic,MAAMzO,EAAA0H,SAASoI,aAAc,GAGvF,GAAY,IAAR+L,EAGA,OAFAhqB,KAAKk8B,UAAUt8B,MAAQ,OACvBI,KAAK28B,aAAav7B,SAAS1B,EAAI,EAAIM,KAAKk8B,UAAUx8B,GAItDM,KAAK28B,aAAav7B,SAAS1B,EAAIM,KAAKk8B,UAAUt8B,MAAQI,KAAKk8B,UAAUx8B,EACrE,IAAI69B,EAAev9B,KAAK48B,QAAU5S,EAAO,EAErCwT,EAAOD,EAAcv9B,KAAKk8B,UAAUt8B,MAGxCI,KAAK28B,aAAa/8B,MAAQ,EAC1B,IAAI69B,EAAe,IAAIt5B,EAAMmxB,MAAMt1B,KAAK28B,cACnCpH,GAAG,CAAE31B,MAAO49B,GAAQ,MACpBhI,OAAOrxB,EAAMsxB,OAAOC,OAAOC,MAE5B+H,EAAY,IAAIv5B,EAAMmxB,MAAMt1B,KAAKk8B,WAChC3G,GAAG,CAAE31B,MAAO29B,GAAe,KAC3B/H,OAAOrxB,EAAMsxB,OAAOkI,OAAOC,KAChCH,EAAa1H,MAAM2H,GAAW5mB,SAEtC+c,EAvUA,CAA8B10B,KAAK0H,WAAtBvH,EAAAu0B,yGCTb/lB,EAAA1O,EAAA,IAEA+b,EAAA,SAAA3b,GAII,SAAA2b,EAAY7M,GAAZ,IAAAxO,EACIN,EAAAO,KAAAC,OAAOA,YAJMF,EAAA+9B,aAAuB,GACvB/9B,EAAAg+B,aAAuB,IAKpCh+B,EAAKyP,cAAc,IAAIzB,EAAA0B,kBAAkB,OAAQlB,EAAa,CAAC,EAAG,EAAG,EAAG,GAAIxO,EAAK+9B,aAAc/9B,EAAKg+B,eACpGh+B,EAAK6C,OAAOtB,IAAI,GAAK,IACrBvB,EAAKoP,KAAK,OAAQ,KAE1B,OAX0BtN,EAAAC,UAAAsZ,EAAA3b,GAW1B2b,EAXA,CAA0BrN,EAAAkD,gBAAb1R,EAAA6b,qGCFb8Y,EAAA,SAAAz0B,GAQI,SAAAy0B,EAAYC,EAAoBC,EAAoB/mB,QAAxC,IAAA8mB,MAAA,QAAoB,IAAAC,MAAA,GAAhC,IAKQ4J,EACAC,EACAC,EACAC,EACAC,EATRr+B,EACIN,EAAAO,KAAAC,OAAOA,KAEPF,EAAK8C,MAAMvB,IAAI,GAAI,GASnB,IAUI4mB,EAVAmW,EAA4BhxB,EAAS,IACrC8mB,EAAS,GAAK9mB,EAAS5E,OAAS,KAChCu1B,EAAqB3wB,EAAS,GAC9B4wB,EAAsB5wB,EAAS,IAE/B+mB,EAAS,IACT8J,EAAoB7wB,EAAS,GAC7B8wB,EAAqB9wB,EAAS,GAC9B+wB,EAAsB/wB,EAAS,IAGnC,IAAI1N,EAAI,EAKJq+B,IACAv9B,EAAUrB,KAAKmE,OAAOC,UAAUw6B,GAAoBv9B,SACpDynB,EAAM,IAAI9oB,KAAK+E,OAAO1D,IAClBY,SAASC,IAAI3B,EAAE,EAAG,GACtBA,GAAKc,EAAQZ,MACbE,EAAK+C,SAASolB,IAMlB,IAAIznB,EAAUrB,KAAKmE,OAAOC,UAAU66B,GAAmB59B,QACvD,GAAI0zB,EAAS,EAAG,CACZ,IAAImK,EAAI79B,EAAQZ,MAAQs0B,EACpBoK,EAAI99B,EAAQX,QAChBooB,EAAM,IAAI9oB,KAAKo/B,OAAOC,aAAah+B,EAAS69B,EAAGC,IAC3Cl9B,SAASC,IAAI3B,EAAG,GACpBA,GAAK2+B,OAELpW,EAAM,IAAI9oB,KAAK+E,OAAO1D,IAClBY,SAASC,IAAI3B,EAAG,GACpBA,GAAKuoB,EAAIroB,MAEbE,EAAK+C,SAASolB,GAKV+V,IACAx9B,EAAUrB,KAAKmE,OAAOC,UAAUy6B,GAAqBx9B,SACrDynB,EAAM,IAAI9oB,KAAK+E,OAAO1D,IAClBY,SAASC,IAAI3B,EAAG,EAAG,GACvBA,GAAKuoB,EAAIroB,MACTE,EAAK+C,SAASolB,IAMlB,IAAIwW,EAASvK,EAAS,EACtB,GAAIC,EAAS,EACT,IAASz0B,EAAI,EAAGA,EAAI++B,EAAQ/+B,IAAK,CAC7B,IAAI2I,EAEAA,EADM,IAAN3I,EACOw+B,EAGAx+B,IAAM++B,EAAS,EACfN,EAEAF,EAGX,IAAK,IAAIt+B,EAAI,EAAGA,EAAIw0B,EAAQx0B,IACxBa,EAAUrB,KAAKmE,OAAOC,UAAU8E,GAAM7H,SACtCynB,EAAM,IAAI9oB,KAAK+E,OAAO1D,IAClBY,SAASC,IAAI3B,EAAIuoB,EAAIroB,MAAOD,EAAIsoB,EAAIpoB,QACxCC,EAAK+C,SAASolB,YAKlC,OAlG8BrmB,EAAAC,UAAAoyB,EAAAz0B,GAkG9By0B,EAlGA,CAA8B90B,KAAK0H,WAAtBvH,EAAA20B,yGCAPyK,EAAiB,mCACjBC,EAAgB,yCAChBC,EAAWz0B,KAAKutB,GAAK,EAE3BtD,EAAA,SAAA50B,GAGI,SAAA40B,IAAA,IAAAt0B,EACIN,EAAAO,KAAAC,KAAMb,KAAKmE,OAAOC,UAAUm7B,GAAgBl+B,UAAQR,YAQjDF,EAAAwG,SAAW,SAACD,GACf,IAAIw4B,EAAM/+B,EAAKg/B,MAAMzT,SAAYuT,EAAWv4B,EAAK,IACjDvG,EAAKg/B,MAAMzT,SAAWwT,EAAM10B,KAAKutB,IATjC53B,EAAKg/B,MAAQ,IAAI3/B,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAUo7B,GAAen+B,SAClEV,EAAKg/B,MAAMn8B,OAAOtB,IAAI,IACtBvB,EAAKg/B,MAAM3F,MAAM93B,IAAI,IACrBvB,EAAK+C,SAAS/C,EAAKg/B,OACnBh/B,EAAK6C,OAAOtB,IAAI,MAOxB,OAhB4BO,EAAAC,UAAAuyB,EAAA50B,GAgB5B40B,EAhBA,CAA4Bj1B,KAAK+E,QAApB5E,EAAA80B,4FCJb,IAAA7hB,EAAAnT,EAAA,IACA2/B,EAAA3/B,EAAA,KAKA4tB,EAAA5tB,EAAA,IAEA8O,EAAA9O,EAAA,IACA4O,EAAA5O,EAAA,IACA+R,EAAA/R,EAAA,GACA+O,EAAA/O,EAAA,IAKAi1B,EAAA,WAII,SAAAA,EAAoB2K,GAAAh/B,KAAAg/B,YAHZh/B,KAAAi/B,WAAgC,GAIpCj/B,KAAKuJ,IAAMvJ,KAAKg/B,UAAUlL,WA6RlC,OAvRWO,EAAAryB,UAAAkQ,MAAP,eAAApS,EAAAE,KACIA,KAAKi/B,WAAWl6B,QAAQ,SAACm6B,EAAIh3B,GACrBg3B,GAAMH,EAAAI,WAAWxJ,OACL71B,EAAKs/B,UAAUl3B,GACrBwkB,eAAkB,KAGhC1sB,KAAKi/B,WAAa,IAOf5K,EAAAryB,UAAAq0B,YAAP,SAAmB7J,GAEf,IAAI6S,EAAQr/B,KAAKs/B,kBAAkB9S,GAC/B6S,IACAA,EAAM3S,iBACN1sB,KAAKuJ,IAAI4zB,oBAAoB,aAAakC,EAAM3S,eAAc,MAAM2S,EAAM5S,aACtE4S,EAAM3S,gBAAkB2S,EAAM5S,cAC9BzsB,KAAKu/B,cAAcF,EAAMryB,GAAI+xB,EAAAI,WAAWK,WACpCH,EAAMI,cACNz/B,KAAKuJ,IAAI6zB,gBAAgBiC,EAAMI,iBAUxCpL,EAAAryB,UAAA8wB,mBAAP,SAA0BhnB,GACtB,IAAKA,IAAYA,EAAQ4zB,QACrB,OAAO,EAIX,GAAItvB,MAAMuvB,QAAQ7zB,EAAQ8zB,WACtB,IAAK,IAAInzB,EAAI,EAAGA,EAAIX,EAAQ8zB,UAAUp3B,OAAQiE,IAAK,CAC/C,IAAIozB,EAAa/zB,EAAQ8zB,UAAUnzB,GAC/BvK,EAAQlC,KAAKi/B,WAAWY,GAC5B,IAAK39B,GAASA,GAAS68B,EAAAI,WAAWW,SAC9B,OAAO,EAMnB,OADuBh0B,EAAQi0B,aADb,SAEOpuB,YAAYC,OAOlCyiB,EAAAryB,UAAAgxB,mBAAP,SAA0BnnB,GAA1B,IAAA/L,EAAAE,KACQwK,EAAM+H,EAAOqC,SACb9I,EAA8BD,EAAK+mB,QAGnC1wB,EAAQiI,KAAKkN,IAAIrX,KAAKggC,cAAcl0B,EAAQ4zB,SAAU5zB,EAAQ5J,OAAS,GAG3E,GAAIlC,KAAK8yB,mBAAmBhnB,GAAU,CAClCA,EAAQi0B,WAAapuB,YAAYC,MAEjC,IAAIquB,EAAejgC,KAAKo/B,UAAUtzB,EAAQ4zB,SAE1C,OAAQ5zB,EAAQ4zB,SACZ,KAAK,EACGx9B,IAAU68B,EAAAI,WAAWxJ,OAErB31B,KAAKu/B,cAAczzB,EAAQ4zB,QAASX,EAAAI,WAAWK,WAC/Cx/B,KAAKg/B,UAAU5L,mBAAoB,EAEnCpzB,KAAKuJ,IAAI6zB,gBAAgB6C,EAAMC,WAAY,IAAM,WAC7CpgC,EAAKyJ,IAAI6zB,gBAAgB6C,EAAMR,aAAc,IAAM,WAC/C3/B,EAAKk/B,UAAU5L,mBAAoB,EACnCtzB,EAAKy/B,cAAczzB,EAAQ4zB,QAASX,EAAAI,WAAWgB,UAC/CrgC,EAAKsgC,YAAYH,GAEjBngC,EAAKy/B,cAAczzB,EAAQ4zB,QAAU,EAAGX,EAAAI,WAAWkB,YACnDJ,EAAQngC,EAAKs/B,UAAUtzB,EAAQ4zB,QAAU,GACzC5/B,EAAKyJ,IAAI6zB,gBAAgB6C,EAAMC,WAAY,UAIvD,MAEJ,KAAK,EACGlgC,KAAKggC,cAAc,GAAKjB,EAAAI,WAAWgB,WAC/Bj+B,IAAU68B,EAAAI,WAAWkB,YACrBrgC,KAAKu/B,cAAczzB,EAAQ4zB,QAASX,EAAAI,WAAWK,WAE/Cx/B,KAAKuJ,IAAI6zB,gBAAgB6C,EAAMR,aAAc,IAAM,WAC/C3/B,EAAKk/B,UAAU5L,mBAAoB,EACnCtzB,EAAKy/B,cAAczzB,EAAQ4zB,QAASX,EAAAI,WAAWgB,UAC/CrgC,EAAKsgC,YAAYH,GAGjBA,EAAQngC,EAAKs/B,UAAUtzB,EAAQ4zB,QAAU,GACzC5/B,EAAKy/B,cAAczzB,EAAQ4zB,QAAU,EAAGX,EAAAI,WAAWkB,YACnDvgC,EAAKyJ,IAAI6zB,gBAAgB6C,EAAMC,eAE5Bh+B,GAAS68B,EAAAI,WAAWgB,WAC3BF,EAAQjgC,KAAKo/B,UAAUtzB,EAAQ4zB,QAAU,GACzC1/B,KAAKuJ,IAAI6zB,gBAAgB6C,EAAMC,WAAY,OAGnD,MAEJ,KAAK,EACGh+B,IAAU68B,EAAAI,WAAWkB,aACrBrgC,KAAKu/B,cAAczzB,EAAQ4zB,QAASX,EAAAI,WAAWgB,UAC/CngC,KAAKogC,YAAYH,GACjBjgC,KAAKg/B,UAAU5L,mBAAoB,EACnCpzB,KAAKuJ,IAAI6zB,gBAAgB6C,EAAMR,aAAc,IAAM,WAC/CltB,EAAOqC,SAASjM,cAAc,YAElCqkB,EAAAzS,MAAMgD,eAAc,GACpBvP,EAAAa,IAAIyxB,OAER,MAEJ,KAAK,IACDtgC,KAAKugC,oBAAoBN,EAAO/9B,EAAO2J,EAAM,CACzC,WACe0G,EAAOC,eAAeguB,eAAe,kBAC3CvuB,SAAU,EACf,IAAIwuB,EAAY3gC,EAAK4gC,eAAe,QACpC5gC,EAAKk/B,UAAUhJ,aAAayK,GAAM,IAEtC,aACA,WACI3gC,EAAKy/B,cAAczzB,EAAQ4zB,QAASX,EAAAI,WAAWgB,UAC/CrgC,EAAKsgC,YAAYH,GACjBngC,EAAKk/B,UAAU5L,mBAAoB,EAEnCpG,EAAAzS,MAAMgD,eAAc,GAEpBvP,EAAAa,IAAIyxB,MACJxgC,EAAKyJ,IAAI0I,SAAU,EACnB,IAAI0uB,EAAKn2B,EAAI/B,SAAS,YACtBk4B,EAAGC,QAAQX,EAAMY,YAAa1vB,EAAA0I,aAC9B,IAAIinB,EAAKt2B,EAAIhB,eACbm3B,EAAGpN,cAAcuN,EAAIhhC,EAAKk/B,UAAUp8B,OACpC4H,EAAI7B,cAAcg4B,MAG1B,MAMJ,KAAK,IACD3gC,KAAKugC,oBAAoBN,EAAO/9B,EAAO2J,EAAM,CACzC,WAAQmhB,EAAAzS,MAAM2gB,cAAe,GAC7B,aACA,aACA,eAEJ,MAMJ,QACIl7B,KAAKugC,oBAAoBN,EAAO/9B,EAAO2J,MAa/CwoB,EAAAryB,UAAAu+B,oBAAR,SAA4BlB,EAAcn9B,EAAmB2J,EAAMoY,GAC/D,IAAInY,EAA8BD,EAAK+mB,QACvC,OAAQ1wB,GACJ,KAAK68B,EAAAI,WAAWxJ,KACZ31B,KAAKu/B,cAAcF,EAAMryB,GAAI+xB,EAAAI,WAAWkB,YACxCrgC,KAAKuJ,IAAI6zB,gBAAgBiC,EAAMa,YAC/B,MACJ,KAAKnB,EAAAI,WAAWkB,WACZrgC,KAAKuJ,IAAI6zB,gBAAgBiC,EAAM0B,cAC/B,MACJ,KAAKhC,EAAAI,WAAWK,UACRH,EAAM7S,QAAU6S,EAAM3S,gBAAkB2S,EAAM5S,aAC9CzsB,KAAKu/B,cAAcF,EAAMryB,GAAI+xB,EAAAI,WAAWgB,UACxCr0B,EAAQi0B,WAAa,GAErB//B,KAAKuJ,IAAI6zB,gBAAgBiC,EAAMI,cAEnC,MACJ,KAAKV,EAAAI,WAAWgB,SACZngC,KAAKuJ,IAAI6zB,gBAAgBiC,EAAMwB,aAC/B7gC,KAAKogC,YAAYf,GACjBr/B,KAAKg/B,UAAUhJ,aAAanqB,GAAM,GAGtCoY,GAAWA,EAAQ/hB,IACnB+hB,EAAQ/hB,MAIRmyB,EAAAryB,UAAAo+B,YAAR,SAAoBf,GAChBrxB,EAAAa,IAAIunB,YACAiJ,EAAMzS,WACNI,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAASgH,SAAUwiB,EAAMzS,WAI5CyS,EAAM1S,aACNK,EAAAzS,MAAMoB,aAAaxN,EAAA0H,SAAS6G,MAAO2iB,EAAM1S,aAI7C3sB,KAAKu/B,cAAcF,EAAMryB,GAAI+xB,EAAAI,WAAWW,WAGpCzL,EAAAryB,UAAAo9B,UAAR,SAAkBM,GAKd,OAJantB,EAAO4F,iBAAiBC,OAAOpQ,OAAO,SAACukB,GAChD,OAAOA,EAAEvf,KAAO0yB,IAEM,IAItBrL,EAAAryB,UAAAs9B,kBAAR,SAA0B9S,GAA1B,IAAA1sB,EAAAE,KACQoY,EAAS7F,EAAO4F,iBAAiBC,OAAOpQ,OAAO,SAACukB,GAChD,GAAIA,EAAEC,SAAWA,EAAQ,CACrB,IAAItqB,EAAQpC,EAAKkgC,cAAczT,EAAEvf,IACjC,OAAO9K,EAAQ68B,EAAAI,WAAWK,WAAat9B,EAAQ68B,EAAAI,WAAWxJ,KAE9D,OAAO,IAEX,OAAIvd,EAAO5P,OAAS,EACT4P,EAAO,GAEP,MAOPic,EAAAryB,UAAAu9B,cAAR,SAAsBG,EAAiBx9B,GACnClC,KAAKi/B,WAAWS,GAAWx9B,GAMvBmyB,EAAAryB,UAAAg+B,cAAR,SAAsBN,GAClB,OAAO1/B,KAAKi/B,WAAWS,IAAYX,EAAAI,WAAWxJ,MAO1CtB,EAAAryB,UAAA0+B,eAAR,SAAuBr4B,GACnB,IAAI24B,OAAYx6B,EAOhB,OANA0H,EAAAqC,IAAIyQ,OAAOjc,QAAQ,SAAC8G,GAChB,IAAIZ,EAAUY,EAAKkI,cACf9I,GAAWA,EAAQ5C,OAASA,IAC5B24B,EAAYn1B,KAGbm1B,GAEf3M,EAlSA,GAAa/0B,EAAA+0B,kGCfb,SAAY8K,GACRA,IAAA,eAKAA,IAAA,2BAKAA,IAAA,yBAKAA,IAAA,uBAKAA,IAAA,uBArBJ,CAAY7/B,EAAA6/B,aAAA7/B,EAAA6/B,WAAU,mGCDtBhuB,EAAA/R,EAAA,GACA6W,EAAA7W,EAAA,IAKAquB,EAAA,SAAAjuB,GAQI,SAAAiuB,EAAYjjB,GAAZ,IAAA1K,EACIN,EAAAO,KAAAC,KAAMwK,EAAK,YAAUxK,YAPjBF,EAAAmhC,kBAA4B,EAY7BnhC,EAAAmJ,WAAY,WACEnJ,EAAK+H,aAAa8lB,iBAAiB7iB,SAASo2B,KAAK,SAACC,EAAKvM,GAAO,MAAY,eAAZuM,EAAI94B,OACvE4J,SAAU,GAEnBnS,EAAAgJ,aAAc,WACAhJ,EAAK+H,aAAa8lB,iBAAiB7iB,SAASo2B,KAAK,SAACC,EAAKvM,GAAO,MAAY,eAAZuM,EAAI94B,OACvE4J,SAAU,GAElBnS,EAAAyyB,MAAQ,WACZ,IAAI6O,EAAQ,IAAIjwB,EAAAhS,KAAKosB,KAAK,UAAWtV,EAAAqD,YACrCxZ,EAAK+C,SAASu+B,GACdA,EAAMz+B,OAAOtB,IAAI,IACjB+/B,EAAM1hC,EAAIuW,EAAAoC,iBACV+oB,EAAMzhC,EAAI,GAEV,IAAI0hC,EAASprB,EAAAsC,UAAY,EACrB5Y,EAAIsW,EAAAM,aAAeN,EAAAuC,WAAa6oB,EAKhCC,EAAU,IAAInwB,EAAA5R,OAAO,6BAA8B8hC,EAAQ1hC,EAAGsW,EAAAsC,UAAWtC,EAAAuC,YAC7E8oB,EAAQ7+B,KAAO,IAAI0O,EAAAhS,KAAKosB,KAAK,eAAgBtV,EAAA6C,WAC7CwoB,EAAQx+B,QAAU,WAEdhD,EAAK+H,aAAayB,yBAEtBxJ,EAAK+C,SAASy+B,IA/BdxhC,EAAKkJ,gBAAkBiN,EAAA0C,gBACvB7Y,EAAKyyB,UAgCb,OA3CkC3wB,EAAAC,UAAA4rB,EAAAjuB,GA2ClCiuB,EA3CA,CAAkCtc,EAAA5G,OAArBjL,EAAAmuB,6GCNb8T,EAAAniC,EAAA,KACAoiC,EAAApiC,EAAA,KACA4O,EAAA5O,EAAA,IACA+R,EAAA/R,EAAA,GAGAsuB,EAAA,SAAAluB,GAUI,SAAAkuB,EAAYljB,GAAZ,IAAA1K,EACIN,EAAAO,KAAAC,KAAMwK,EAAK,aAAWxK,YAPlBF,EAAA2hC,YAAsB,EA6CvB3hC,EAAAmJ,WAAa,WAOhB,GANAnJ,EAAK4hC,YAAYzvB,SAAWnS,EAAK2hC,WACjC3hC,EAAK6hC,QAAQ1vB,SAAWnS,EAAK2hC,WAC7B3hC,EAAK8hC,OAAO3vB,QAAUnS,EAAK2hC,WAC3B3hC,EAAK8hC,OAAOh/B,MAAMvB,IAAI,IACtBvB,EAAK4hC,YAAYj/B,KAAKA,KAAO3C,EAAK2hC,WAAa,QAAU,WAErD3hC,EAAK2hC,WAAY,CACjB,IAAII,EAAe7zB,EAAAa,IAAIizB,SAAS,aAChC9zB,EAAAa,IAAI4lB,UAAUoN,KA6Dd/hC,EAAAiiC,cAA0B,CAC9B,gCACA,oEACA,+BACA,iCACA,8FACA,mDACA,uEACA,WAnHAjiC,EAAKkJ,gBAAkB,QAEvBlJ,EAAK8hC,OAAS,IAAIziC,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,wBAAwB/C,SAC5EV,EAAK8hC,OAAOj/B,OAAOtB,IAAI,IACvBvB,EAAK8hC,OAAOzI,MAAM93B,IAAI,IACtBvB,EAAK8hC,OAAOxgC,SAASC,IAAI8P,EAAAkH,iBAAkBlH,EAAAmH,mBAC3CxY,EAAK+C,SAAS/C,EAAK8hC,QAEnB9hC,EAAKkiC,iBAAmB,IAAI7iC,KAAKgD,QAAQ8/B,WACzCniC,EAAK8hC,OAAOz/B,QAAU,CAACrC,EAAKkiC,kBAG5BliC,EAAK6hC,QAAU,IAAIxiC,KAAK+E,OAAO/E,KAAKmE,OAAOC,UAAU,uBAAuB/C,SAC5EV,EAAK6hC,QAAQh/B,OAAOtB,IAAI,IACxBvB,EAAK6hC,QAAQvgC,SAASC,IAAI8P,EAAAkH,iBAAkBlH,EAAAoF,aAAe,GAC3DzW,EAAK+C,SAAS/C,EAAK6hC,SAEnB7hC,EAAKoiC,YAAc,IAAI/iC,KAAKosB,KAAK,IACjCzrB,EAAKoiC,YAAYv/B,OAAOtB,IAAI,IAC5BvB,EAAKoiC,YAAY9gC,SAASC,IAAI,EAAG,GACjCvB,EAAK6hC,QAAQ9+B,SAAS/C,EAAKoiC,aAK3BpiC,EAAK4hC,YAAc,IAAIF,EAAAjiC,OAAS,8BACC4R,EAAAmF,YAAcnF,EAAAoH,WAAa,EAC5BzY,EAAK6hC,QAAQ9hC,OAASsR,EAAAqH,WACtBrH,EAAAoH,UACApH,EAAAqH,YAChC1Y,EAAK4hC,YAAYj/B,KAAO,IAAItD,KAAKosB,KAAK,WAAYpa,EAAA2H,WAClDhZ,EAAK4hC,YAAY5+B,QAAU,WACvBhD,EAAK+H,aAAac,cAAc,WAEpC7I,EAAK+C,SAAS/C,EAAK4hC,eAmF3B,OAjI8B9/B,EAAAC,UAAA6rB,EAAAluB,GA8DnBkuB,EAAA1rB,UAAAsE,SAAP,SAAgBD,GACZ,GAAIrG,KAAKyhC,WACL,GAAIzhC,KAAK4hC,OAAOh/B,MAAMlD,EAAI,IAAK,CAC3BM,KAAK4hC,OAAOvW,UAAY,IACxB,IAAIzoB,EAAQ5C,KAAK4hC,OAAOh/B,MAAMlD,EAAI,IAClCM,KAAK4hC,OAAOh/B,MAAMvB,IAAIuB,QAGtB5C,KAAKyhC,YAAa,EAClBzhC,KAAKkiC,YAAYz/B,KAAOzC,KAAK+hC,cAAc,EAAK53B,KAAKskB,SAAWzuB,KAAK+hC,cAAcv5B,QACnFxI,KAAK2hC,QAAQ1vB,SAAU,EACvBjS,KAAK0hC,YAAYzvB,SAAU,OAG/BjS,KAAK4hC,OAAOvW,UAAY,KAG5B,IAAI8W,EAAMh4B,KAAKkN,IAAI,EAAGrX,KAAKgiC,iBAAiBI,KAAO,MACnDpiC,KAAKgiC,iBAAiBI,KAAOD,GAMjCrgC,OAAAC,eAAW2rB,EAAA1rB,UAAA,aAAU,KAArB,WACI,OAAOhC,KAAKyhC,gBAEhB,SAAsBl/B,GAElB,GADAvC,KAAKyhC,WAAal/B,EACdvC,KAAKyhC,WAAY,CACjBzhC,KAAKgiC,iBAAiBI,KAAO,EAC7B,IAAIC,EAAM,IAAIljC,KAAKgD,QAAQmgC,kBAC3BD,EAAIE,QACJviC,KAAKwiC,WAAWrgC,QAAU,CAACkgC,QAE3BriC,KAAKwiC,WAAWrgC,QAAU,sCAK3BurB,EAAA1rB,UAAAuxB,cAAP,SAAqB/yB,EAA6BoC,GACzC5C,KAAKwiC,WAINxiC,KAAKwiC,WAAWhiC,QAAUA,GAH1BR,KAAKwiC,WAAa,IAAIrjC,KAAK+E,OAAO1D,GAClCR,KAAK+K,WAAW/K,KAAKwiC,WAAY,IAIrCxiC,KAAKwiC,WAAW5/B,MAAMvB,IAAI,EAAIuB,EAAMlD,EAAG,EAAIkD,EAAMjD,IAG9C+tB,EAAA1rB,UAAA4+B,QAAP,SAAen+B,EAAc4pB,GACzBrsB,KAAKkiC,YAAYz/B,KAAOA,EACpB4pB,IACArsB,KAAKkiC,YAAY7V,MAAQ,IAAIltB,KAAKsjC,UAAUpW,KAcxDqB,EAjIA,CAA8B6T,EAAAh3B,OAAjBjL,EAAAouB,6FCJFpuB,EAAA6c,aAAe,IAAIhd,KAAKujC,MAAMC,aAC9BrjC,EAAAm5B,WAAa,OACbn5B,EAAAid,WAAa,OACbjd,EAAA8e,iBAAmB,aACnB9e,EAAA8c,aAAe,SAGf9c,EAAAk1B,aAAe,0FCT1B,IAAAoO,EAAAxjC,EAAA,KAEAyjC,EAAA,WAoCI,SAAAA,IAdQ7iC,KAAA8iC,gBAAiC,CACrC,qCACA,6CACA,gCACA,0CACA,4BACA,8CACA,0BACA,6BACA,gCAEI9iC,KAAA+iC,YAA2B,GAC3B/iC,KAAAgjC,aAAuB,EA+HvBhjC,KAAAijC,oBAAsB,GACtBjjC,KAAAkjC,iBAAmB,EAEnBljC,KAAAmjC,YAAc,GACdnjC,KAAAojC,SAAW,EAhIf,IAAK,IAAI32B,EAAI,EAAGqF,EAAM9R,KAAK8iC,gBAAgBt6B,OAAQiE,EAAIqF,EAAKrF,IAAK,CAC7D,IAAI42B,EAAYrjC,KAAK8iC,gBAAgBr2B,GACrCzM,KAAK+iC,YAAYn7B,KAAK,IAAIg7B,EAAAU,KAAK,CAC3BruB,IAAK,CAACouB,GACNE,UAAU,EACVC,MAAM,EACNC,OAAQ,MAIhBzjC,KAAK0jC,QAAU,IAAId,EAAAU,KAAK,CACpBruB,IAAK,CAAC,iCACN0uB,SAAS,EACTJ,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAK4jC,SAAW,IAAIhB,EAAAU,KAAK,CACrBruB,IAAK,CAAC,kCACN0uB,SAAS,EACTJ,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAK6jC,SAAW,IAAIjB,EAAAU,KAAK,CACrBruB,IAAK,CAAC,kCACN0uB,SAAS,EACTJ,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAK8jC,QAAU,IAAIlB,EAAAU,KAAK,CACpBruB,IAAK,CAAC,iCACN0uB,SAAS,EACTJ,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAK+jC,QAAU,IAAInB,EAAAU,KAAK,CACpBruB,IAAK,CAAC,iCACN0uB,SAAS,EACTJ,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKgkC,QAAU,IAAIpB,EAAAU,KAAK,CACpBruB,IAAK,CAAC,iCACN0uB,SAAS,EACTJ,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKikC,OAAS,IAAIrB,EAAAU,KAAK,CACnBruB,IAAK,CAAC,gCACN0uB,SAAS,EACTJ,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKkkC,aAAe,IAAItB,EAAAU,KAAK,CACzBruB,IAAK,CAAC,uCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKmkC,OAAS,IAAIvB,EAAAU,KAAK,CACnBruB,IAAK,CAAC,gCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKokC,QAAU,IAAIxB,EAAAU,KAAK,CACpBruB,IAAK,CAAC,sCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKqkC,QAAU,IAAIzB,EAAAU,KAAK,CACpBruB,IAAK,CAAC,sCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKskC,QAAU,IAAI1B,EAAAU,KAAK,CACpBruB,IAAK,CAAC,uCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAKukC,KAAO,IAAI3B,EAAAU,KAAK,CACjBruB,IAAK,CAAC,mCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAGZzjC,KAAKwkC,WAAa,IAAI5B,EAAAU,KAAK,CACvBruB,IAAI,CAAC,wCACLsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAGZzjC,KAAKykC,MAAQ,IAAI7B,EAAAU,KAAK,CAClBruB,IAAK,CAAC,kCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAEZzjC,KAAK2P,OAAS,IAAIizB,EAAAU,KAAK,CACnBruB,IAAK,CAAC,uCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAGZzjC,KAAK0kC,UAAY,IAAI9B,EAAAU,KAAK,CACtBruB,IAAK,CAAC,oCACNsuB,UAAU,EACVC,MAAM,EACNC,OAAQ,IAuLpB,OA7KI3hC,OAAAC,eAAW8gC,EAAA7gC,UAAA,cAAW,KAAtB,WAA2B,OAAOhC,KAAKmjC,iBACvC,SAAuB5gC,GACnBvC,KAAKmjC,YAAc5gC,EACfvC,KAAK2kC,eAAiB3kC,KAAK2kC,cAAcC,WACzC5kC,KAAK2kC,cAAclB,OAAOzjC,KAAKmjC,8CAIvCrhC,OAAAC,eAAW8gC,EAAA7gC,UAAA,WAAQ,KAAnB,WAAwB,OAAOhC,KAAKojC,cACpC,SAAoB7gC,GAChBvC,KAAKojC,SAAW7gC,mCAIpBT,OAAAC,eAAW8gC,EAAA7gC,UAAA,SAAM,KAAjB,WAAsB,OAAOhC,KAAKojC,SAAW,OAC7C,SAAkB7gC,GACTA,EAIDvC,KAAK6kC,SAAW7kC,KAAKkjC,kBAHrBljC,KAAKkjC,iBAAmBljC,KAAKojC,SAC7BpjC,KAAK6kC,SAAW,oCAMxB/iC,OAAAC,eAAW8gC,EAAA7gC,UAAA,YAAS,KAApB,WAAyB,OAAOhC,KAAKmjC,YAAc,OACnD,SAAqB5gC,GACZA,EAIDvC,KAAK8kC,YAAc9kC,KAAKijC,qBAHxBjjC,KAAKijC,oBAAsBjjC,KAAKmjC,YAChCnjC,KAAK8kC,YAAc,oCAM3BhjC,OAAAC,eAAW8gC,EAAA7gC,UAAA,iBAAc,KAAzB,WACI,OAAOhC,KAAKgjC,8CAIhBlhC,OAAAC,eAAW8gC,EAAA7gC,UAAA,SAAM,KAAjB,WACI,OAAOhC,KAAK0kC,2CAGT7B,EAAA7gC,UAAAm2B,WAAP,WACIn4B,KAAK0jC,QAAQ5+B,QACb9E,KAAKskC,QAAQd,MAAK,GAClBxjC,KAAKskC,QAAQp1B,OACblP,KAAKskC,QAAQb,OAAOzjC,KAAKojC,WAGtBP,EAAA7gC,UAAAi2B,KAAP,WACIj4B,KAAK0jC,QAAQ5+B,QACb9E,KAAK4jC,SAAS10B,OACdlP,KAAK4jC,SAASH,OAAOzjC,KAAKojC,WAEvBP,EAAA7gC,UAAA8yB,KAAP,WACI90B,KAAK0jC,QAAQ5+B,SAEV+9B,EAAA7gC,UAAAg2B,KAAP,SAAYH,GACR73B,KAAK0jC,QAAQqB,KAAKlN,EAAY,EAAM,KAC/B73B,KAAK0jC,QAAQkB,YACd5kC,KAAK0jC,QAAQD,OAAOzjC,KAAKojC,UACzBpjC,KAAK0jC,QAAQx0B,SAGd2zB,EAAA7gC,UAAA8M,UAAP,WACI9O,KAAKokC,QAAQX,OAAOzjC,KAAKojC,UACzBpjC,KAAKokC,QAAQl1B,QAEV2zB,EAAA7gC,UAAAgjC,UAAP,WACIhlC,KAAKqkC,QAAQZ,OAAOzjC,KAAKojC,UACzBpjC,KAAKqkC,QAAQn1B,QAEV2zB,EAAA7gC,UAAAo3B,QAAP,WACIp5B,KAAKukC,KAAKd,OAAOzjC,KAAKojC,UACtBpjC,KAAKukC,KAAKr1B,QAGP2zB,EAAA7gC,UAAA8N,UAAP,WACI9P,KAAK2P,OAAO8zB,OAAOzjC,KAAKojC,UACxBpjC,KAAK2P,OAAOT,QAGT2zB,EAAA7gC,UAAAs3B,cAAP,WACIt5B,KAAKykC,MAAMhB,OAAOzjC,KAAKojC,UACvBpjC,KAAKykC,MAAMv1B,QAGR2zB,EAAA7gC,UAAAk0B,KAAP,WACIl2B,KAAKgkC,QAAQP,OAAOzjC,KAAKojC,UACzBpjC,KAAKgkC,QAAQ90B,QAGV2zB,EAAA7gC,UAAAm0B,IAAP,WACIn2B,KAAKikC,OAAOR,OAAOzjC,KAAKojC,UACxBpjC,KAAKikC,OAAO/0B,QAGT2zB,EAAA7gC,UAAAijC,KAAP,WACIjlC,KAAK+jC,QAAQN,OAAOzjC,KAAKojC,UACzBpjC,KAAK+jC,QAAQ70B,QAGV2zB,EAAA7gC,UAAAi3B,YAAP,WACIj5B,KAAKwkC,WAAWf,OAAOzjC,KAAKojC,UAC5BpjC,KAAKwkC,WAAWt1B,QAEb2zB,EAAA7gC,UAAAo0B,UAAP,WACIp2B,KAAKkkC,aAAaT,OAAOzjC,KAAKojC,UAC9BpjC,KAAKkkC,aAAah1B,QAGf2zB,EAAA7gC,UAAAs+B,IAAP,WACQtgC,KAAK2kC,eAAiB3kC,KAAK2kC,cAAcC,WACzC5kC,KAAK2kC,cAAczH,KAAK,EAAG,EAAG,KAElCl9B,KAAK+jC,QAAQmB,OACbllC,KAAK0jC,QAAQwB,OACbllC,KAAK4jC,SAASsB,OACdllC,KAAK6jC,SAASqB,OACdllC,KAAK8jC,QAAQoB,OAEbllC,KAAKmkC,OAAOV,OAAOzjC,KAAKojC,UACxBpjC,KAAKmkC,OAAOj1B,QAGT2zB,EAAA7gC,UAAAsyB,KAAP,WACSt0B,KAAK8jC,QAAQc,YACd5kC,KAAK8jC,QAAQL,OAAOzjC,KAAKojC,UACzBpjC,KAAK8jC,QAAQ50B,QAEjBlP,KAAKilC,QAEFpC,EAAA7gC,UAAAuyB,SAAP,eAAAz0B,EAAAE,KAEIA,KAAK8jC,QAAQ5G,KAAK,EAAG,EAAG,KACxBvO,WAAW,WAAM,OAAA7uB,EAAKgkC,QAAQoB,QAAQ,MAGnCrC,EAAA7gC,UAAA8/B,SAAP,SAAgBz5B,GACZ,IAAK,IAAIoE,EAAI,EAAGqF,EAAM9R,KAAK8iC,gBAAgBt6B,OAAQiE,EAAIqF,EAAKrF,IACxD,GAAIzM,KAAK8iC,gBAAgBr2B,GAAGwT,QAAQ5X,IAAS,EACzC,OAAOoE,EAGf,OAAQ,GAGLo2B,EAAA7gC,UAAAmjC,UAAP,gBAC+B3+B,IAAvBxG,KAAK2kC,eACL3kC,KAAK2kC,cAAcO,QAIpBrC,EAAA7gC,UAAAyyB,UAAP,SAAiB2Q,QACc5+B,IAAvBxG,KAAK2kC,gBACL3kC,KAAK2kC,cAAgB3kC,KAAK+iC,YAAYqC,GACtCriC,QAAQ8F,IAAI,aAAeu8B,EAASplC,KAAK2kC,gBAGzC3kC,KAAK2kC,gBAAkB3kC,KAAK+iC,YAAYqC,IACxCplC,KAAK2kC,cAAcO,OACnBllC,KAAK2kC,cAAgB3kC,KAAK+iC,YAAYqC,GACtCplC,KAAK2kC,cAAclB,OAAOzjC,KAAKmjC,aAC/BnjC,KAAK2kC,cAAcz1B,QAEdlP,KAAK2kC,cAAcC,YACpB5kC,KAAK2kC,cAAclB,OAAOzjC,KAAKmjC,aAC/BnjC,KAAK2kC,cAAcz1B,QAG3BlP,KAAKgjC,aAAeoC,GAE5BvC,EApVA,GAAavjC,EAAAujC,WAsVFvjC,EAAAuP,IAAM,IAAIg0B,+FCxVrBpkB,EAAArf,EAAA,IACAD,EAAAC,EAAA,GAEA4R,EAAA,SAAAxR,GACI,SAAAwR,IAAA,IAAAlR,EACIN,EAAAO,KAAAC,OAAOA,YAMHF,EAAAulC,WAAa,IAAI5mB,EAAAoD,WACf/hB,EAAA4O,gBAA4C,KAuB/C5O,EAAAoP,KAAO,SAAC7G,EAAcuG,EAAc40B,QAAA,IAAAA,OAAA,GAClC1jC,EAAK4O,iBAAmB5O,EAAK4O,gBAAgBY,eAAiBjH,IAC/DvI,EAAKwlC,iBACLxlC,EAAK4O,gBAAkB5O,EAAKulC,WAAW1kB,IAAItY,GAC3CvI,EAAKU,QAAUV,EAAK4O,gBAAgB4Z,aACpCxoB,EAAKU,QAAQ4oB,MAAQtpB,EAAK4O,gBAAgB62B,OAAO,GACjDzlC,EAAK0lC,WAAY,GAErB1lC,EAAK8O,IAAMA,GAAO9O,EAAK8O,IACvB9O,EAAK2lC,UAAYjC,GAGb1jC,EAAA0a,YAAsB,EACtB1a,EAAA0lC,WAAqB,EACrB1lC,EAAA2lC,WAAqB,EACrB3lC,EAAA4lC,WAAqB,EACrB5lC,EAAA6O,WAAqB,EA7CzB7O,EAAKq5B,MAAM93B,IAAI,IACfvB,EAAK6C,OAAOtB,IAAI,IAChBvB,EAAK8C,MAAMvB,IAAI,GAAI,KAmG3B,OAxGoCO,EAAAC,UAAAmP,EAAAxR,GAWzBwR,EAAAhP,UAAAuN,cAAP,mBAAAzP,EAAAE,KAAqBwN,EAAA,GAAAm4B,EAAA,EAAAA,EAAAC,UAAAp9B,OAAAm9B,IAAAn4B,EAAAm4B,GAAAC,UAAAD,GACjBn4B,EAAUzI,QAAQ,SAACqK,EAAwBwlB,GACvC90B,EAAKulC,WAAWhkC,IAAI+N,EAAIE,aAAcF,GAGjCtP,EAAKU,QAAQqlC,OAAiB,IAARjR,IACvB90B,EAAKU,QAAU4O,EAAIkZ,aACnBxoB,EAAKU,QAAQ4oB,MAAQha,EAAIm2B,OAAO,OAKrCv0B,EAAAhP,UAAA8jC,gBAAP,WACI9lC,KAAKklC,OACLllC,KAAK0O,gBAAkB,KACvB1O,KAAKqlC,WAAW5+B,SAyBbuK,EAAAhP,UAAAsE,SAAP,SAAiBD,GACb,GAAIrG,KAAKwlC,WAAaxlC,KAAKQ,QAAQqlC,OAAS7lC,KAAK0O,gBAAiB,CAC9D1O,KAAKwa,aAAenU,EACpB,IAAI0/B,EAAc,IAAO/lC,KAAK4O,IAC1B5O,KAAKwa,YAAcurB,IACnB/lC,KAAKwa,aAAeurB,EACpB/lC,KAAKQ,QAAQ4oB,MAAQppB,KAAK0O,gBAAgB62B,SAASvlC,KAAK0lC,YACpD1lC,KAAK0lC,YAAc1lC,KAAK0O,gBAAgB62B,OAAO/8B,OAAO,IACtDxI,KAAK0lC,WAAa,EAGb1lC,KAAKylC,YACNzlC,KAAKwlC,WAAY,EACbxlC,KAAKgmC,oBACLhmC,KAAKgmC,mBAAmBhmC,KAAK0O,sBAQrD5M,OAAAC,eAAWiP,EAAAhP,UAAA,aAAU,KAGrB,WACI,OAAOhC,KAAKgmC,wBAJhB,SAAsBt2B,GAClB1P,KAAKgmC,mBAAqBt2B,mCAMvBsB,EAAAhP,UAAAkjC,KAAP,WACIllC,KAAKwlC,WAAY,GAErB1jC,OAAAC,eAAWiP,EAAAhP,UAAA,MAAG,KAAd,WACI,OAAOhC,KAAK2O,gBAEhB,SAAeC,GACX5O,KAAK2O,WAAaC,mCAGtB9M,OAAAC,eAAWiP,EAAAhP,UAAA,OAAI,KAGf,WACI,OAAOhC,KAAKylC,eAJhB,SAAgBA,GACZzlC,KAAKylC,UAAYA,mCAMXz0B,EAAAhP,UAAAsjC,eAAV,WACItlC,KAAKklC,OACLllC,KAAK0O,gBAAkB,KACvB1O,KAAKwa,YAAc,EACnBxa,KAAK0lC,YAAc,GAG3B10B,EAxGA,CAAoC7R,EAAK+E,QAA5B5E,EAAA0R,iBA6Gb,IAAAxB,EAAA,WAII,SAAAA,EAAmBF,EAAsBlM,EAAyBmiC,EAA4Bva,EAAqBD,QAAjD,IAAAwa,MAAA,IAAlE,IAAAzlC,EAAAE,KAAmBA,KAAAsP,eAFZtP,KAAAulC,OAA2B,GAG9B,IAAIU,EAA4B9mC,EAAKujC,MAAMwD,aAAa9iC,GACxDpD,KAAKsoB,aAAe,IAAInpB,EAAK2E,QAAQmiC,EAAWziC,aAChD,IAAI2iC,EAAUh8B,KAAKC,MAAMpK,KAAKsoB,aAAa9kB,YAAY5D,MAAQorB,GAC/Dua,EAAOxgC,QAAQ,SAACqkB,GACZ,IAAIzpB,EAAIwK,KAAKC,MAAMgf,EAAQ+c,GACvBzmC,EAAI0pB,EAAQ+c,EACZC,EAAO,IAAIjnC,EAAK4E,UAAUrE,EAAIsrB,EAAYrrB,EAAIorB,EAAaC,EAAYD,GAC3EjrB,EAAKylC,OAAO39B,KAAKw+B,KAO7B,OAHItkC,OAAAC,eAAWyN,EAAAxN,UAAA,aAAU,KAArB,WACI,OAAOhC,KAAKulC,OAAO/8B,wCAE3BgH,EAnBA,GAAalQ,EAAAkQ,sGChHb,IAAA+C,EAAAnT,EAAA,IACA6R,EAAA7R,EAAA,IACA+R,EAAA/R,EAAA,GACA8R,EAAA9R,EAAA,IACAinC,EAAAjnC,EAAA,KACAu3B,EAAAv3B,EAAA,KAEA2tB,EAAA3tB,EAAA,KACA6W,EAAA7W,EAAA,IACA4W,EAAA5W,EAAA,IAIA8d,EAAA,WAKI,SAAAA,EAAYopB,GACRtmC,KAAKsmC,WAAaA,EAuW1B,OA/VkBppB,EAAA6W,gBAAd,SAA8B1rB,EAAak+B,GACvCvmC,KAAKwmC,YAAYnlC,IAAIgH,EAAMk+B,IAQxBrpB,EAAAlb,UAAAsb,WAAP,SAAkBtQ,GAId,IADA,IASIwd,EATAic,OAAoCjgC,EAC/BiG,EAAI,EAAGA,EAAIzM,KAAKsmC,WAAWv5B,OAAOvE,OAAQiE,IAC/C,GAAIzM,KAAKsmC,WAAWv5B,OAAON,GAAGO,KAAOA,EAAI,CACrCy5B,EAAkBzmC,KAAKsmC,WAAWv5B,OAAON,GACzC,MASR,OAHIg6B,IACAjc,EAASxqB,KAAK0mC,YAAYD,IAEvBjc,GAGHtN,EAAAlb,UAAA0kC,YAAR,SAAoB55B,GAChB,IAAI0d,EAAiB,CACjBvd,SAAU,GACVQ,SAAU,GACVqJ,MAAO,GACP4d,WAAY5nB,EAAM4nB,WAClBppB,UAAW,GACX6nB,YAAa,IAMbwT,EAAM,IAAIxnC,KAAKqS,MAAMyE,EAAAK,YAAaL,EAAAM,cACtCzJ,EAAMG,SAASlI,QAAQ,SAACmI,GACpB,IAAID,EAAW,IAAIkE,EAAAkV,SAASsgB,EAAKz5B,EAAKoZ,eAAgBpZ,EAAKE,SAAUF,EAAKtK,OAC1EqK,EAAStN,EAAIuN,EAAKvN,EAClB6qB,EAAOvd,SAASrF,KAAKqF,KAMzB,IAAI3B,EAAYiH,EAAO4F,iBAAiB7M,UAAU6B,OAAOL,EAAMO,IAAI/B,WA0BnE,OAzBAkf,EAAOlf,UAAYA,EAKnBwB,EAAMO,IAAII,SAAS1I,QAAQ,SAACwG,EAAoBqpB,EAAKzsB,GACjD,IAAIy+B,EAAS1pB,EAAYwc,aAAapuB,EAAWC,GACjDif,EAAO/c,SAAS7F,KAAKg/B,KAMzB95B,EAAMO,IAAIM,IAAMb,EAAMO,IAAIM,KAAO,GACjCb,EAAMO,IAAIM,IAAI5I,QAAQ,SAAC8hC,EAAiBjS,EAAKzsB,GACzC,GAAI0+B,EAAIt5B,MAAqB,gBAAbs5B,EAAIt5B,KAAwB,CACxC,IAAIu5B,EAAUD,EACVt7B,EAASu7B,EAAGv7B,OAChBif,EAAO2I,YAAYvrB,KAAK,IAAIy+B,EAAArY,WAAW8Y,EAAGz+B,KAAMy+B,EAAGC,GAAG,GAAID,EAAGC,GAAG,GAAID,EAAG7Y,KAAM6Y,EAAG5Y,YAAa4Y,EAAG3Y,eAAgB5iB,QAC7G,CACH,IAAIq7B,EAAS1pB,EAAYqR,UAAUjjB,EAAWu7B,GAC9Crc,EAAO/c,SAAS7F,KAAKg/B,MAG7Bpc,EAAO1T,MAAQhK,EAAMO,IAAIyJ,MAClB0T,GAGGtN,EAAAwc,aAAd,SAA2BpuB,EAAuBC,GAC9C,IAQIq7B,EARAl5B,EAAOqf,EAAA1hB,oBAAoBC,EAAWC,GAGtCN,EAA8BiS,EAAY8pB,mBAAmBt5B,EAAKtB,OA4BtE,OA3BAnB,EAAQ5C,KAAOkD,EAAOlD,MAAQkD,EAAOG,SACpCT,EAAgBkB,aAAeuB,EAAKvB,aAIjCuB,EAAKrB,QACLu6B,EAAS1pB,EAAY+pB,mBAAmBv5B,EAAKrB,MAAOpB,IAC7CqU,OAAO0b,MAAM,SAACxlB,GAQjB,MAPiC,WAA7B9H,EAAKrB,MAAM66B,eACX1xB,EAAE5C,eAAiB1B,EAAA+B,eACnBuC,EAAE1C,cAAgB5B,EAAA6B,eAAiB7B,EAAA0P,YAAc1P,EAAA8B,cAAgB9B,EAAA2B,iBAEjE2C,EAAE5C,eAAiB1B,EAAA8B,cACnBwC,EAAE1C,cAAgB5B,EAAA6B,eAAiB7B,EAAA0P,YAAc1P,EAAA8B,cAAgB9B,EAAA+B,iBAE9D,IAEV2zB,EAAe7yB,cAAgB9I,EAG5ByC,EAAK5B,UACJ86B,EAAehU,QAAUllB,EAAK5B,WAGnC86B,EAAS,IAAI31B,EAAGuC,MACAO,cAAgB9I,EAE7B27B,GAGG1pB,EAAAqR,UAAd,SAAwBjjB,EAAuBC,GAC3C,IAAImC,EAAOqf,EAAA1hB,oBAAoBC,EAAWC,GAGtC47B,EAAkBjqB,EAAY8pB,mBAAmBt5B,EAAKtB,OAC1D+6B,EAAW9+B,KAAOkD,EAAOlD,MAAQkD,EAAOG,SACvCy7B,EAAmBh7B,aAAeuB,EAAKvB,aAGxCg7B,EAAWxX,WAAapkB,EAAOokB,YAAcjiB,EAAKtB,MAAMujB,YAAc,GACtEwX,EAAWx2B,SAASpF,EAAO67B,IAAM,gBACjCD,EAAWj3B,WAAa3E,EAAOsC,QAAUH,EAAKtB,MAAMyB,OAGpDH,EAAKrB,MAAMoU,SAAW/S,EAAKrB,MAAMoU,UAAY,cAC7C,IAAImmB,EAAkB1pB,EAAY+pB,mBAAmBv5B,EAAKrB,MAAO86B,GAajE,OAZAP,EAAOtnB,OAAO0b,MAAM,SAACxlB,GAGjB,OAFAA,EAAE5C,eAAiB1B,EAAA0P,YACnBpL,EAAE1C,cAAgB5B,EAAA6B,eAAiB7B,EAAA+B,eAAiB/B,EAAA8B,eAC7C,IAEV4zB,EAAe7yB,cAAgBozB,EAG5Bz5B,EAAK5B,UACJ86B,EAAehU,QAAUllB,EAAK5B,SAG5B86B,GAOI1pB,EAAA8pB,mBAAf,SAAkCK,GAC9B,IAAIp8B,EACJ,OAAQo8B,EAAWz7B,UACf,IAAK,MACD,IAAI07B,EAAM,IAAI3Q,EAAAtoB,IAAIg5B,EAAW7mC,SAEzB6mC,EAAW75B,YACX85B,EAAIxB,kBACJuB,EAAW75B,UAAUzI,QAAQ,SAACqK,GAC1B,IAAId,EAAcc,EAAI5O,SAAW6mC,EAAW7mC,QACxC+mC,EAAO,IAAIp2B,EAAA3B,kBAAkBJ,EAAI/G,KAAMiG,EAAuBc,EAAIm2B,OAAQn2B,EAAIo4B,UAAU,GAAIp4B,EAAIo4B,UAAU,IAC9GF,EAAI/3B,cAAcg4B,KAEtBD,EAAIp4B,KAAKm4B,EAAW75B,UAAU,GAAGnF,OAEjCg/B,EAAWz4B,MACX04B,EAAI14B,IAAMy4B,EAAWz4B,KAEzB04B,EAAI3kC,OAAOtB,IAAI,GAAK,IACnBimC,EAAY17B,SAAW,MACxBX,EAAUq8B,EACV,MAEJ,IAAK,UACDr8B,EAAU,IAAI9L,KAAK4U,eACFnI,SAAW,SAC5B,MAEJ,IAAK,iBACD,IAAI67B,EAAO,IAAIt2B,EAAAH,eACfq2B,EAAW75B,UAAUzI,QAAQ,SAACqK,EAAKwlB,EAAKzsB,GACpC,IAAIo/B,EAAO,IAAIp2B,EAAA3B,kBAAkBJ,EAAI/G,KAAM+G,EAAI5O,QAAS4O,EAAIm2B,OAAQn2B,EAAIo4B,UAAU,GAAIp4B,EAAIo4B,UAAU,IACpGC,EAAKl4B,cAAcg4B,KAEvBE,EAAKv4B,KAAKm4B,EAAW75B,UAAU,GAAGnF,KAAMg/B,EAAWz4B,KACnD64B,EAAK9kC,OAAOtB,IAAI,GAAK,IACpBomC,EAAa77B,SAAW,iBACzBX,EAAUw8B,EACV,MAEJ,IAAK,SACD,IAAIhlC,EAAOtD,KAAKmE,OAAOC,UAAU8jC,EAAW7mC,SAAmBA,QAC3DynB,EAAM,IAAI9oB,KAAK+E,OAAOzB,QAEA+D,IAAtB6gC,EAAW1kC,SACX0kC,EAAW1kC,OAAS,IACxBslB,EAAItlB,OAAOtB,IAAIgmC,EAAW1kC,aAED6D,IAArB6gC,EAAWlO,QACXkO,EAAWlO,MAAQ,SAEE3yB,IAArB6gC,EAAWzkC,QACXykC,EAAWzkC,MAAQ,CAAC,GAAI,IAE5BqlB,EAAIkR,MAAM93B,IAAIgmC,EAAWlO,OACxBlR,EAAYrc,SAAW,SACxBX,EAAUgd,EACV,MAYJ,QACI,IAAIse,EAAUvmC,KAAKwmC,YAAY7lB,IAAI0mB,EAAWz7B,UAC9C,IAAG26B,EAGC,KAAM,sCAAwCc,EAAWz7B,SAFzDX,EAAUs7B,EAAQc,GAyB9B,YAnB2B7gC,IAAvB6gC,EAAWp1B,UACXhH,EAAQgH,QAAUo1B,EAAWp1B,SAEjChH,EAAQogB,SAAWgc,EAAWhc,UAAY,EACtCgc,EAAWN,IACX97B,EAAQ7J,SAASC,IAAIgmC,EAAWN,GAAG,GAAIM,EAAWN,GAAG,IAErDM,EAAWzkC,OACXqI,EAAQrI,MAAMvB,IAAIgmC,EAAWzkC,MAAM,GAAIykC,EAAWzkC,MAAM,IAExDykC,EAAW51B,kBACVxG,EAA6BwG,gBAAkB41B,EAAW51B,iBAE3D41B,EAAWt7B,OACVd,EAA6Bc,KAAOs7B,EAAWt7B,MAEhDs7B,EAAWnkC,OACV+H,EAAgB/H,KAAOwkC,SAASL,EAAWnkC,KAAM,KAE/C+H,GAUIiS,EAAA+pB,mBAAf,SAAkCI,EAA6Bp8B,EAA6B08B,GACxF,IAAI97B,OADoF,IAAA87B,OAAA,GAExF,IAAItJ,EAAI,EAAGC,EAAI,EACf,GAAI+I,EAAY,CACZ,IAAI/iC,EAA0B,CAC1B6O,KAAMk0B,EAAWl0B,KACjB/R,SAAUimC,EAAWN,GAAKM,EAAWN,GAAK,CAAC97B,EAAQvL,EAAGuL,EAAQtL,GAC9DyT,MAAOi0B,EAAWj0B,OAASnI,EAAQogB,SACnChY,cAAeg0B,EAAWh0B,gBAAiB,EAC3CC,eAAgB+zB,EAAW/zB,gBAAkB,GAC7CC,QAAS8zB,EAAW9zB,SAAW,KAGnC1H,EAAO,IAAIoF,EAAGuC,KAAKlP,IACdiJ,KAAO85B,EAAW95B,MAAQ0D,EAAGuC,KAAKo0B,UACvC,IACIn1B,EADAo1B,EAAoB58B,EAExB,OAAQo8B,EAAW50B,OACf,IAAK,SACD,IAAIE,EAAS,GAGLA,EAFJ00B,EAAW3hC,KACP2hC,EAAW3hC,KAAKyK,cAAgBC,MACvBi3B,EAAW3hC,KAAK,GAEhB2hC,EAAW3hC,KAGfmiC,EAAajoC,MAE1B6S,EAAQ,IAAIxB,EAAGyB,OAAO,CAAEC,OAAQA,IAChC,MAEJ,IAAK,WACG00B,EAAW3hC,MACX24B,EAAIgJ,EAAW3hC,KAAK,GACpB44B,EAAI+I,EAAW3hC,KAAK,KAEpB24B,EAAIl0B,KAAK0uB,IAAIgP,EAAajoC,OAC1B0+B,EAAIn0B,KAAK0uB,IAAIgP,EAAahoC,SAE9B4S,EAAQ,IAAIxB,EAAG62B,IAAI,CACfloC,MAAOy+B,EACPx+B,OAAQy+B,IAIZzyB,EAAKzK,SAAS,GAAKyK,EAAKzK,SAAS,GAAKi9B,EAAI,EAC1CxyB,EAAKzK,SAAS,GAAKyK,EAAKzK,SAAS,GAAKk9B,EAAI,EAC1C,MAEJ,IAAK,MAEG+I,EAAW3hC,MACX24B,EAAIgJ,EAAW3hC,KAAK,GACpB44B,EAAI+I,EAAW3hC,KAAK,IAEhBmiC,EAAajoC,OACby+B,EAAIl0B,KAAK0uB,IAAIgP,EAAajoC,OAC1B0+B,EAAIn0B,KAAK0uB,IAAIgP,EAAahoC,UAG1Bw+B,EAAIpzB,EAAQrI,MAAMlD,EAAIuL,EAAQ88B,iBAAiBnoC,MAC/C0+B,EAAIrzB,EAAQrI,MAAMjD,EAAIsL,EAAQ88B,iBAAiBloC,QAGvD4S,EAAQ,IAAIxB,EAAG62B,IAAI,CACfloC,MAAOy+B,EACPx+B,OAAQy+B,IAMhB+I,EAAW5mB,WACVhO,EAAc+O,aAAe6lB,EAAW5mB,WAGxCknB,GAAoB18B,EAA6BwG,iBAClDgB,EAAMS,QAAS,EACfrH,EAAK0B,KAAO0D,EAAGuC,KAAKkf,OACpB7mB,EAAKgI,mBAAoB,EACzBhI,EAAK6H,WAAW,GAChB3Q,QAAQ8F,IAAI,6BAA8B4J,IACL,WAA7BxH,EAAgBW,WACxB6G,EAAMS,QAAS,EACfrH,EAAK0B,KAAO0D,EAAGuC,KAAKkf,OACpB7mB,EAAKgI,mBAAoB,EACzBhI,EAAK6H,WAAW,IAGpB7H,EAAK4H,SAAShB,GAElB,OAAO5G,GAxWIqR,EAAAspB,YAAc,IAAIxwB,EAAA6L,WA0WrC3E,EA7WA,GAAa5d,EAAA4d,gGCbb,IAAApP,EAAA1O,EAAA,IAAQE,EAAA0R,eAAAlD,EAAAkD,eAAgB1R,EAAAkQ,kBAAA1B,EAAA0B,kBACxB,IAAAgyB,EAAApiC,EAAA,KAAQE,EAAAC,OAAAiiC,EAAAjiC,OAAQD,EAAAJ,YAAAsiC,EAAAtiC,YAChB,IAAAuf,EAAArf,EAAA,IAAQE,EAAAuiB,WAAApD,EAAAoD,WACR,IAAAmmB,EAAA5oC,EAAA,KAAQE,EAAA+jB,eAAA2kB,EAAA3kB,eACR,IAAA4kB,EAAA7oC,EAAA,KAAQE,EAAAylB,WAAAkjB,EAAAljB,WACR,IAAAmjB,EAAA9oC,EAAA,KAAQE,EAAA+mB,SAAA6hB,EAAA7hB,SACR,IAAAkb,EAAAniC,EAAA,KAAQE,EAAAiL,MAAAg3B,EAAAh3B,MACR,IAAA6Y,EAAAhkB,EAAA,KAAQE,EAAA+E,aAAA+e,EAAA/e,aAAc/E,EAAAsH,eAAAwc,EAAAxc,eACtB,IAAAuhC,EAAA/oC,EAAA,KAAQE,EAAA+oB,OAAA8f,EAAA9f,yFCRR,IAAAxG,EAAA,oBAAAA,IACY7hB,KAAAooC,QAAiC,GACjCpoC,KAAAqoC,MAAkB,GA4C9B,OA1CWxmB,EAAA7f,UAAA2e,IAAP,SAAW2D,GACP,OAAOtkB,KAAKooC,QAAQ9jB,IAGjBzC,EAAA7f,UAAAsmC,SAAP,SAAgBhkB,GACZ,OAAOA,KAAOtkB,KAAKooC,SAGhBvmB,EAAA7f,UAAAumC,OAAP,SAAcjkB,GACV,IAAIpc,EAAQlI,KAAKqoC,MAAMpoB,QAAQqE,EAAK,GACpCtkB,KAAKqoC,MAAMnoB,OAAOhY,EAAO,UAClBlI,KAAKooC,QAAQ9jB,IAGjBzC,EAAA7f,UAAAX,IAAP,SAAWijB,EAAa/hB,GACd+hB,KAAOtkB,KAAKooC,SACdpoC,KAAKqoC,MAAMzgC,KAAK0c,GAEpBtkB,KAAKooC,QAAQ9jB,GAAO/hB,GAGxBT,OAAAC,eAAW8f,EAAA7f,UAAA,OAAI,KAAf,WACI,OAAOhC,KAAKqoC,uCAGTxmB,EAAA7f,UAAAwmC,OAAP,WACI,OAAOxoC,KAAKooC,SAKTvmB,EAAA7f,UAAAymC,OAAP,SAAcnkB,EAAaokB,GAIvB,OAHK1oC,KAAKsoC,SAAShkB,IACftkB,KAAKqB,IAAIijB,EAAkC,mBAAtBokB,EAAmCA,IAAuBA,GAE5E1oC,KAAK2gB,IAAI2D,IAGbzC,EAAA7f,UAAAyE,MAAP,WACIzG,KAAKqoC,MAAQ,GACbroC,KAAKooC,QAAU,IAEvBvmB,EA9CA,GAAaviB,EAAAuiB,+FCAAviB,EAAAyT,eAAiB,EACjBzT,EAAAshB,YAAc,EACdthB,EAAA0T,cAAgB,EAChB1T,EAAAuT,eAAiB,EACjBvT,EAAA2T,eAAiB,+FCJ9B01B,EAAAvpC,EAAA,GACWE,EAAAH,KAAOwpC,EAElB,IAAAC,EAAAxpC,EAAA,IACWE,EAAAiT,OAASq2B,EAEpBhnC,EAAAinC,aAAAzpC,EAAA,IAAAE,GACAsC,EAAAinC,aAAAzpC,EAAA,IAAAE","file":"./main.daf5de28b2b089eeec23.js","sourcesContent":["import * as PIXI from 'pixi.js';\r\nimport { OutlineFilter } from '@pixi/filter-outline';\r\n\r\nexport enum OutlineMode {\r\n    /**\r\n     * The outline is backed in the buttons texture.\r\n     * This looks excelent if the button's size matches the texture.  \r\n     * */\r\n    Texture,\r\n    /**\r\n     * The outline is created with the OutlineFilter.\r\n     * Best to be used with small uniform textures (so scaling will not affect the texture). \r\n     */\r\n    Filter\r\n}\r\nexport class Button extends PIXI.Sprite {\r\n\r\n    private textureUp: PIXI.Texture;\r\n    private textureHighlight!: PIXI.Texture;\r\n    private textureDown: PIXI.Texture;\r\n    private _outlineMode: OutlineMode;\r\n    private _outlineColor: number;\r\n    private _isHighlighted: boolean = false;\r\n    private _isPressed: boolean = false;\r\n    private _isDisabled: boolean = false;\r\n    private _isClickStarted: boolean = false;\r\n    private _text: PIXI.Text;\r\n    private requestedWidth: number = 0;\r\n    private requestedHeight: number = 0;\r\n\r\n    constructor(texturePath: string, x: number = 0, y: number = 0, width: number = 128, height: number = 32) {\r\n        super();\r\n        this.position.set(x || 0, y || 0);\r\n        this.requestedHeight = height;\r\n        this.requestedWidth = width;\r\n\r\n        //  setup button textures\r\n        this.setTexture(texturePath);\r\n\r\n        this.buttonMode = false;\r\n        this.interactive = true;\r\n        this.cursor = \"hover\";\r\n\r\n        // set the mousedown and touchstart callback...\r\n        this.on('pointerdown', this.onButtonDown)\r\n        this.on('pointerup', this.onButtonUp)\r\n        this.on('pointerupoutside', this.onButtonUpOutside)\r\n        this.on('pointerover', this.onButtonOver)\r\n        this.on('pointerout', this.onButtonOut)\r\n\r\n        this.isPressed = false;       \r\n    }\r\n\r\n    public get outlineMode(){\r\n        return this._outlineMode;\r\n    }\r\n    public set outlineMode(state: OutlineMode) {\r\n        this._outlineMode = state;\r\n        this.filters = this._outlineMode == OutlineMode.Filter ? [new OutlineFilter(1, this._outlineColor, 0.5)]  : null;      \r\n    }\r\n\r\n    public get outlineColor(){\r\n        return this._outlineColor;\r\n    }\r\n    public set outlineColor(value: number) {\r\n        this._outlineColor = value;\r\n        this.filters = this._outlineMode == OutlineMode.Filter ? [new OutlineFilter(1, this._outlineColor, 0.5)]  : null;      \r\n    }\r\n\r\n    public get disabled() {\r\n        return this._isDisabled;\r\n    }\r\n    public set disabled(state: boolean) {\r\n        this._isDisabled = state;\r\n        this.cursor = state ? \"\" : \"hover\";\r\n        this.applyTexture();\r\n    }\r\n\r\n    public get isPressed() {\r\n        return this._isPressed;\r\n    }\r\n    public set isPressed(state: boolean) {\r\n        this._isPressed = state;\r\n        this.applyTexture();\r\n    }\r\n\r\n    public get isHighlighted() {\r\n        return this._isHighlighted;\r\n    }\r\n    public set isHighlighted(state: boolean) {\r\n        this._isHighlighted = state;\r\n        this.applyTexture();\r\n    }\r\n\r\n    public get text() {\r\n        return this._text;\r\n    }\r\n    public set text(text: PIXI.Text) {\r\n        if (this._text) {\r\n            this.removeChild(this._text);\r\n        }\r\n        this._text = text;\r\n        if (this._text) {\r\n            this._text.anchor.set(0.5, 0.5);\r\n            var x = (this.width / this.scale.x) / 2;\r\n            var y = (this.height / this.scale.y) / 2;\r\n            this._text.position.set(x, y);\r\n            this.addChild(this._text);\r\n        }\r\n    }\r\n\r\n    public onClick!: (event:any) => void;\r\n    public mouseover!:(event:any) => void;\r\n    public mouseout!:(event:any) => void;\r\n\r\n    private onClickHandler(event:any){\r\n        if(!this.onClick){\r\n            console.warn(\"onClick() empty, did you forget to attach a handler?\");\r\n        } \r\n        else {\r\n            this.onClick(event);\r\n        }\r\n    }\r\n    \r\n    private onButtonDown = () => {\r\n        if(this._isDisabled) return;\r\n        this._isClickStarted = true;\r\n        this.texture = this.textureDown;\r\n    }\r\n\r\n    private onButtonUp = (event:any) => {\r\n        if(this._isDisabled) return;\r\n        if (this._isClickStarted) {\r\n            this._isClickStarted = false;\r\n            this.onClickHandler(event);\r\n        }\r\n        this.applyTexture();\r\n    }\r\n\r\n    private onButtonUpOutside = () => {\r\n        if(this._isDisabled) return;\r\n        this.applyTexture();\r\n        this._isClickStarted = false;\r\n    }\r\n\r\n    private onButtonOver = (event:any) => {\r\n        if(this._isDisabled) return;\r\n        this.texture = this.textureHighlight;\r\n        if(this.mouseover)this.mouseover(event);\r\n    }\r\n\r\n    private onButtonOut = (event:any) => {\r\n        if(this._isDisabled) return;\r\n        this._isClickStarted = false;\r\n        this.applyTexture();\r\n        if(this.mouseout)this.mouseout(event);\r\n    }\r\n\r\n    private applyTexture() {\r\n        if(this._isDisabled){\r\n            this.texture = this.textureUp;\r\n            this.tint = 0x606060;\r\n        }else if(this._isHighlighted){\r\n            this.texture = this.textureHighlight;\r\n            this.tint = 0x666666;\r\n        }\r\n        else{\r\n            this.texture = this._isPressed ? this.textureDown : this.textureUp;\r\n            this.tint = 0xffffff;\r\n        }\r\n    }\r\n\r\n    public performClick(event:any){\r\n        this.onClickHandler(event);\r\n    }\r\n    \r\n    public setTexture(textureAtlasName: string) {\r\n        var atlasTexture = PIXI.loader.resources[textureAtlasName].texture;\r\n        atlasTexture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        var btnHeight = atlasTexture.height / 3;\r\n        var btnWidth = atlasTexture.width;\r\n        this.textureUp = new PIXI.Texture(atlasTexture.baseTexture, new PIXI.Rectangle(0, 0 * btnHeight, btnWidth, btnHeight));\r\n        this.textureHighlight = new PIXI.Texture(atlasTexture.baseTexture, new PIXI.Rectangle(0, 1 * btnHeight, btnWidth, btnHeight));\r\n        this.textureDown = new PIXI.Texture(atlasTexture.baseTexture, new PIXI.Rectangle(0, 2 * btnHeight, btnWidth, btnHeight));\r\n\r\n        //  calc the scale based on desired height/width\r\n        var scaleW = (this.requestedWidth || btnWidth ) / btnWidth;\r\n        var scaleH = (this.requestedHeight || btnHeight) / btnHeight;\r\n        this.scale.set(scaleW, scaleH);\r\n\r\n        this.applyTexture();\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { Scene } from \"./Scene\";\r\nimport * as TWEEN from \"@tweenjs/tween.js\";\r\nexport enum State {\r\n    GLOBAL,\r\n    MENU,\r\n    IN_GAME,\r\n    CUSTOM1,\r\n    CUSTOM2,\r\n    CUSTOM3,\r\n    CUSTOM4,\r\n    CUSTOM5,\r\n}\r\n\r\n//declare var stats: Stats;\r\n\r\n/**\r\n *   Handles multiple scenes, scene activation, rendering and updates.\r\n */\r\nexport class SceneManager {\r\n    private masterHudOverlay! : PIXI.Container;\r\n\r\n    /**\r\n     * This object is only to support rendering masterHudOverlay together with the current scene!!!\r\n     */\r\n    private masterContainer : PIXI.Container;\r\n    \r\n    private currentScene: Scene | null = null;\r\n    private lastScene!: Scene;\r\n    private scenes: Array<Scene> = [];\r\n    private renderer: PIXI.WebGLRenderer | PIXI.CanvasRenderer;\r\n\r\n    private designWidth: number;\r\n    private designHeight: number;\r\n    private sceneResizer: ISceneResizer;\r\n\r\n    private startTime = null;\r\n    private animationFrameHandle: number =-1;\r\n\r\n    /**\r\n     *   Creates a new SceneManager instance.\r\n     *\r\n     *   @param width the width of the scene\r\n     *   @param height the height of the scene\r\n     *   @param resizer custom resize function\r\n     */\r\n    constructor(width: number, height: number, options?: PIXI.RendererOptions, resizer?: ISceneResizer) {\r\n        this.designWidth = width;\r\n        this.designHeight = height;\r\n        this.sceneResizer = resizer || new DefaultResizer(this.designWidth, this.designHeight);\r\n        this.masterContainer = new PIXI.Container();\r\n\r\n        if (!options) {\r\n            options = { antialias: false, roundPixels: true, backgroundColor: 0x012135, transparent: true };\r\n        }\r\n        this.renderer = PIXI.autoDetectRenderer(width, height, options);\r\n        this.renderer.autoResize = true;\r\n\r\n        //  textureGC is only used for web GL renderer\r\n        if ((this.render as any).textureGC) {\r\n            (this.render as any).textureGC.mode = PIXI.GC_MODES.AUTO;\r\n        }\r\n\r\n        window.removeEventListener(\"resize\", this.resizeHandler);\r\n        window.addEventListener(\"resize\", this.resizeHandler, true);\r\n\r\n        /*\r\n        stats.showPanel(0); // 0 – use the FPS mode, 1 – use the milliseconds mode\r\n\r\n        // Position the meter in the top-left corner\r\n        stats.domElement.style.position = \"absolute\";\r\n        stats.domElement.style.left = \"\";\r\n        stats.domElement.style.right = \"20px\";\r\n        stats.domElement.style.bottom = \"20px\";\r\n        stats.domElement.style.top = \"\"; \r\n\r\n        // Append the meter to the body of your HTML5 document.\r\n        document.body.appendChild(stats.domElement);\r\n        */\r\n\r\n        this.render(0);\r\n    }\r\n\r\n    /**\r\n     *   Returns the renderer instance.\r\n     */\r\n    public get Renderer(): PIXI.WebGLRenderer | PIXI.CanvasRenderer {\r\n        return this.renderer;\r\n    }\r\n\r\n    /**\r\n     *   Returns the current scene instance.\r\n     */\r\n    public get CurrentScene(): Scene {\r\n        return this.currentScene as Scene;\r\n    }\r\n\r\n    /**\r\n     *   Adds a scene.\r\n     */\r\n    public AddScene(scene: Scene):void {\r\n        this.scenes.push(scene);\r\n        scene.sceneManager = this;\r\n    }\r\n\r\n    /**\r\n     *   Removes all scenes.\r\n     */\r\n    public RemoveAllScenes(): void {\r\n        this.scenes.forEach((scene: Scene) => {            \r\n            (scene.sceneManager as any) = undefined;\r\n            scene.onDestroy(true);\r\n        });\r\n        this.scenes = [];\r\n        this.currentScene = null;\r\n    }\r\n\r\n    /**\r\n     *   Removes a scene.\r\n     */\r\n    public RemoveScene(scene: Scene): void {\r\n        this.scenes = this.scenes.filter((item: Scene, index: number, arr) => {\r\n            return item !== scene;\r\n        });\r\n        (scene.sceneManager as any) = undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the scene exists.\r\n     * @param name\r\n     */\r\n    public HasScene(name: string): boolean {\r\n        var found = this.scenes.filter((item: Scene) => { return item.Name === name; });\r\n        return (found && found.length > 0);\r\n    }\r\n\r\n    /**\r\n     * Returns the scene by its name.\r\n     * @param name\r\n     */\r\n    public GetScene(name: string): Scene{\r\n        var found = this.scenes.filter((item: Scene) => { return item.Name === name; });\r\n        if (!found || found.length === 0) {\r\n            throw Error(\"Scene: '\" + name + \"' not found\");\r\n        }\r\n        if (found.length > 1) {\r\n            throw Error(\"Multiple scenes: '\" + name + \"' found\");\r\n        }\r\n        return found[0];\r\n    }\r\n\r\n    /**\r\n     *   Activates the given scene.\r\n     */\r\n    public ActivateScene(sceneOrName: Scene | string):void {       \r\n        var scene: Scene;\r\n        if (typeof (sceneOrName) === \"string\") {\r\n            var found = this.scenes.filter((item:Scene) => { return item.Name === sceneOrName; });\r\n            if (!found || found.length === 0) {\r\n                throw Error(\"Scene: '\" + sceneOrName + \"' not found\");\r\n            }\r\n            if (found.length > 1) {\r\n                throw Error(\"Multiple scenes: '\" + sceneOrName + \"' found\");\r\n            }\r\n            scene = found[0];\r\n        }else {\r\n            scene = sceneOrName as Scene;\r\n        }\r\n\r\n        if(this.currentScene /*&& this.currentScene.onDeactivate*/ && this.currentScene !== scene){\r\n\r\n            console.log(\"DeactivateScene \" + this.currentScene.Name);\r\n            this.currentScene.onDeactivate();\r\n        }\r\n\r\n        console.log(\"ActivateScene \" + scene.Name);\r\n        this.startTime = null;\r\n        this.lastScene = (this.currentScene != scene ? this.currentScene : this.lastScene) as Scene;\r\n        this.currentScene = scene;\r\n        this.renderer.backgroundColor = scene.BackGroundColor;\r\n        this.resizeHandler();\r\n\r\n        //if (scene.onActivate) {\r\n            scene.onActivate();\r\n        //}\r\n        \r\n        this.masterContainer.removeChildren();\r\n        this.masterContainer.addChild(this.currentScene);\r\n        if(this.masterHudOverlay)this.masterContainer.addChild(this.masterHudOverlay);\r\n\r\n        PIXI.settings.RESOLUTION = window.devicePixelRatio;\r\n    }\r\n    \r\n    public ActivatePreviousScene() {\r\n        this.ActivateScene(this.lastScene);\r\n    }\r\n\r\n    /**\r\n     * gets the master HUD overlay object.\r\n     */\r\n    public get MasterHudOverlay(){\r\n        return this.masterHudOverlay;\r\n    }\r\n    /**\r\n     * Sets the master HUD overlay object.\r\n     */\r\n    public set MasterHudOverlay(hud: PIXI.Container) { \r\n        this.masterHudOverlay = hud;\r\n        this.masterContainer.removeChildren();\r\n        this.masterContainer.addChild(this.currentScene as Scene);\r\n        if(this.masterHudOverlay)this.masterContainer.addChild(this.masterHudOverlay);\r\n        this.resizeHandler();\r\n    }\r\n\r\n    /**\r\n     *  Renders the current scene in a rendertexture.\r\n     */\r\n    public CaptureScene(): PIXI.RenderTexture {\r\n        console.log(`Capturing scene, width: ${this.renderer.width}, height: ${this.renderer.height}`);\r\n        var renderTexture = PIXI.RenderTexture.create(this.renderer.width, this.renderer.height);\r\n        this.renderer.render(this.currentScene as Scene, renderTexture);\r\n        return renderTexture;\r\n    }\r\n\r\n    /**\r\n     *   Cancels the animationFrame loop, removes all scenes and finally destroys the renderer.\r\n     */\r\n    public Destroy = () => {\r\n        cancelAnimationFrame(this.animationFrameHandle);\r\n        if (this.currentScene) { this.currentScene.pause(); }\r\n        this.scenes.forEach((scene: Scene) => {\r\n            this.RemoveScene(scene);\r\n        });\r\n        this.renderer.destroy(true);\r\n    };\r\n\r\n    private resizeHandler = () => {\r\n        var avlSize = this.sceneResizer.GetAvailableSize();\r\n        var aspect = this.sceneResizer.GetAspectRatio();\r\n        var size = this.sceneResizer.CalculateSize(avlSize, aspect);\r\n        this.renderer.resize(size.x, size.y);\r\n\r\n        if (this.currentScene) {\r\n            this.currentScene.scale.set(this.sceneResizer.CalculateScale(size));\r\n            //if (this.currentScene.onResize) {\r\n                this.currentScene.onResize();\r\n            //}\r\n        }\r\n\r\n        if(this.masterHudOverlay){\r\n            this.masterHudOverlay.scale.set(this.sceneResizer.CalculateScale(size));            \r\n        }\r\n    };\r\n\r\n    private render = (timestamp) => {\r\n        //stats.begin();\r\n        \r\n        this.animationFrameHandle = requestAnimationFrame(this.render);\r\n        \r\n        //  for tween support\r\n        TWEEN.update(timestamp);\r\n\r\n        //  exit if no scene or paused\r\n        if (!this.currentScene || this.currentScene.isPaused()) {\r\n            return;\r\n        }\r\n\r\n        if (!this.startTime) {\r\n            this.startTime = timestamp;\r\n        }\r\n\r\n        //if (this.currentScene.onUpdate) {\r\n            var dt = timestamp - this.startTime!;\r\n            if (dt > 50) {\r\n                dt = 50;\r\n            }\r\n            this.currentScene.onUpdate(dt);\r\n        //}\r\n\r\n        this.startTime = timestamp;       \r\n        this.renderer.render(this.masterContainer, undefined, this.currentScene.clear); \r\n        \r\n        //stats.end();\r\n    };\r\n}\r\n\r\nexport class DefaultResizer implements ISceneResizer {\r\n    constructor(protected designedWidth:number, protected designedHeight:number) {\r\n    }\r\n    public GetAvailableSize():ISize {\r\n        return { x: window.innerWidth, y: window.innerHeight};\r\n    }\r\n    public GetAspectRatio():number {\r\n        return this.designedWidth / this.designedHeight;\r\n    }\r\n    public CalculateSize(availableSize: ISize, aspect: number): ISize {\r\n        var maxWidth: number, maxHeight: number;\r\n        maxWidth = Math.floor(aspect * availableSize.y);\r\n        maxHeight = Math.floor(window.innerHeight);\r\n        return { x: Math.min(maxWidth, availableSize.x ), y: Math.min(maxHeight, availableSize.y) };\r\n    }\r\n    public CalculateScale(newSize: ISize):number {\r\n        return newSize.x / this.designedWidth;\r\n    }\r\n}\r\n\r\nexport interface ISize {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n/**\r\n *   Object passed to the SceneManager handling various aspects of scene resizing.\r\n */\r\nexport interface ISceneResizer {\r\n\r\n    /*\r\n     *   Returns the available width.\r\n     */\r\n    GetAvailableSize: () => ISize;\r\n\r\n    /*\r\n     *   Returns the desired aspect ratio for the stage.\r\n     */\r\n    GetAspectRatio: () => number;\r\n\r\n    CalculateSize: (availableSize: ISize, aspect: number) => ISize;\r\n\r\n    CalculateScale(newSize: ISize): number;\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { SceneManager } from \"./SceneManager\";\r\n\r\n/**\r\n *   Represents a scene. \r\n *   Only one scene at a time is rendered.\r\n */\r\nexport abstract class Scene extends PIXI.Container {\r\n    private paused: boolean = false;\r\n    private hudScene: PIXI.Container | null = null;\r\n    private backgroundColor: number;\r\n    public sceneManager: SceneManager;\r\n    public onActivate(): void{}\r\n    public onDeactivate(): void{}\r\n    public onResize(): void{}\r\n    public onUpdate(dt: number):void{};\r\n    public onDestroy(options?: PIXI.DestroyOptions | boolean): void{}\r\n\r\n    /**\r\n     *   Creates a new scene instance.\r\n     *   @param name the scene name.\r\n     */\r\n    constructor(scm: SceneManager, name: string) {\r\n        super();\r\n        this.sceneManager = scm;\r\n        this.backgroundColor = 0x0;\r\n        this.Name = name;\r\n    }\r\n\r\n    public Name: string;\r\n\r\n    public get BackGroundColor():number {\r\n        return this.backgroundColor;\r\n    }\r\n    public set BackGroundColor(color: number) {\r\n        this.backgroundColor = color;\r\n    }\r\n\r\n    public get HudOverlay(): PIXI.Container | null {\r\n        return this.hudScene;\r\n    }\r\n    public set HudOverlay(hud: PIXI.Container | null) {\r\n        if (this.hudScene) {\r\n            this.removeChild(this.hudScene);\r\n        }\r\n        this.hudScene = hud;\r\n\r\n        if (this.hudScene) {\r\n            var maxIndex = this.children.length;\r\n            this.addChildAt(this.hudScene, maxIndex);\r\n        }\r\n    }\r\n\r\n    public addChild<T extends PIXI.DisplayObject>(child: T): T {\r\n        var dispObj = super.addChild(child);\r\n        if (this.hudScene) {\r\n            var maxIndex = this.children.length - 1;\r\n            this.setChildIndex(this.hudScene, maxIndex);\r\n        }        \r\n        return dispObj;\r\n    }\r\n\r\n    public addChildAt<T extends PIXI.DisplayObject>(child: T, index: number): T {\r\n        var dispObj = super.addChildAt(child, index);\r\n        if (this.hudScene) {\r\n            var maxIndex = this.children.length - 1;\r\n            this.setChildIndex(this.hudScene, maxIndex);\r\n        }        \r\n        return dispObj;\r\n    }\r\n\r\n    public pause():void {\r\n        this.paused = true;\r\n    }\r\n    public resume():void {\r\n        this.paused = false;\r\n    }\r\n    public isPaused():boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    private _clear:boolean = true;\r\n    public get clear() {\r\n        return this._clear;\r\n    }\r\n\r\n    public set clear(clearFlag: boolean) {\r\n        this._clear = clearFlag;\r\n    }    \r\n}\r\n","import { IRootObject, ILevelDefinition, ITemplate, IMapEntity, IMobEntity } from './LevelInterfaces';\r\n\r\n/**\r\n* Returns all assets referenced in the level.\r\n* @param root\r\n* @param levelId\r\n*/\r\nexport function GetLevelAssets(root: IRootObject, levelId: number): string[] {\r\n    var assets: string[] = [];\r\n\r\n    var level: ILevelDefinition = undefined;\r\n    for (var i = 0; i < root.levels.length; i++) {\r\n        if (root.levels[i].id === levelId) {\r\n            level = root.levels[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (level) {\r\n        level.parallax.forEach((iplx) => {\r\n            assets = assets.concat(iplx.textures);\r\n        });\r\n\r\n        if (level.assets && level.assets.length > 0) {\r\n            assets = assets.concat(level.assets);\r\n        }\r\n\r\n        //  merge global templates with level templates\r\n        var templates = root.templates.concat(level.map.templates);\r\n\r\n        // add all textures from templates (we don't need to have entities referencing the template if they are in a spawn)\r\n        level.map.templates.forEach((tos) => {\r\n            if (!tos.type || tos.type !== \"spawn_point\") {\r\n                let templ = tos as ITemplate;\r\n                let dispObj = templ.displayObject;\r\n                if (dispObj.texture) {\r\n                    if (typeof dispObj.texture === \"string\") {\r\n                        assets.push(dispObj.texture);\r\n                    } else {\r\n                        assets = assets.concat(dispObj.texture);\r\n                    }\r\n                }\r\n                if (dispObj.sequences) {\r\n                    dispObj.sequences.forEach((item) => {\r\n                        assets.push(item.texture);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        level.map.entities.forEach((entity: IMapEntity) => {\r\n            let defs = getEntityDefinition(templates, entity);\r\n            if (defs.doDef.texture) {\r\n                if (typeof defs.doDef.texture === \"string\") {\r\n                    assets.push(defs.doDef.texture);\r\n                } else {\r\n                    assets = assets.concat(defs.doDef.texture);\r\n                }\r\n            }\r\n            if (defs.doDef.sequences) {\r\n                defs.doDef.sequences.forEach((item) => {\r\n                    assets.push(item.texture);\r\n                });\r\n            }\r\n        });\r\n\r\n        level.map.NPC = level.map.NPC || [];\r\n        level.map.NPC.forEach((tos: IMobEntity) => {\r\n            //  check if its a template or spawn_point\r\n            if (tos.type && tos.type === \"spawn_point\") {\r\n\r\n            } else {\r\n                //  this is an entity definition\r\n                let entity: IMobEntity = tos as IMobEntity;\r\n\r\n                //  concat attack (string | string[])\r\n                if (entity.attack) {\r\n                    assets = assets.concat(entity.attack);\r\n                }\r\n\r\n                var entityTemplate = templates.filter((item) => item.name === entity.template);\r\n                if (entityTemplate && entityTemplate.length > 0) {\r\n                    var template = entityTemplate[0];\r\n                    // var temp = $.extend(true, {}, template.displayObject);\r\n                    // var displayObjectDefinition = $.extend(temp, entity);\r\n                    var displayObjectDefinition = { ...template.displayObject, ...entity };\r\n                    if (displayObjectDefinition.texture) {\r\n                        if (typeof displayObjectDefinition.texture === \"string\") {\r\n                            assets.push(displayObjectDefinition.texture);\r\n                        } else {\r\n                            assets = assets.concat(displayObjectDefinition.texture);\r\n                        }\r\n                    }\r\n\r\n                    if (displayObjectDefinition.attack) {\r\n                        assets = assets.concat(displayObjectDefinition.attack);\r\n                    }\r\n\r\n                    if (displayObjectDefinition.sequences) {\r\n                        displayObjectDefinition.sequences.forEach((item) => {\r\n                            //  add only if texture exists\r\n                            if (item.texture) {\r\n                                assets.push(item.texture);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    assets = getUniqueItems(assets);\r\n    return assets;\r\n}\r\n\r\n/**\r\n* Returns an object containing extracted display object and body definitions.\r\n* @param templates\r\n* @param entity\r\n*/\r\nexport function getEntityDefinition(templates: Array<any>, entity: IMapEntity | IMobEntity) {\r\n    let displayObjectDefinition = null;\r\n    let bodyDefinition = null;\r\n    let template = {\r\n        name: null,\r\n        displayObject: { typeName: \"Sprite\" }, //    sprite is the default if no template exists\r\n        body: null,\r\n        trigger: null,\r\n        drop: null\r\n    };\r\n    var entityTemplate = templates.filter((item) => item.name === entity.template);\r\n    if (entityTemplate && entityTemplate.length > 0) {\r\n        template = entityTemplate[0];\r\n    }\r\n    displayObjectDefinition = { ...template.displayObject, ...entity };\r\n\r\n    if (template.drop) {\r\n        displayObjectDefinition = { ...displayObjectDefinition, drop: template.drop }\r\n    }\r\n    if (template.body) {\r\n        bodyDefinition = template.body;\r\n    }\r\n\r\n    let triggerTemplate = undefined;\r\n    if (template.trigger || displayObjectDefinition.trigger) {\r\n        triggerTemplate = { ...template.trigger, ...displayObjectDefinition.trigger };\r\n    }\r\n    return {\r\n        templateName: template.name,\r\n        doDef: displayObjectDefinition,\r\n        bdDef: bodyDefinition,\r\n        trigger: triggerTemplate\r\n    };\r\n}\r\n/**\r\n * Returns a filtered array with unique only items from the input array\r\n * @param arr \r\n */\r\nexport function getUniqueItems(arr) {\r\n    var n = {}, r = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (!n[arr[i]]) {\r\n            n[arr[i]] = true;\r\n            r.push(arr[i]);\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n","import { AnimatedSprite, AnimationSequence } from \"../_engine/AnimatedSprite\";\r\nimport { Bullet } from \"../objects/Bullet\";\r\nimport { snd } from \"../world/SoundMan\";\r\nimport { AI } from \"./AI\";\r\nimport { BasicStaticAI } from \"./BasicStaticAI\";\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { DirectionH, AtrType } from '../enums';\r\n\r\nconst FRAME_SIZE: number = 48;\r\n\r\n\r\n\r\n/**\r\n * Represents a monster entity\r\n */\r\nexport class Mob extends AnimatedSprite {\r\n\r\n    private onDeathCallBack: () => void;\r\n    private _isDead: boolean = false;\r\n    private _attributes: number[];\r\n    private _ai: AI;\r\n    private _direction: DirectionH;\r\n    \r\n    constructor(private textureName: string) {\r\n        super();\r\n\r\n        this.addAnimations(new AnimationSequence(\"left\", this.textureName, [0, 1, 2], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"right\", this.textureName, [3, 4, 5], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"latk\", this.textureName, [6, 7, 8], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"ratk\", this.textureName, [9, 10, 11], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"lsquish\", this.textureName, [12, 13, 14, 15, 16, 17], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"rsquish\", this.textureName, [18, 19, 20, 21, 22, 23], FRAME_SIZE, FRAME_SIZE));\r\n        this.play(\"left\");   \r\n        this._direction = DirectionH.Left;      \r\n    }\r\n\r\n    public isLoading: boolean = false;\r\n\r\n    public get isDead() {\r\n        return this._isDead;\r\n    }\r\n    public set isDead(value: boolean) {\r\n        if (value != this._isDead) {\r\n            this._isDead = value;\r\n            if (this._isDead && this.onDeathCallBack) {\r\n                this.onDeathCallBack();\r\n            }\r\n        }\r\n    }\r\n\r\n    public set onDeath(cb: () => void) {\r\n        this.onDeathCallBack = cb;\r\n    }\r\n    public get onDeath(): () => void {\r\n        return this.onDeathCallBack;\r\n    }\r\n\r\n\r\n    /**\r\n     * texture used for attacks emitted by the mob.\r\n     */\r\n    public atkTexture: string | string[];\r\n\r\n    /**\r\n     * Kills the mob, plays squish animation and sound. Optionaly invokes the call back on animation end.\r\n     * @param cb\r\n     */\r\n    public squish(cb?: () => void) {     \r\n        this.isDead = true;   \r\n        var aname = (this._direction == DirectionH.Left ? \"lsquish\" : \"rsquish\");\r\n        this.onComplete = cb;\r\n        this.play(aname, 12, false);\r\n        snd.mobSquish();\r\n    }\r\n\r\n    public get direction(): DirectionH {\r\n        return this._direction;\r\n    }\r\n    public set direction(dir: DirectionH) {\r\n        if (this._direction != dir) {\r\n            this._direction = dir;\r\n            if (dir === DirectionH.Left) {\r\n                this.play(\"left\");\r\n            } else {\r\n                this.play(\"right\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public set attributes(values: number[]) {\r\n        this._attributes = values;\r\n    }\r\n    public get attributes(): number[] {\r\n        return this._attributes;\r\n    }\r\n\r\n    public attack = ()=> {\r\n        var currentSeq = this.currentSequence;\r\n        var currentFps = this.fps;\r\n        snd.atkMagic1();\r\n        if (this._direction == DirectionH.Left) {\r\n            this.play(\"latk\", currentFps, false);\r\n        } else {\r\n            this.play(\"ratk\", currentFps, false);\r\n        }\r\n\r\n        this.onComplete = (seq: AnimationSequence) => {\r\n            this.onComplete = null;\r\n            this.fireBullet();\r\n            this.play(currentSeq.sequenceName, currentFps);\r\n        };\r\n    }\r\n\r\n    private fireBullet() {\r\n        if (this.atkTexture.constructor === Array) {\r\n            //  TODO: animated sprite\r\n        } else {\r\n            //  sprite\r\n            Bullet.emitBullet(this.atkTexture as string, this.position, wp2.playerBody.position, this._attributes[AtrType.Atk]);\r\n        }\r\n    }\r\n\r\n    public createAI(aiTypeName: string):void {\r\n        switch (aiTypeName.toLowerCase()) {\r\n            case \"basic_static\":\r\n                this._ai = new BasicStaticAI(this);\r\n                break;\r\n\r\n            case \"basic\":\r\n                //  TODO: implement AI logic variations \r\n                break;\r\n        }\r\n    }\r\n\r\n    public onUpdate(dt: number) {\r\n        super.onUpdate(dt);\r\n\r\n        if (!this.isDead && !this.isLoading) {\r\n            this._ai.onUpdate(dt);\r\n        }\r\n    }\r\n}","import * as p2 from \"p2\";\r\nimport { COL_GRP_PLAYER, COL_GRP_BULLET, COL_GRP_SCENE, COL_GRP_GROUND } from '../world/CollisionGroups';\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { Global } from '..';\r\n\r\n/**\r\n * Base for bullets, decals etc.\r\n */\r\nexport class Bullet extends PIXI.Sprite {\r\n    private direction: PIXI.Point = new PIXI.Point();\r\n    private ttl: number;\r\n    private startTime: number;\r\n    private isDead: boolean;\r\n    private onDeath: () => void;\r\n\r\n    public readonly interactionType: number = 666;\r\n    public body: p2.Body;\r\n\r\n    /**\r\n     * Creates a new bullet particle.\r\n     *\r\n     * @param texture\r\n     * @param velocity in pixels per second\r\n     * @param ttl time to live in seconds\r\n     * @param damage bullet hit damage\r\n     */\r\n    constructor(texture: PIXI.Texture, public velocity: number, ttl: number, public damage: number) {\r\n        super(texture);\r\n        this.ttl = ttl;\r\n        this.IsDead = false;\r\n    }\r\n\r\n    public set Direction(direction: PIXI.Point) {\r\n        //  normalize movement vector\r\n        let len = direction.x * direction.x + direction.y * direction.y;\r\n        len = 1 / Math.sqrt(len);\r\n        this.direction.set(direction.x * len, direction.y * len);\r\n    }\r\n    public get Direction() {\r\n        return this.direction;\r\n    }\r\n\r\n    public get IsDead() {\r\n        return this.isDead;\r\n    }\r\n    public set IsDead(value: boolean) {\r\n        if (value != this.isDead) {\r\n            this.isDead = value;\r\n            //console.log(\"bullet is dead: \" + value);\r\n\r\n            //  if set to alive remember start time\r\n            if (this.isDead) {\r\n                if (this.body) {\r\n                    this.body.velocity = [0, 0];\r\n                }\r\n            } else {\r\n                this.startTime = performance.now() / 1000;\r\n                if (this.body) {\r\n                    this.body.position = [this.position.x, this.position.y];\r\n                }\r\n            }\r\n\r\n            //  fire OnDeath if needed\r\n            if (this.isDead && this.onDeath) {\r\n                this.onDeath();\r\n            }\r\n\r\n            this.visible = !this.isDead;\r\n        }\r\n    }\r\n\r\n    public set OnDeath(cb: { (): void }) {\r\n        this.onDeath = cb;\r\n    }\r\n    public get OnDeath() {\r\n        return this.onDeath;\r\n    }\r\n\r\n    public onUpdate = () => {\r\n        // TTL expiry\r\n        if (!this.isDead) {\r\n            let now = performance.now() / 1000;\r\n            let ellapsed = now - this.startTime;\r\n            this.IsDead = this.ttl < ellapsed;\r\n        }\r\n    }\r\n\r\n    private static bullets: Bullet[] = [];\r\n    public static emitBullet = (textureName: string, position: PIXI.Point, target:any, damage: number): Bullet => {\r\n        let bullet = Bullet.findDeadBullet();\r\n        if (!bullet) {\r\n\r\n            //  create new bullet\r\n            bullet = new Bullet(PIXI.loader.resources[textureName].texture, 200, 5, damage);\r\n            bullet.anchor.set(0.5);\r\n            bullet.scale.set(0.5);\r\n            Bullet.bullets.push(bullet);\r\n            Global.worldContainer.addChild(bullet);\r\n\r\n            //-----------------------------\r\n            //  create body (sensor shape)\r\n            //-----------------------------\r\n            let shape = new p2.Circle({ radius: bullet.width / 2 });\r\n            shape.collisionGroup = COL_GRP_BULLET;\r\n            shape.collisionMask = COL_GRP_PLAYER | COL_GRP_SCENE | COL_GRP_GROUND;\r\n            shape.sensor = true;\r\n            var options: p2.BodyOptions = {\r\n                mass: 0,\r\n                position: [position.x, position.y],\r\n                angle: 0,\r\n                fixedRotation: false,\r\n                angularDamping: 0,\r\n                damping: 0\r\n            } as p2.BodyOptions;\r\n            let body = new p2.Body(options);\r\n            body.addShape(shape);\r\n            body.setDensity(0.0);\r\n            body.gravityScale = 0;\r\n            body.angularVelocity = 2;\r\n            body.collisionResponse = false;\r\n            body.type = p2.Body.DYNAMIC;\r\n            (body as any).DisplayObject = bullet;\r\n            bullet.body = body;\r\n            wp2.addBody(body);\r\n        } \r\n\r\n        bullet.position = position;\r\n        let pt = (target instanceof Float32Array) ? new PIXI.Point(target[0] - position.x, target[1] - position.y) : new PIXI.Point(target.x - position.x, target.y - position.y);\r\n        bullet.Direction = pt;\r\n        bullet.damage = damage;\r\n        bullet.IsDead = false;\r\n        bullet.body.velocity[0] = bullet.Direction.x * bullet.velocity;\r\n        bullet.body.velocity[1] = bullet.Direction.y * bullet.velocity;\r\n\r\n        return bullet;\r\n    };\r\n\r\n    public static reset(){\r\n        Bullet.bullets = [];\r\n    }\r\n\r\n    private static findDeadBullet = (): Bullet => {\r\n        for (var i = 0, len = Bullet.bullets.length; i < len; i++) {\r\n            let blt = Bullet.bullets[i];\r\n            if (blt.IsDead) {\r\n                return blt;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n}","import { Global } from '.';\r\nimport { BootScene } from './scenes/BootScene';\r\n\r\n\r\n/**\r\n *  Here we just preload fonts via google webfont.js\r\n *  after the fonts are loaded the bootstraper is taking over\r\n */\r\n\r\nconst PRELOAD_FONTS = [\r\n                        'Permanent Marker',\r\n                        'Orbitron',\r\n                        'Farsan',\r\n                    ];\r\n\r\n//------------------------\r\n// webfont loader config\r\n//------------------------\r\nconsole.log('initializing google webfont loader ...', PRELOAD_FONTS);\r\ntry {\r\n    var cfg = {\r\n        google: { families: PRELOAD_FONTS },\r\n        active: () => {\r\n            console.log('fonts preload finished!');          \r\n            const scm = Global.getScm();\r\n            const boot = new BootScene(scm);\r\n            scm.AddScene(boot);\r\n            scm.ActivateScene(boot);\r\n        }\r\n    };\r\n    (window as any).WebFontConfig = cfg;\r\n}\r\ncatch (e) {\r\n    console.log(e);\r\n}\r\n\r\n//------------------------\r\n// start webfont loader\r\n//------------------------\r\n/* jshint ignore:start */\r\n{\r\n    var src = ('https:' === document.location.protocol ? 'https' : 'http') +\r\n               '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';\r\n    var wf = document.createElement('script');\r\n    wf.src = src;\r\n    wf.type = 'text/javascript';\r\n    wf.async = true;\r\n    var s = document.getElementsByTagName('script')[0];\r\n    if(s.parentNode)s.parentNode.insertBefore(wf, s);\r\n};\r\n/* jshint ignore:end */","export enum BaseStatType {\r\n    MaxHP,\r\n    MaxDust,\r\n    RegenHP,\r\n    RegenDust,\r\n}\r\n\r\nexport enum StatType {\r\n    MaxHP,\r\n    HP,\r\n\r\n    MaxDust,\r\n    Dust,\r\n\r\n    RegenHP,\r\n    RegenDust,\r\n\r\n    Coins,\r\n    Gold,           //  not used\r\n\r\n    LevelExp,       // calculated value: current level exp, starts from 0 each level\r\n    LevelMaxExp,    // calculated value: current level exp needed to reach next level \r\n    TotalExp,       // total exp  \r\n\r\n    AttributePoints,\r\n\r\n    CharacterLevel, // calculated value: current char level based on total experience\r\n}\r\n\r\nexport enum DamageType {\r\n    LavaBorder = 1000,\r\n    Lava = 1001,\r\n    Poison = 1002\r\n}\r\n\r\n\r\nexport enum AtrType {\r\n    HP,\r\n    Atk,\r\n    AtkCD,\r\n    Def,\r\n}\r\n\r\nexport enum DirectionH {\r\n    Left,\r\n    Right,\r\n}","import * as PIXI from \"pixi.js\";\r\nimport * as particles from \"pixi-particles\";\r\nimport { SceneManager } from \"./_engine\";\r\nimport { IRootObject } from './world/LevelInterfaces';\r\nimport { SCENE_HEIGHT, SCENE_WIDTH } from './constants';\r\n\r\n\r\n\r\n/**\r\n * The global scene manager.\r\n */\r\nexport function getScm() {\r\n    if (!sceneManager) {\r\n        const canvas: HTMLCanvasElement = document.getElementById(\"stage\") as HTMLCanvasElement;\r\n        const renderOptions: PIXI.RendererOptions = {\r\n            view: canvas,\r\n            backgroundColor: 0,\r\n            antialias: true,\r\n            transparent: false,\r\n            roundPixels: true,\r\n            resolution: window.devicePixelRatio\r\n        };\r\n        sceneManager = new SceneManager(SCENE_WIDTH, SCENE_HEIGHT, renderOptions);\r\n    }\r\n    return sceneManager;\r\n}\r\nexport function deleteScm() {\r\n    if (sceneManager) {\r\n        sceneManager.Renderer.destroy();\r\n    }\r\n    (sceneManager as any) = undefined;\r\n}\r\nlet sceneManager: SceneManager;\r\n\r\n/**\r\n * Player position.\r\n */\r\nexport var position = new PIXI.Point();\r\n\r\nexport var worldContainer : PIXI.Container;\r\n\r\nexport function createParticleEmitter(container: PIXI.Container, textures: PIXI.Texture[], config?: any): particles.Emitter {\r\n    \"use strict\";\r\n    var cfg: any = {\r\n        alpha: {\r\n            start: 0.8,\r\n            end: 0.03\r\n        },\r\n        color: {\r\n            start: \"#dcff09\",\r\n            end: \"#9f1f1f\"\r\n        },\r\n        scale: {\r\n            start: 0.1,\r\n            end: 0.4,\r\n            minimumScaleMultiplier: 1\r\n        },\r\n        speed: {\r\n            start: 50,\r\n            end: 3,\r\n            minimumSpeedMultiplier: 1\r\n        },\r\n        acceleration: new PIXI.Point(),\r\n        startRotation: {\r\n            min: 0,\r\n            max: 360\r\n        },\r\n        rotationSpeed: {\r\n            min: 5,\r\n            max: 20\r\n        },\r\n        lifetime: {\r\n            min: 0.4,\r\n            max: 1.0\r\n        },\r\n        blendMode: \"add\",\r\n        frequency: 0.01,\r\n        emitterLifetime: -1,\r\n        maxParticles: 200,\r\n        pos: new PIXI.Point(0, -24),\r\n        addAtBack: false,\r\n        spawnType: \"circle\",\r\n        spawnCircle: {\r\n            x: 0,\r\n            y: 0,\r\n            r: 10\r\n        }\r\n    };\r\n    if (config) {\r\n        cfg = { ...cfg, ...config };\r\n    }\r\n\r\n    var emitter = new particles.Emitter(\r\n        // the PIXI.Container to put the emitter in\r\n        // if using blend modes, it's important to put this\r\n        // on top of a bitmap, and not use the root stage Container\r\n        container,\r\n        textures,\r\n        cfg\r\n    );\r\n    emitter.emit = false;\r\n    return emitter;\r\n}\r\n\r\nexport var LevelDefinitions: IRootObject = {\r\n        templates: undefined,\r\n        levels: undefined,\r\n        quests: undefined\r\n};","export const SCENE_WIDTH: number = 1920;\r\nexport const SCENE_HEIGHT: number = 1080;\r\nexport const SCENE_HALF_WIDTH = SCENE_WIDTH / 2;\r\nexport const SCENE_HALF_HEIGHT = SCENE_HEIGHT / 2;\r\nexport const BTN_WIDTH: number = 120;\r\nexport const BTN_HEIGHT: number = 60;\r\nexport const MENU_LINE_HEIGHT = 60;\r\nexport const GUI_FONT = \"Orbitron\";\r\n\r\nexport const SCENE_BACKCOLOR = 0x112233;\r\n\r\n\r\nexport const ANIMATION_FPS_NORMAL = 14;\r\nexport const ANIMATION_FPS_SLOW = 4;\r\n\r\nexport const BTN_STYLE = {\r\n    align: \"center\",\r\n    padding: 0,\r\n    fontSize: 28,\r\n    fontFamily: GUI_FONT,\r\n    fill: 0x46fbfd,\r\n    strokeThickness: 1,\r\n    stroke: 0x0\r\n};\r\n\r\nexport const TEXT_STYLE: PIXI.TextStyleOptions = {\r\n    align: \"left\",\r\n    padding: 0,\r\n    fontSize: 21,\r\n    fontFamily: GUI_FONT,\r\n    fill: 0xE5E51B,\r\n    strokeThickness: 3,\r\n    stroke: 0x0f0f2f,\r\n};\r\n\r\nexport const MSG_COIN_STYLE: PIXI.TextStyleOptions =\r\n{\r\n    align: \"center\",\r\n    padding: 0,\r\n    fontSize: 22,\r\n    fontFamily: GUI_FONT,\r\n    fill: 0xaaaa00,\r\n    strokeThickness: 3,\r\n    stroke: 0x904b15\r\n};\r\n\r\nexport const MSG_HP_STYLE: PIXI.TextStyleOptions =\r\n{\r\n    align: \"center\",\r\n    padding: 0,\r\n    fontSize: 24,\r\n    fontFamily: GUI_FONT,\r\n    fill: 0x904b15,\r\n    strokeThickness: 3,\r\n    stroke: 0x111111\r\n};\r\n\r\nexport const MSG_EXP_STYLE: PIXI.TextStyleOptions =\r\n    {\r\n        align: \"center\",\r\n        padding: 0,\r\n        fontSize: 24,\r\n        fontFamily: GUI_FONT,\r\n        fill: 0x84c202,\r\n        strokeThickness: 3,\r\n        stroke: 0x112111\r\n    };\r\n\r\nexport const MSG_WARN_STYLE: PIXI.TextStyleOptions =\r\n{\r\n    align: \"center\",\r\n    padding: 0,\r\n    fontSize: 27,\r\n    fontFamily: GUI_FONT,\r\n    fill: 0xff0011,\r\n    strokeThickness: 4,\r\n    stroke: 0x222222\r\n};\r\n\r\nexport const EXP_BAR_STYLE: PIXI.TextStyleOptions =\r\n{\r\n    align: \"center\",\r\n    padding: 0,\r\n    fontSize: 13,\r\n    fontFamily: GUI_FONT,\r\n    fill: 0x111111,\r\n    strokeThickness: 4,\r\n    stroke: 0xffffff\r\n};\r\n\r\nexport const QUEST_ITEM_STYLE: PIXI.TextStyleOptions =\r\n    {\r\n        align: \"center\",\r\n        padding: 0,\r\n        fontSize: 28,\r\n        fontFamily: \"Farsan\",\r\n        fill: 0x84c2f2,\r\n        strokeThickness: 4,\r\n        stroke: 0x111121\r\n    };\r\n\r\n    export const QUEST_STYLE: PIXI.TextStyleOptions =\r\n    {\r\n        align: \"center\",\r\n        padding: 0,\r\n        fontSize: 30,\r\n        fontFamily: \"Farsan\",\r\n        fill: 0xffffff,\r\n        strokeThickness: 2,\r\n        stroke: 0x8a8343,\r\n        dropShadow: true,\r\n        dropShadowDistance: 6,\r\n        dropShadowBlur:3\r\n    };","import { LevelDefinitions } from '../global';\r\nimport { eventEmitter, DAMAGE_TOPIC, STATCHANGE_TOPIC, BURN_TOPIC, IStatChangeEvent, IDpsChangeEvent} from \"../events\";\r\nimport { LevelLoader } from '../world/LevelLoader';\r\nimport { ILevel } from '../world/LevelInterfaces';\r\nimport { BaseStatType, StatType, DamageType } from '../enums';\r\n\r\n\r\n\r\nclass PlayerStats {\r\n    /**\r\n     * Base stats are fixed values increased with level.\r\n     */\r\n    private baseStats: Array<number> = [];\r\n\r\n    /**\r\n     * Attribute stats are player assigned values (point distribution).\r\n     */\r\n    private attributeStats: Array<number> = [];\r\n    \r\n    private stats: Array<number> = [];\r\n\r\n    private accumulator: number = 0.0;\r\n    private dpsDecreaseAmount: number = 0;\r\n    private static expForLevel: Array<number> = [];\r\n\r\n    //  acquired skills\r\n    private hasJumpAttack: boolean = false;\r\n    private hasMagicAttack: boolean = false;\r\n\r\n    //  achievement levels\r\n    public characterLevel: number = 0;\r\n    public currentGameLevel: number = 0;\r\n    private expForNextLevel: number = 0;\r\n\r\n    //  user related\r\n    public id: number;\r\n\r\n    private isBurningBuff: boolean = false;\r\n\r\n    /**\r\n     *   Stores timestamps (Unix timestamps in seconds with fractions) when the buff elapses.\r\n     */\r\n    public buffs: Array<number> = [];\r\n\r\n    private levelLoader : LevelLoader;\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n\r\n        //  attr  stats\r\n        this.attributeStats[BaseStatType.RegenHP] = 0;\r\n        this.attributeStats[BaseStatType.RegenDust] = 0;\r\n        this.attributeStats[BaseStatType.MaxHP] = 0;\r\n        this.attributeStats[BaseStatType.MaxDust] = 0;\r\n\r\n        // runtime stats\r\n        this.stats[StatType.Coins] = 0;\r\n        this.stats[StatType.Dust] = 600;\r\n        this.stats[StatType.TotalExp] = 0;\r\n        this.stats[StatType.AttributePoints] = 0;\r\n        this.stats[StatType.HP] = 120;\r\n\r\n        let diff = 1000;\r\n        PlayerStats.expForLevel[0] = 0;\r\n        for (var i = 1; i < 10000; i++) {\r\n            PlayerStats.expForLevel[i] = PlayerStats.expForLevel[i - 1] + (i * diff);\r\n        }\r\n\r\n        this.rebuildStats();\r\n    }\r\n\r\n    /**\r\n     * Rteurns the level loader.\r\n     */\r\n    public get LevelLoader(){\r\n        if(!this.levelLoader){\r\n            this.levelLoader = new LevelLoader(LevelDefinitions);\r\n        }\r\n        return this.levelLoader;\r\n    }\r\n\r\n    /**\r\n     *  Updates stats that increase/decrease over time.\r\n     *  The update is calculated in a half second interval.\r\n     */\r\n    public onUpdate = (dt: number) => {\r\n\r\n        let INTERVAL = 500;\r\n        let SECOND_2_INTERVAL = INTERVAL / 1000; //  this factor converts per second values to per interval values\r\n\r\n        var now = performance.now() / 1000;\r\n\r\n        //  accumulate dps\r\n        for (let i = 1000, len = this.buffs.length; i < len; i++) {\r\n            if (this.buffs[i] && this.buffs[i] > now) {\r\n                let dps = 0;\r\n                switch (i) {\r\n                    case DamageType.LavaBorder:  \r\n                        dps = 5;\r\n                        break;\r\n                    case DamageType.Lava:  \r\n                        dps = 15;\r\n                        break;\r\n                    case DamageType.Poison:  \r\n                        dps = 10;\r\n                        break;\r\n                }\r\n                let dmg = dt * 0.001 * dps;\r\n                this.dpsDecreaseAmount += dmg;\r\n            }\r\n        }\r\n\r\n        //  handle once per interval ticks\r\n        this.accumulator += dt;\r\n        if (this.accumulator > INTERVAL) {\r\n            this.accumulator -= INTERVAL;\r\n\r\n            //  dust\r\n            if (this.stats[StatType.Dust] < this.stats[StatType.MaxDust]) {\r\n                let v = this.stats[StatType.RegenDust] * SECOND_2_INTERVAL;\r\n                this.increaseStat(StatType.Dust, v);\r\n            }\r\n\r\n            //  hp\r\n            if (this.stats[StatType.HP] < this.stats[StatType.MaxHP]) {\r\n                let v = this.stats[StatType.RegenHP] * SECOND_2_INTERVAL;\r\n                this.increaseStat(StatType.HP, v);\r\n            }\r\n\r\n            //  dps\r\n            if (this.dpsDecreaseAmount >= 1) {\r\n                var amount = Math.floor(this.dpsDecreaseAmount);\r\n                let event: IDpsChangeEvent = {\r\n                    OldValue: this.stats[StatType.HP],\r\n                    Amount: -amount\r\n                };                \r\n                eventEmitter.emit(DAMAGE_TOPIC, event);\r\n                this.increaseStat(StatType.HP, -amount);\r\n                this.dpsDecreaseAmount -= amount;\r\n            }\r\n        }\r\n\r\n        //--------------------------\r\n        //  check if is burning\r\n        //--------------------------\r\n        let wasBurning = this.isBurningBuff;\r\n        this.isBurningBuff = this.buffs[DamageType.LavaBorder] > now || this.buffs[DamageType.Lava] > now;\r\n        if (wasBurning !== this.isBurning) {            \r\n            eventEmitter.emit(BURN_TOPIC, { wasBurning: wasBurning, isBurning: this.isBurningBuff });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns true if the player is taking burn damage.\r\n     */\r\n    public get isBurning() {\r\n        return this.isBurningBuff;\r\n    }\r\n\r\n    /**\r\n     * The parsed current level.\r\n     */\r\n    public currentLevel : ILevel;\r\n\r\n    public loadLevel(){\r\n        this.loadUserState();\r\n        this.currentLevel =  this.LevelLoader.buildLevel(this.currentGameLevel);\r\n    }\r\n\r\n    /**\r\n     * Saves user data.\r\n     */\r\n    public saveUserState(isLevelCompleted: boolean) {\r\n        if (isLevelCompleted) {\r\n            this.currentGameLevel += 1;\r\n        }\r\n        let model = {\r\n            ExternalId: this.id,\r\n            Coins: this.stats[StatType.Coins],\r\n            Gold: this.stats[StatType.Gold],\r\n            Dust: Math.floor(this.stats[StatType.Dust]),\r\n            Exp: this.stats[StatType.TotalExp],\r\n            AtrPts: this.stats[StatType.AttributePoints],\r\n            HP: this.stats[StatType.HP],\r\n            LastLevel: this.currentGameLevel,\r\n            // TODO: add sending skills etc.\r\n        };\r\n        // AjaxHelper.Post(baseUrl + \"/api/user/save\", model, (data, status) => {\r\n        //     console.log(\"connectUser() response\", data);\r\n        // });\r\n        //TODO: implement\r\n    }\r\n\r\n    /**\r\n     * Loads user data.\r\n     */\r\n    public loadUserState() {\r\n        let model = { id: this.id };\r\n        var data = {\r\n            HP: this.getStat(StatType.MaxHP),\r\n            Exp : this.getStat(StatType.TotalExp),\r\n            Coins: this.getStat(StatType.Coins),\r\n            Dust: this.getStat(StatType.MaxDust),\r\n            Gold: 0,\r\n            AtrPts: 0,\r\n            LastLevel: this.currentGameLevel\r\n        };\r\n        //  todo: http get\r\n        console.log(\"loadUserState() response\", data);\r\n\r\n            stats.currentGameLevel = data.LastLevel;\r\n\r\n            //  we never accept 0 hp, convert to full health instead\r\n            if (data.HP <= 0) {\r\n                data.HP = this.stats[StatType.MaxHP];\r\n            }\r\n            this.setStat(StatType.HP, data.HP);\r\n            this.setStat(StatType.Coins, data.Coins);\r\n            this.setStat(StatType.Gold, data.Gold);\r\n            this.setStat(StatType.Dust, data.Dust);\r\n            this.setStat(StatType.AttributePoints, data.AtrPts);\r\n            this.setStat(StatType.TotalExp, data.Exp);\r\n            //  TODO: attributeStats\r\n            this.rebuildStats();\r\n    }\r\n\r\n    public get HasJumpAtack() {\r\n        return this.hasJumpAttack;\r\n    }\r\n    public set HasJumpAtack(value: boolean) {\r\n        this.hasJumpAttack = value;\r\n    }\r\n\r\n    public setStat(type: StatType, value: number) {\r\n        this.stats[type] = value;\r\n        if (type === StatType.TotalExp) {\r\n            this.characterLevel = PlayerStats.findExpLevel(value);\r\n            this.stats[StatType.LevelMaxExp] = PlayerStats.expForLevel[this.characterLevel + 1] - PlayerStats.expForLevel[this.characterLevel];\r\n            this.stats[StatType.LevelExp] = this.stats[StatType.TotalExp] - PlayerStats.expForLevel[this.characterLevel];\r\n            this.expForNextLevel = PlayerStats.expForLevel[this.characterLevel + 1];\r\n        }\r\n        this.updateEvent(type, value);\r\n        eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n    }\r\n\r\n    public getStat(type: StatType): number {\r\n        return this.stats[type];\r\n    }\r\n\r\n    public increaseStat(type: StatType, value: number, maxValue?: number) {\r\n\r\n        var newValue = this.stats[type] + value;\r\n        if (maxValue && newValue > maxValue) {\r\n            newValue = maxValue;\r\n        }\r\n        if (newValue < 0) {\r\n            newValue = 0;\r\n        }\r\n\r\n        this.updateEvent(type, newValue);\r\n        this.stats[type] = newValue;\r\n\r\n        //  special logic for experience\r\n        if (type === StatType.TotalExp) {\r\n            this.stats[StatType.LevelExp] = newValue - PlayerStats.expForLevel[this.characterLevel];\r\n\r\n            //  level up check\r\n            if (newValue >= this.expForNextLevel) {\r\n                this.characterLevel = PlayerStats.findExpLevel(newValue);\r\n                this.expForNextLevel = PlayerStats.expForLevel[this.characterLevel + 1];\r\n\r\n                this.stats[StatType.LevelMaxExp] = this.expForNextLevel - PlayerStats.expForLevel[this.characterLevel];\r\n                this.stats[StatType.LevelExp] = newValue - PlayerStats.expForLevel[this.characterLevel];\r\n\r\n                //  lvl up event\r\n                this.scevent.Type = StatType.CharacterLevel;\r\n                this.scevent.OldValue = this.characterLevel - 1;\r\n                this.scevent.NewValue = this.characterLevel;\r\n                this.scevent.Stats = this.stats;\r\n                eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n\r\n                //  attr change event\r\n                newValue = this.stats[StatType.AttributePoints] + 5;\r\n                this.scevent.Type = StatType.AttributePoints;\r\n                this.scevent.OldValue = this.getStat(StatType.AttributePoints);\r\n                this.scevent.NewValue = newValue;\r\n                this.setStat(StatType.AttributePoints, newValue);\r\n                this.scevent.Stats = this.stats;\r\n                eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n\r\n                // refill HP & dust\r\n                this.setStat(StatType.Dust, this.stats[StatType.MaxDust]);\r\n                this.setStat(StatType.HP, this.stats[StatType.MaxHP]);\r\n\r\n                //  prepare regular stat change event (for exp)\r\n                this.scevent.Type = type;\r\n                this.scevent.OldValue = 0;\r\n                this.scevent.NewValue = this.stats[StatType.LevelExp];\r\n                this.scevent.Stats = this.stats;\r\n                //this.saveUserState(false);\r\n            }\r\n        }\r\n\r\n        eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n    }\r\n\r\n    /**\r\n     * Finds the exp level for the given total exp value.\r\n     * @param exp\r\n     */\r\n    public static findExpLevel(exp: number) {\r\n        for (var i = 0, len = PlayerStats.expForLevel.length; i < len; i++) {\r\n            if (exp < PlayerStats.expForLevel[i]) {\r\n                return i - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private rebuildStats() {\r\n        //  calc max & regen stats\r\n        this.baseStats[BaseStatType.MaxHP] = 150 + (this.characterLevel * 10);\r\n        this.baseStats[BaseStatType.MaxDust] = 600 + (this.characterLevel * 50);\r\n        this.baseStats[BaseStatType.RegenDust] = 2 + (this.characterLevel / 2);\r\n        this.baseStats[BaseStatType.RegenHP] = 1 + (this.characterLevel / 2);\r\n\r\n        //  each max attribute increases base stat by 10%\r\n        this.stats[StatType.MaxHP] = this.baseStats[BaseStatType.MaxHP] * (1 + this.attributeStats[BaseStatType.MaxHP]/10);\r\n        this.stats[StatType.MaxDust] = this.baseStats[BaseStatType.MaxDust] * (1 + this.attributeStats[BaseStatType.MaxDust] / 10);\r\n\r\n        //  each regen attribute increases base stat by 10%\r\n        this.stats[StatType.RegenHP] = this.baseStats[BaseStatType.RegenHP] * (1 + this.attributeStats[BaseStatType.RegenHP] / 10);\r\n        this.stats[StatType.RegenDust] = this.baseStats[BaseStatType.RegenDust] * (1 + this.attributeStats[BaseStatType.RegenDust] / 10);\r\n    }\r\n\r\n    private scevent: IStatChangeEvent = {\r\n        Type: StatType.Coins,\r\n        OldValue: 0,\r\n        NewValue: 0,\r\n        Stats: []\r\n    };\r\n\r\n    private updateEvent(type: StatType, newValue: number) {\r\n        this.scevent.Type = type;\r\n        this.scevent.OldValue = this.stats[type];\r\n        this.scevent.NewValue = newValue;\r\n        this.scevent.Stats = this.stats;\r\n    }\r\n}\r\n\r\nexport var stats = new PlayerStats();","import * as p2 from \"p2\";\r\nimport { Global } from '..';\r\nimport {Dictionary} from '../_engine/Dictionary';\r\nimport { COL_GRP_GROUND, COL_GRP_SCENE, COL_GRP_NPC, COL_GRP_PLAYER, COL_GRP_BULLET } from './CollisionGroups';\r\n\r\n/**\r\n * Tuple of two physics bodies touching or penetrating each other.\r\n */\r\nexport class ContactPair {\r\n    constructor(public BodyA: p2.Body, public BodyB: p2.Body) { }\r\n}\r\n\r\n\r\n/**\r\n * Takes care of the physics simulations.\r\n */\r\nexport class WorldP2 {\r\n\r\n    public playerBody: p2.Body;\r\n    private world: p2.World;\r\n    private ground: p2.Body;\r\n    private materials: Dictionary<p2.Material>;\r\n    private contactPairs: Array<ContactPair> = [];\r\n    private contactWatch: Array<number> = [];\r\n\r\n    /**\r\n     * We hold all player contacts separate (due to heavy usage).\r\n     */\r\n    private playerBodyContacts: Array<p2.Body> = [];\r\n\r\n    private readonly fixedTimeStep = 1 / 60; // seconds\r\n\r\n\r\n    constructor() {\r\n        this.world = new p2.World({\r\n            gravity: [0, -1550],\r\n        });\r\n\r\n        this.setupMaterials();\r\n\r\n        //------------------------------------------\r\n        // create an infinite ground plane body\r\n        //------------------------------------------\r\n        this.ground = new p2.Body({\r\n            mass: 0,\r\n        });\r\n        var shape = new p2.Plane();\r\n        shape.material = this.materials.get(\"ground_default\");\r\n        shape.collisionGroup = COL_GRP_GROUND;\r\n        shape.collisionMask = COL_GRP_SCENE | COL_GRP_NPC | COL_GRP_PLAYER | COL_GRP_BULLET;\r\n        this.ground.addShape(shape);\r\n        this.world.addBody(this.ground);\r\n\r\n        //------------------------------------------\r\n        //  player body\r\n        //------------------------------------------\r\n        this.playerBody = new p2.Body({\r\n            mass: 42,\r\n            fixedRotation: true,            \r\n        });\r\n        this.playerBody.damping = 0.001;\r\n        shape = new p2.Circle({\r\n            radius: 24,\r\n        });\r\n        shape.collisionGroup = COL_GRP_PLAYER;\r\n        shape.collisionMask = COL_GRP_GROUND | COL_GRP_SCENE | COL_GRP_NPC | COL_GRP_BULLET;\r\n        shape.material = this.materials.get(\"player\");\r\n        this.playerBody.addShape(shape);\r\n        this.world.addBody(this.playerBody);\r\n\r\n        //------------------------------------------\r\n        //  settings\r\n        //------------------------------------------\r\n        this.world.sleepMode = p2.World.BODY_SLEEPING;\r\n        this.world.on(\"beginContact\", this.beginContact, this);\r\n        this.world.on(\"endContact\", this.endContact, this);\r\n    }\r\n\r\n    /**\r\n     * Removes all bodies except the player body and ground plane.\r\n     */\r\n    public clearLevel() {\r\n        var bodies = this.world.bodies;\r\n        for (var i = bodies.length-1; i >=0; i--) {\r\n            let b = bodies[i];\r\n            if (b !== this.playerBody && b !== this.ground) {\r\n                this.world.removeBody(b);\r\n            }\r\n        }       \r\n    }\r\n\r\n    /**\r\n     * Returns the world bodies.\r\n     */\r\n    public get bodies(): Array<p2.Body> {\r\n        return this.world.bodies;\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler to the p2 world object.\r\n     * @param eventName\r\n     * @param handler\r\n     */\r\n    public on(eventName: string, handler: any, context?: any): void {\r\n        context = context || this;\r\n        this.world.on(eventName, handler, context);\r\n    }\r\n\r\n    /**\r\n     * advances the physics simulation for the given dt time\r\n     * @param dt the time in seconds since the last simulation step\r\n     */\r\n    public update(dt: number): void {\r\n        this.world.step(this.fixedTimeStep, dt/1000);\r\n        Global.position.x = this.playerBody.interpolatedPosition[0];\r\n        Global.position.y = this.playerBody.interpolatedPosition[1];\r\n    }\r\n\r\n    /**\r\n     * Removes the body from world.\r\n     * @param body\r\n     */\r\n    public removeBody(body: p2.Body): void {\r\n        this.world.removeBody(body);\r\n    }\r\n\r\n    /**\r\n     * adds an object to the p2 world\r\n     * @param body\r\n     */\r\n    public addBody(body: p2.Body): void {\r\n        // HACK: loader specific implementation stores the material name in shape.materialName\r\n        if (body.shapes && body.shapes.length > 0) {\r\n            for (var i = 0, len = body.shapes.length; i < len; i++) {\r\n                let shape: any = body.shapes[i];\r\n                if (shape.materialName && !shape.material) {\r\n                    shape.material = this.materials.get(shape.materialName);\r\n                }\r\n            }            \r\n        }\r\n        this.world.addBody(body);\r\n    }\r\n\r\n    /**\r\n     * Clears all saved contacts (from contactPairs) for the given body.\r\n     * @param body\r\n     */\r\n    public clearContactsForBody(body: p2.Body):void {\r\n        if (body === this.playerBody) {\r\n            this.playerBodyContacts = [];\r\n            return;\r\n        }\r\n\r\n        var foundIdx: number = 0;\r\n        while (foundIdx > -1) {\r\n            foundIdx = -1;\r\n            for (var i = 0; i < this.contactPairs.length; i++) {\r\n                let cp:ContactPair = this.contactPairs[i];\r\n                if (cp.BodyA === body || cp.BodyB === body)  {\r\n                    foundIdx = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundIdx >= 0) {\r\n                this.contactPairs.splice(foundIdx, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns all contact pairs for the given body.\r\n     * Note: the body must be in the contact watch list or an empty array will be returned.\r\n     * @param body\r\n     */\r\n    public getContactsForBody(body: p2.Body): Array<ContactPair> {\r\n        var foundPairs: Array<ContactPair> = [];\r\n        for (var i = 0, len = this.contactPairs.length; i < len; i++) {\r\n            let cp: ContactPair = this.contactPairs[i];        \r\n            if (cp.BodyA === body || cp.BodyB === body) {\r\n                foundPairs.push(cp);\r\n            }\r\n        };\r\n        return foundPairs;\r\n    }\r\n\r\n    /**\r\n     * Adds the body to the contact watch list.\r\n     * Only bodies in this list can be retrieved via the getContactsForBody() function.\r\n     * @param body\r\n     */\r\n    public addContactWatch(body: p2.Body): void {\r\n        this.contactWatch.push(body.id);\r\n    }\r\n\r\n    /**\r\n     * Returns all bodies the player has contact with.\r\n     */\r\n    public get playerContacts(): p2.Body[]{\r\n        return this.playerBodyContacts;\r\n    }\r\n\r\n    private beginContact = (evt: any) => {\r\n        \r\n        let bullet: p2.Body = null;\r\n        let other: p2.Body = null;\r\n        if (evt.bodyA.shapes[0].collisionGroup === COL_GRP_BULLET) {\r\n            bullet = evt.bodyA;\r\n            other = evt.bodyB;\r\n        } else if (evt.bodyB.shapes[0].collisionGroup === COL_GRP_BULLET){\r\n            bullet = evt.bodyB;\r\n            other = evt.bodyA;\r\n        }\r\n        if (bullet) {\r\n           // console.log(\"emitting bulettContact, body.id: \" + bullet.id);\r\n            this.world.emit({ type: \"bulletContact\", playerHit: other === this.playerBody, bulletBody: bullet, otherBody: other });\r\n            return;\r\n        }\r\n\r\n        //  check for player contacts (but only with dynamic bodies)\r\n        if (this.playerBody === evt.bodyA) {\r\n            this.playerBodyContacts.push(evt.bodyB);\r\n            this.world.emit({ type: \"playerContact\", velocity: this.playerBody.velocity, body: evt.bodyB });\r\n            return;\r\n        } else if (this.playerBody === evt.bodyB) {\r\n            this.playerBodyContacts.push(evt.bodyA);\r\n            this.world.emit({ type: \"playerContact\", velocity: this.playerBody.velocity, body: evt.bodyA });\r\n            return;\r\n        }\r\n\r\n        //  check for watched bodies and store pairs if match\r\n        var watchedItemFound = this.contactWatch.filter((bodyId) => {\r\n            return (bodyId === evt.bodyA.id || bodyId === evt.bodyB.id);\r\n        });\r\n        if (watchedItemFound && watchedItemFound.length > 0) {\r\n            let cp: ContactPair = new ContactPair(evt.bodyA, evt.bodyB);\r\n            this.contactPairs.push(cp);\r\n        }\r\n        \r\n    };\r\n\r\n    private endContact = (evt: any) => {\r\n        //  no need to update player contacts or contact pairs for bullets\r\n        let isBulletConntact = evt.bodyA.shapes[0].collisionGroup === COL_GRP_BULLET || evt.bodyB.shapes[0].collisionGroup === COL_GRP_BULLET;\r\n        if (isBulletConntact) return;\r\n\r\n        //  if it is a player contact remove the foreign body from the playerBodyContacts list\r\n        if (this.playerBody === evt.bodyA ) {\r\n            var bodyIDX = this.playerBodyContacts.indexOf(evt.bodyB);\r\n            this.playerBodyContacts.splice(bodyIDX, 1);\r\n            this.world.emit({ type: \"playerContactEnd\", velocity: this.playerBody.velocity, body: evt.bodyB });\r\n            //console.log(\"endContact\",evt.bodyB);\r\n            return;\r\n        } else if (this.playerBody === evt.bodyB) {\r\n            var bodyIDX = this.playerBodyContacts.indexOf(evt.bodyB);\r\n            this.playerBodyContacts.splice(bodyIDX, 1);\r\n            this.world.emit({ type: \"playerContactEnd\", velocity: this.playerBody.velocity, body: evt.bodyA });\r\n            //console.log(\"endContact\", evt.bodyA);\r\n            return;\r\n        }\r\n\r\n\r\n        //console.log(\"endContact: \", evt);\r\n        var foundIdx: number = -1;\r\n        for (var i = 0; i < this.contactPairs.length; i++) {\r\n            let cp: ContactPair = this.contactPairs[i];\r\n            if (\r\n                (cp.BodyA === evt.bodyA && cp.BodyB === evt.bodyB) ||\r\n                (cp.BodyA === evt.bodyB && cp.BodyB === evt.bodyA)) {\r\n                foundIdx = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (foundIdx >= 0) {\r\n            this.contactPairs.splice(foundIdx, 1);\r\n        }\r\n    };\r\n\r\n    private setupMaterials(): void {\r\n        this.materials = new Dictionary<p2.Material>();\r\n        this.materials.set(\"player\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"ground_default\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"box_default\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"box_highfriction\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"mob_default\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"bumper\", new p2.Material(p2.Material.idCounter++));\r\n\r\n\r\n        var playerGroundContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"ground_default\"),\r\n            {\r\n                friction: 0.85,\r\n                restitution: 0.1,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity:0\r\n            });\r\n        this.world.addContactMaterial(playerGroundContactMaterial);\r\n\r\n        var playerMobContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"mob_default\"),\r\n            {\r\n                friction: 0.2,\r\n                restitution: 0.4,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerMobContactMaterial);\r\n\r\n\r\n        var playerBoxContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"box_default\"),\r\n            {\r\n                friction: 0.50,\r\n                restitution: 0.25,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerBoxContactMaterial);\r\n\r\n        var playerBoxHighFirctContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"box_highfriction\"),\r\n            {\r\n                friction: 0.70,\r\n                restitution: 0.20,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerBoxHighFirctContactMaterial);\r\n\r\n        var playerBumperContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"bumper\"),\r\n            {\r\n                friction: 0.35,\r\n                restitution: 0.85,\r\n                stiffness: Number.MAX_VALUE,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: Number.MAX_VALUE,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerBumperContactMaterial);\r\n\r\n        var boxGroundContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"box_default\"),\r\n            this.materials.get(\"ground_default\"),\r\n            {\r\n                friction: 0.8,\r\n                restitution: 0.3,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(boxGroundContactMaterial);\r\n    }\r\n}\r\n\r\nexport var wp2 = new WorldP2();","import { State } from \"./SceneManager\";\r\n\r\n/**\r\n*   Simple keyboard mapper.\r\n*/\r\nexport class KeyboardMapper {\r\n\r\n    /**\r\n     *   Stores keyboard pressed state.\r\n     */\r\n    private keyboard: boolean[];\r\n\r\n    /**\r\n     *   Stores an array of KeyboardAction instances per Global.State. The 'state' indexer is a numeric value from the Global.State enum.\r\n     */\r\n    private stateActions: { [state: number]: KeyboardAction[]; };\r\n\r\n    private ALT_KEY: number = 18;\r\n    private SHIFT_KEY: number = 16;\r\n    private CTRL_KEY: number = 17;\r\n\r\n\r\n    /**\r\n     *   Creates a new KeyboardMapper instance.\r\n     */\r\n    constructor() {\r\n        this.stateActions = {};\r\n        this.keyboard = [];\r\n        for (var i: number = 0; i < 256; i++) { this.keyboard[i] = false; }\r\n\r\n        document.addEventListener('keydown', this.keydown.bind(this), false);\r\n        document.addEventListener('keyup', this.keyup.bind(this), false);\r\n    }\r\n\r\n    /*\r\n     *   Invokes needed action handlers based on the pressed keys.\r\n     */\r\n    public update(currentState: State) {\r\n\r\n        //  state specific handler\r\n        var actions: KeyboardAction[] = this.stateActions[currentState];\r\n        this.findHandlerAndInvoke(actions);\r\n\r\n\r\n        //  global handlers\r\n        actions = this.stateActions[State.GLOBAL];\r\n        this.findHandlerAndInvoke(actions);\r\n    }\r\n\r\n    /**\r\n     *   Searches for all keyboard handlers with matching current pressed key combinations and invokes them.\r\n     */\r\n    private findHandlerAndInvoke(actions: KeyboardAction[]) {\r\n        if (actions) {\r\n            var len = actions.length;\r\n            for (var i: number = 0; i < len; i++) {\r\n                var ka = actions[i];\r\n                if (ka && ka.isAssigned() && ka.handler\r\n                    && this.keyboard[ka.key]\r\n                    && this.keyboard[this.ALT_KEY] == ka.altKey\r\n                    && this.keyboard[this.SHIFT_KEY] == ka.shiftKey\r\n                    && this.keyboard[this.CTRL_KEY] == ka.ctrlKey) {\r\n                    ka.handler();\r\n                    if (ka.releaseKeyAfterInvoke) this.keyboard[ka.key] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private keydown(e) {\r\n        this.keyboard[e.which] = true;\r\n    }\r\n\r\n    private keyup(e) {\r\n        this.keyboard[e.which] = false;\r\n    }\r\n\r\n    public addKeyboardActionHandler = (action: KeyboardAction, state: State) => {\r\n        if (!this.stateActions[state]) this.stateActions[state] = [];\r\n        this.stateActions[state].push(action);\r\n    }\r\n\r\n    public isKeyDown(keyCode: number) {\r\n        return this.keyboard[keyCode];\r\n    }\r\n}\r\n\r\n\r\nexport class KeyboardAction {\r\n\r\n    /**\r\n    *   Returns true if the handler is assigned.\r\n    */\r\n    public isAssigned(): boolean {\r\n        return this.handler !== undefined;\r\n    }\r\n\r\n    /**\r\n    *   Creates a new KeyboardAction instance.\r\n    */\r\n    constructor(\r\n        public key: number,\r\n        public name: string,\r\n        public handler: KeyboardActionCallback | undefined = undefined,\r\n        public releaseKeyAfterInvoke: boolean = true,\r\n        public shiftKey: boolean = false,\r\n        public ctrlKey: boolean = false,\r\n        public altKey: boolean = false) {\r\n    }\r\n}\r\n\r\nexport interface KeyboardActionCallback {\r\n    (): void;\r\n}\r\n","export class LinkedList<T>{\r\n\r\n    private first: LinkedListNode<T> | null = null;\r\n    private last: LinkedListNode<T> | null= null;\r\n    private length: number = 0;\r\n\r\n    public get First(): LinkedListNode<T> | null {\r\n        return this.first;\r\n    }\r\n    public set First(node: LinkedListNode<T>| null) {\r\n        this.first = node;\r\n    }\r\n\r\n    public get Last(): LinkedListNode<T>| null {\r\n        return this.last;\r\n    }\r\n    public set Last(node: LinkedListNode<T>| null) {\r\n        this.last = node;\r\n    }\r\n\r\n    public get Length(): number {\r\n        return this.length;\r\n    }\r\n\r\n    public AddNode = (data: T): LinkedListNode<T> => {\r\n        var newLastNode = new LinkedListNode<T>();\r\n        newLastNode.data = data;\r\n        newLastNode.previous = newLastNode.next = null;\r\n        newLastNode.list = this;\r\n        if (!this.first) {\r\n            this.first = newLastNode;\r\n            this.last = newLastNode;\r\n        } else {\r\n            newLastNode.previous = this.last;\r\n            this.last!.next = newLastNode;\r\n            this.last = newLastNode;\r\n        }\r\n        this.length++;\r\n        return newLastNode;\r\n    }\r\n\r\n    public InsertNode = (data: T): LinkedListNode<T> => {\r\n        var newFirstNode = new LinkedListNode<T>();\r\n        newFirstNode.data = data;\r\n        newFirstNode.previous = newFirstNode.next = null;\r\n        newFirstNode.list = this;\r\n        if (!this.first) {\r\n            this.first = newFirstNode;\r\n            this.last = newFirstNode;\r\n        } else {\r\n            newFirstNode.next = this.first;\r\n            this.first.previous = newFirstNode;\r\n            this.first = newFirstNode;\r\n        }\r\n        this.length++;\r\n        return newFirstNode;\r\n    }\r\n\r\n    public RemoveNode(node: LinkedListNode<T>) {\r\n        if (node.previous) node.previous.next = node.next;\r\n        if (node.next) node.next.previous = node.previous;\r\n        this.length--;\r\n    }\r\n\r\n    public RollLeft() {\r\n        var last = this.first;\r\n        var second = this.first!.next;\r\n        last!.next = null;\r\n        last!.previous = this.last;\r\n        this.last!.next = last;\r\n        this.last = last;\r\n\r\n        this.first = second;\r\n        this.first!.previous = null;\r\n    }\r\n\r\n    public forEach(callback: (node: LinkedListNode<T>) => void) {\r\n        var node = this.first;\r\n        while (node) {\r\n            callback(node);\r\n            node = node.next;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LinkedListNode<T>{\r\n    public previous : LinkedListNode<T>|null = null;\r\n    public next : LinkedListNode<T>| null = null;\r\n    public data!: T;\r\n    public list!: LinkedList<T>;\r\n\r\n    public InsertBefore(data: T) {\r\n        var node = this.list.AddNode(data);\r\n        var previous = this.previous;\r\n        node.next = this;\r\n        node.previous = previous;\r\n        this.previous = node;\r\n        if (previous) {\r\n            previous.next = node;\r\n        }  \r\n        node.list = this.list;   \r\n        this.list.First = this.FindFirst();   \r\n    }\r\n\r\n    public InsertAfter(data: T) {\r\n        var node = this.list.AddNode(data);\r\n        var next = this.next;\r\n        node.previous = this;\r\n        node.next = next;\r\n        this.next = node;\r\n        if (next) {\r\n            next.previous = node;\r\n        }\r\n        node.list = this.list;\r\n        this.list.Last = this.FindLast();\r\n    }\r\n\r\n    public FindFirst(): LinkedListNode<T> {\r\n        var node: LinkedListNode<T> = this;\r\n        while (node.previous) { node = node.previous; }\r\n        return node;\r\n    }\r\n\r\n    public FindLast(): LinkedListNode<T> {\r\n        var node: LinkedListNode<T> = this;\r\n        while (node.next) { node = node.next; }\r\n        return node;\r\n    }\r\n}","import * as PIXI from 'pixi.js';\r\n\r\n/**\r\n *   Represents a parallax background with textures that tile inside the viewport. \r\n */\r\nexport class Parallax extends PIXI.Container {\r\n\r\n    private viewPortSize!: PIXI.Point;\r\n    private worldPosition: number = 0;\r\n    private parallaxFactor: number;\r\n\r\n    private spriteBuffer: Array<PIXI.Sprite> = [];\r\n    private spriteOrderList: Array<number> = [];\r\n\r\n    /**\r\n     * total width of all textures \r\n     */\r\n    private totalWidth: number = 0;\r\n\r\n    /**\r\n     *   Creates a new ParalaxSprite instance.\r\n     */\r\n    constructor(size: PIXI.Point, parallaxFactor: number, textures: Array<string | PIXI.Texture>, private textureScale?: number) {\r\n        super();\r\n        this.ViewPortSize = size || new PIXI.Point(100, 100);\r\n        this.parallaxFactor = parallaxFactor || 1;\r\n        this.textureScale = this.textureScale || 1;\r\n        this.setTextures(textures);\r\n        this.worldPosition = 0;\r\n        this.SetViewPortX(1);\r\n    }\r\n\r\n    public get WorldPosition(){\r\n        return this.worldPosition;\r\n    }\r\n\r\n    public SetViewPortX(newPositionX: number): void {\r\n        if (this.worldPosition !== newPositionX) {\r\n            this.recalculatePosition(newPositionX);\r\n        }\r\n    }\r\n\r\n    public get ViewPortSize(): PIXI.Point {\r\n        return this.viewPortSize;\r\n    }\r\n    public set ViewPortSize(point: PIXI.Point) {\r\n        this.viewPortSize = point;\r\n    }\r\n    public get ParallaxFactor(): number {\r\n        return this.parallaxFactor;\r\n    }\r\n    public set ParallaxFactor(factor: number) {\r\n        this.parallaxFactor = factor;\r\n    }\r\n\r\n    public setTextures(textures: Array<string | PIXI.Texture>): void {\r\n        var index = 0;\r\n        var textureIndex : number;\r\n\r\n        //  get the first texture to fetch the width\r\n        var t: PIXI.Texture = this.getTexture(textures, 0);\r\n        var width = t.width * this.textureScale;\r\n\r\n        while (this.spriteBuffer.length < 3  ||                 //  at least 3 textures (for shifting right/left and central)\r\n               this.spriteBuffer.length < textures.length ||    //  at least as many as given in input\r\n               this.totalWidth <= this.viewPortSize.x + width   //  at least to cover whole viewport size extended for one width\r\n            ) {\r\n\r\n            //  get the texture\r\n            textureIndex = index % textures.length;\r\n            t = this.getTexture(textures, textureIndex);\r\n            t.rotate = 8;   //  to adjust for worldContainer y scale -1\r\n\r\n            // create a sprite\r\n            var spr = new PIXI.Sprite(t);\r\n            spr.x = this.totalWidth;\r\n            spr.scale.set(this.textureScale, this.textureScale);\r\n            spr.anchor.set(0, 0);\r\n            this.spriteBuffer.push(spr);\r\n            this.spriteOrderList.push(this.spriteBuffer.length-1); //   will hold sprite indices from spritebuffer [0,1,2,3,4...]\r\n            this.addChild(spr);\r\n\r\n            //  update \r\n            this.totalWidth += spr.width;\r\n            console.log(`${t.baseTexture.imageUrl} -> width: ${t.width} spr width: ${spr.width}, total width: ${this.totalWidth}`);\r\n            index++;            \r\n        }        \r\n    }\r\n\r\n    private getTexture(textures: Array<string | PIXI.Texture>, textureIndex: number){\r\n        var t: PIXI.Texture;\r\n        if (typeof textures[textureIndex] === \"string\") {\r\n            var res = PIXI.loader.resources[textures[textureIndex] as string];\r\n            if(!res || !res.texture){\r\n                console.error('texture not fouind: ' + textures[textureIndex]);\r\n            }\r\n            t = res.texture;\r\n        } else {\r\n            t = textures[textureIndex] as PIXI.Texture;\r\n        }\r\n        return t; \r\n    }\r\n\r\n    private recalculatePosition = (newPositionX: number) => {\r\n        const firstIdx = this.spriteOrderList[0];\r\n        const firstSpr: PIXI.Sprite = this.spriteBuffer[firstIdx];\r\n        const lastIdx = this.spriteOrderList[this.spriteOrderList.length-1];\r\n        const lastSpr: PIXI.Sprite = this.spriteBuffer[lastIdx]; \r\n\r\n        //  update sprite positions\r\n        var delta =  (this.worldPosition - newPositionX) * this.parallaxFactor;\r\n        this.updatePositions(delta);\r\n\r\n        if (newPositionX > this.worldPosition) {            \r\n            //  check for removals from left side\r\n            if (firstSpr.x + firstSpr.width < 0) {\r\n                this.spriteOrderList.push(this.spriteOrderList.shift());    //  move first element to end\r\n                firstSpr.x = lastSpr.x + lastSpr.width;               \r\n            }            \r\n        } else {\r\n            //  check for removals from right side  \r\n            if (lastSpr.x > this.viewPortSize.x) {\r\n                this.spriteOrderList.unshift(this.spriteOrderList.pop());    //  move last element to start\r\n                lastSpr.x = firstSpr.x - lastSpr.width;               \r\n            }           \r\n        }\r\n        this.worldPosition = newPositionX;\r\n    };\r\n\r\n    private updatePositions(delta:number){\r\n        for(var i = 0; i< this.spriteBuffer.length; i++){\r\n            this.spriteBuffer[i].position.x += delta;\r\n        }\r\n    }\r\n}\r\n\r\n","import * as PIXI from 'pixi.js';\r\nimport { OutlineFilter } from '@pixi/filter-outline';\r\n\r\nlet COLUMN_PADDING = 1;\r\n\r\nexport class Slider extends PIXI.Container {\r\n    private textureHandle: PIXI.Texture;\r\n    private textureControl: PIXI.Texture;\r\n    private frameUpControl: PIXI.Rectangle;\r\n    private frameHighlightControl: PIXI.Rectangle;\r\n    private frameDownControl: PIXI.Rectangle;\r\n\r\n    private frameUpHandle!: PIXI.Rectangle;\r\n    private frameHighlightHandle!: PIXI.Rectangle;\r\n    private frameDownHandle!: PIXI.Rectangle;\r\n\r\n    private isPressed: boolean = false;\r\n    private text: PIXI.Text;\r\n    private requestedWidth: number;\r\n    private requestedHeight: number;\r\n\r\n    private control : PIXI.Sprite;\r\n\r\n    private handle: PIXI.Sprite;\r\n    private handleWidth: number;\r\n    private value: number = 0;\r\n\r\n    private maxX: number;\r\n    private minX: number;\r\n\r\n    private _outlineColor: number;\r\n\r\n    /**\r\n     * \r\n     * @param textureAtlas slider texture, two columns (outline, handle) and three rows (normal, highlight, pressed).\r\n     * @param sliderFrameWidth width of the second column holding the slider handle\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     */\r\n    constructor(textureAtlas: string, sliderFrameWidth: number, x: number = 0, y: number = 0 , width: number, height: number) {\r\n        super();\r\n        this.position.set(x || 0, y || 0);\r\n        this.requestedHeight = height;\r\n        this.requestedWidth = width;\r\n\r\n        this.control = new PIXI.Sprite();\r\n        this.control.anchor.set(0);\r\n        this.control.interactive = true;\r\n        this.control.buttonMode = false;\r\n        this.control.cursor = \"hover\";\r\n        this.addChild(this.control);\r\n        this.control\r\n            .on('pointerdown', this.onButtonDown)\r\n            .on('pointerup', this.onButtonUp)\r\n            .on('pointertap', this.onClick)\r\n            .on('pointerupoutside', this.onButtonUpOutside)\r\n            .on('mouseover', this.onButtonOver)\r\n            .on('mouseout', this.onButtonOut);\r\n\r\n\r\n        this.handleWidth = sliderFrameWidth;\r\n        this.handle = new PIXI.Sprite();\r\n        this.handle.position.set(0, this.requestedHeight/2);\r\n        this.handle.anchor.set(0, 0.5);\r\n        this.addChild(this.handle);\r\n        this.handle.interactive = true;\r\n        this.handle.buttonMode = false;\r\n        this.handle.cursor = \"hover\";\r\n        this.handle\r\n            .on('pointerdown', this.onDragStart)\r\n            .on('pointerup', this.onDragEnd)\r\n            .on('pointerupoutside', this.onDragEnd)\r\n            .on('pointermove', this.onDragMove);\r\n           \r\n\r\n        //  setup textures\r\n        this.SetTexture(textureAtlas, sliderFrameWidth);\r\n        this.IsPressed = false;\r\n        this.applyTextureFrames();\r\n\r\n        this.Value = 0.1;\r\n    }\r\n\r\n\r\n    public get Value() {\r\n        return this.value;\r\n    }\r\n    public set Value(value: number) {\r\n        if (this.value !== value) {\r\n            this.value = value;            \r\n            this.handle.position.x = this.maxX * value;\r\n            this.emit('valueChange', value);\r\n            this.emit('valueChanged', value);\r\n        }        \r\n    }\r\n\r\n    public get outlineColor(){\r\n        return this._outlineColor;\r\n    }\r\n    public set outlineColor(value: number) {\r\n        this._outlineColor = value;\r\n        this.control.filters = [new OutlineFilter(1, this._outlineColor, 0.5)];      \r\n    }\r\n\r\n    public get IsPressed() {\r\n        return this.isPressed;\r\n    }\r\n    public set IsPressed(state: boolean) {\r\n        this.isPressed = state;\r\n        this.applyTextureFrames();\r\n    }\r\n\r\n    public get Text() {\r\n        return this.text;\r\n    }\r\n    public set Text(text: PIXI.Text) {\r\n        if (this.text) {\r\n            this.removeChild(this.text);\r\n        }\r\n        this.text = text;\r\n        if (this.text) {\r\n            this.text.anchor.set(0.5, 0.5);\r\n            var x = (this.width / this.scale.x) / 2;\r\n            var y = (this.height / this.scale.y) / 2;\r\n            this.text.position.set(x, y);\r\n            this.addChild(this.text);\r\n        }\r\n    }\r\n\r\n\r\n    public onClick = (e) => {\r\n        this.setSliderFromeEvent(e);\r\n        this.Value = this.getCalculatedValue();\r\n        return false;\r\n    }\r\n\r\n    private dragOffsetX: number = 0;\r\n    private isDragging: boolean = false;\r\n\r\n    private getCalculatedValue() {\r\n        var position = this.handle.x - this.minX;\r\n        var pct = position / this.maxX;\r\n        return this.precise_round(pct, 2);\r\n    }\r\n\r\n    private onDragStart = (e) => {\r\n        this.isDragging = true;\r\n        var pos = e.data.getLocalPosition(this.handle);\r\n        this.dragOffsetX = pos.x;\r\n    }\r\n    private onDragEnd = (e) => {\r\n        this.isDragging = false;\r\n        this.Value = this.getCalculatedValue();\r\n        e.stopped = true;\r\n    }\r\n\r\n    private onDragMove = (e:Event) => {\r\n        if (this.isDragging) {\r\n            this.setSliderFromeEvent(e);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private setSliderFromeEvent(e) {\r\n        var newPosition = e.data.getLocalPosition(this.handle.parent);\r\n        if (this.isDragging && this.dragOffsetX) {\r\n            newPosition.x -= this.dragOffsetX;\r\n        }\r\n        this.handle.x = Math.min(this.maxX, Math.max(this.minX, newPosition.x));\r\n        this.emit('valueChange', this.getCalculatedValue());\r\n    }\r\n    private precise_round(num, decimals): number {\r\n        var t = Math.pow(10, decimals);\r\n        var result = (Math.round((num * t) + (decimals > 0 ? 1 : 0) * ((Math as any).sign(num) * (10 / Math.pow(100, decimals)))) / t).toFixed(decimals);\r\n        return parseFloat(result);\r\n    }\r\n\r\n    private onButtonDown = () => {\r\n        this.textureControl.frame = this.frameDownControl;\r\n        this.textureHandle.frame = this.frameDownHandle;\r\n    };\r\n\r\n    private onButtonUp = (e) => {\r\n        this.applyTextureFrames();\r\n    };\r\n\r\n    private onButtonUpOutside = () => {\r\n        this.applyTextureFrames();\r\n    };\r\n\r\n    private onButtonOver = () => {\r\n        this.control.texture.frame = this.frameHighlightControl;\r\n        this.textureHandle.frame = this.frameHighlightHandle;\r\n    };\r\n\r\n    private onButtonOut = () => {\r\n        this.applyTextureFrames();\r\n    };\r\n\r\n\r\n    private applyTextureFrames() {\r\n        this.textureControl.frame = this.isPressed ? this.frameDownControl : this.frameUpControl;\r\n        this.textureHandle.frame = this.isPressed ? this.frameDownHandle : this.frameUpHandle;\r\n    }\r\n\r\n    public SetTexture(textureName: string, handleWidth: number) {\r\n        //  prepare textures\r\n        this.textureControl = new PIXI.Texture(PIXI.loader.resources[textureName].texture.baseTexture);\r\n        this.textureControl.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        this.textureHandle = new PIXI.Texture(PIXI.loader.resources[textureName].texture.baseTexture);\r\n        \r\n        //  calculate rect frames for textures\r\n        var frameHeight = this.textureControl.height / 3;\r\n        var frameWidth = this.textureControl.width - handleWidth - COLUMN_PADDING;\r\n        this.frameUpControl = new PIXI.Rectangle(0, 0 * frameHeight, frameWidth, frameHeight);\r\n        this.frameHighlightControl = new PIXI.Rectangle(0, 1 * frameHeight, frameWidth, frameHeight);\r\n        this.frameDownControl = new PIXI.Rectangle(0, 2 * frameHeight, frameWidth, frameHeight);\r\n        \r\n        var x = frameWidth + COLUMN_PADDING; //  texture elements are separated by padding pixels\r\n        this.frameUpHandle = new PIXI.Rectangle(x, 0 * frameHeight, handleWidth, frameHeight);\r\n        this.frameHighlightHandle = new PIXI.Rectangle(x, 1 * frameHeight, handleWidth, frameHeight);\r\n        this.frameDownHandle = new PIXI.Rectangle(x, 2 * frameHeight, handleWidth, frameHeight);\r\n\r\n        // set frames\r\n        this.applyTextureFrames();\r\n        \r\n        this.control.texture = this.textureControl;\r\n        this.control.width = this.requestedWidth;     \r\n        this.control.height = this.requestedHeight;     \r\n\r\n        // handle\r\n        this.handle.texture = this.textureHandle;\r\n        this.handle.height = this.requestedHeight;\r\n\r\n\r\n        this.maxX = this.requestedWidth - this.handleWidth;\r\n        this.minX = 0;\r\n    }\r\n}\r\n","import { PIXI, Scene, Global} from \"..\";\r\nimport { SceneManager } from \"..\";\r\nimport { LoaderScene } from \"./LoaderScene\";\r\nimport { SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT } from '..';\r\nimport { Quest } from '../QuestSystem/Quest';\r\n\r\nconst PRELOAD_BOOT_ASSETS = [\r\n    //  cursors\r\n    'assets/gui/cur_default.png',\r\n    'assets/gui/cur_hover.png',\r\n    'assets/gui/cur_target.png',\r\n    'assets/levels.json',\r\n    'assets/quests.json'\r\n];\r\n\r\n/**\r\n * Preloads common assets, after preloading parses user state and starts preloading level assets.\r\n */\r\nexport class BootScene extends Scene {\r\n    private loadingMessage!: PIXI.Text;\r\n    private spinner!: PIXI.Sprite;\r\n    \r\n    \r\n    constructor(scm:SceneManager) {\r\n        super(scm, \"Boot\");\r\n        this.BackGroundColor = 0;\r\n    }\r\n\r\n    public onUpdate = (dt: number)=>{\r\n        if (this.spinner) {\r\n            this.spinner.rotation += 0.05;\r\n        }\r\n    }\r\n\r\n    public onActivate = () => {\r\n        this.loadingMessage = new PIXI.Text(\"booting ...\", {\r\n             fontSize: \"36px\", \r\n             fontFamily: \"Permanent Marker\", \r\n             fill: 0x0ff00, \r\n             dropShadow: true, \r\n             stroke: 0x44ff44, \r\n             strokeThickness: 1 \r\n        });\r\n        this.loadingMessage.anchor.set(0.5, 0.5);\r\n        this.loadingMessage.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT - 80);\r\n        this.addChild(this.loadingMessage);\r\n\r\n        //------------------------------------------------------\r\n        //  get loading image and define callback on image load\r\n        //------------------------------------------------------\r\n        PIXI.loader.reset()\r\n        .add(\"assets/loading.png\")\r\n        .load(this.startPreloading);\r\n    };\r\n    \r\n    /**\r\n     *  Downloads common assets, JSON files etc.\r\n     */\r\n    private startPreloading = async () => {\r\n        \r\n        //   first add a loading spinner\r\n        var loadingTexture = PIXI.Texture.fromImage(\"assets/loading.png\");\r\n        this.spinner = new PIXI.Sprite(loadingTexture);\r\n        this.spinner.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT);\r\n        this.spinner.anchor.set(0.5, 0.5);\r\n        this.spinner.scale.set(0.5);\r\n        this.addChild(this.spinner);\r\n        \r\n        console.log('initializing common assets preloading ...', PRELOAD_BOOT_ASSETS);\r\n        PIXI.loader\r\n            .add(PRELOAD_BOOT_ASSETS)\r\n            .load(this.onPreloadFinished); \r\n    }\r\n\r\n    private onPreloadFinished = async ()=>{\r\n        //  preload of common content is finished\r\n        \r\n        //  setup custom cursors\r\n        var defaultIcon = \"url('assets/gui/cur_default.png'),auto\";\r\n        var hoverIcon = \"url('assets/gui/cur_hover.png'),auto\";\r\n        var targetIcon = \"url('assets/gui/cur_target.png') 24 24, auto\";\r\n        this.sceneManager.Renderer.plugins.interaction.cursorStyles.default = defaultIcon;\r\n        this.sceneManager.Renderer.plugins.interaction.cursorStyles.hover = hoverIcon;\r\n        this.sceneManager.Renderer.plugins.interaction.cursorStyles.target = targetIcon;\r\n        document.body.style.cursor = defaultIcon;\r\n\r\n        // save levels and quests\r\n        Global.LevelDefinitions = PIXI.loader.resources[\"assets/levels.json\"].data;\r\n        var questsObj = PIXI.loader.resources[\"assets/quests.json\"].data;\r\n        Global.LevelDefinitions.quests = questsObj.quests as Array<Quest>;\r\n        Global.LevelDefinitions.quests.forEach((q: Quest) => {\r\n            q.itemId = q.itemId || 0;\r\n            q.itemsNeeded = q.itemsNeeded || 0;\r\n            q.itemsCollected = 0;\r\n            q.rewardCoins = q.rewardCoins || 0;\r\n            q.rewardExp = q.rewardExp || 0;\r\n        });\r\n\r\n        const ls = new LoaderScene(this.sceneManager);\r\n        this.sceneManager.AddScene(ls);\r\n        this.sceneManager.ActivateScene(ls); \r\n    }\r\n}","import { Global, PIXI, Scene, SceneManager } from \"..\";\r\nimport { GetLevelAssets } from '../world/LevelHelper';\r\nimport { stats } from '../objects/PlayerStats';\r\nimport { SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT } from '../constants';\r\nimport { MasterHud } from '../objects/MasterHud';\r\nimport { MainScene } from './MainScene';\r\nimport { OptionsScene } from './OptionsScene';\r\nimport { CutScene } from './CutScene';\r\n\r\n\r\nexport class LoaderScene extends Scene {\r\n    private loadingMessage: PIXI.Text;\r\n    private spinner: PIXI.Sprite;\r\n\r\n    private readonly preloadAssets : string[] = [  \r\n        //  gui stuff\r\n        'assets/gui/gui_fs_enter.png',\r\n        'assets/gui/gui_fs_exit.png',\r\n        'assets/gui/gui_options.png',\r\n        'assets/gui/gui_back.png',\r\n        'assets/gui/gui_button1.png',\r\n        'assets/gui/gui_slider1.png', \r\n        'assets/gui/gui_minus.png',  \r\n\r\n        'assets/gui/heart.png',\r\n        'assets/gui/coin.png',\r\n        'assets/gui/rect.png',\r\n        'assets/gui/stat_panel.png',\r\n        'assets/gui/exp_panel.png',\r\n        'assets/gui/exp_prefill.png',\r\n        'assets/gui/exp_fill.png',\r\n        'assets/gui/panel.png',\r\n\r\n        //\r\n        'assets/hero.png',\r\n        'assets/hero-dead.png',\r\n        'assets/star.png',\r\n        'assets/img/effects/flame.png',\r\n        'assets/img/effects/jump_smoke.png',\r\n        'assets/img/effects/load.png'\r\n    ];\r\n\r\n    constructor(scm:SceneManager) {\r\n        super(scm, \"Loader\");\r\n        this.BackGroundColor = 0;\r\n        this.loadingMessage = new PIXI.Text(\"loading ...\", { \r\n            fontSize: 36, \r\n            fontFamily: \"Permanent Marker\", \r\n            fill: 0x0ff00, \r\n            dropShadow: true, \r\n            align: \"center\",\r\n            stroke: 0x44ff44, \r\n            strokeThickness: 1\r\n        });\r\n        this.loadingMessage.anchor.set(0.5, 0.5);\r\n        this.loadingMessage.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT - 80);\r\n        this.addChild(this.loadingMessage);\r\n\r\n        var loadingTexture = PIXI.Texture.fromImage(\"assets/loading.png\");\r\n        this.spinner = new PIXI.Sprite(loadingTexture);\r\n        this.spinner.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT);\r\n        this.spinner.anchor.set(0.5, 0.5);\r\n        this.spinner.scale.set(0.5);\r\n        this.addChild(this.spinner); \r\n    }\r\n\r\n    public onUpdate = (dt: number)=>{\r\n        if (this.spinner) {\r\n            this.spinner.rotation += 0.05;\r\n        }\r\n    }\r\n\r\n    public onActivate = () => {   \r\n        console.log(`downloading level ${stats.currentGameLevel}...`);\r\n        let assets: string[] = GetLevelAssets(Global.LevelDefinitions, stats.currentGameLevel);\r\n        assets = assets.concat(this.preloadAssets);\r\n\r\n        PIXI.loader\r\n            .reset()\r\n            .add(assets)\r\n            .load(this.handleLevelLoading)\r\n            .on(\"progress\", this.onProgress);\r\n    };\r\n   \r\n    private handleLevelLoading = ()=> {        \r\n        if(!this.sceneManager.HasScene(\"Main\")){\r\n            console.log('adding scenes...');    \r\n            //this.sceneManager.Renderer.roundPixels = true;\r\n            this.sceneManager.AddScene(new MainScene(this.sceneManager));\r\n            this.sceneManager.AddScene(new OptionsScene(this.sceneManager));\r\n            this.sceneManager.AddScene(new CutScene(this.sceneManager));\r\n            this.sceneManager.MasterHudOverlay = new MasterHud(this.sceneManager);;\r\n        }\r\n\r\n        try {\r\n            let mainScene = this.sceneManager.GetScene(\"Main\") as MainScene;\r\n            mainScene.startLevel();            \r\n        } catch (e) {\r\n            console.log(\"exception: \", e);\r\n        }\r\n    }\r\n\r\n    \r\n    private onProgress = (loader: PIXI.loaders.Loader, resource: PIXI.loaders.Resource) => {\r\n        var progress = loader.progress;\r\n        console.log(\"progress: \" + progress.toFixed(0) + \"%, asset: \" + resource.name);\r\n        this.loadingMessage.text = \"Loading \" + progress.toFixed(0) + \" %\";\r\n    };\r\n}","import { LevelLoader } from \"../world/LevelLoader\";\r\nimport { wp2 } from \"../world/WorldP2\";\r\nimport { Mob } from \"../mobs/Mob\";\r\nimport { AnimatedSprite, AnimationSequence } from \"../_engine/AnimatedSprite\";\r\nimport { stats } from '../objects/PlayerStats';\r\nimport { Global } from '..';\r\n\r\nexport class SpawnPoint {\r\n    private mobCount: number = 0;\r\n    private nextSpawn: number = 0;\r\n    private worldContainer: PIXI.Container;\r\n\r\n    constructor(public name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private area: number,\r\n        private maxMobCount: number,\r\n        private respawnSeconds: number,\r\n        private entity: any,\r\n        private active: boolean = true) {\r\n        this.nextSpawn = performance.now() / 1000;\r\n    }\r\n\r\n    public get IsActive() { return this.active; };\r\n    public set IsActive(value: boolean) { this.active = value; };\r\n\r\n    public onUpdate(dt: number) {\r\n        if (this.active && this.mobCount < this.maxMobCount) {\r\n\r\n            //  is it time to respawn?\r\n            var now = performance.now() / 1000;\r\n            if (this.nextSpawn <= now) {\r\n\r\n                if (!this.worldContainer) {\r\n                    this.worldContainer = (Global.getScm().GetScene(\"Main\") as any).worldContainer;\r\n                }\r\n                var mobBody = LevelLoader.createMob(stats.currentLevel.templates, this.entity);\r\n                let dispObj = (mobBody as any).DisplayObject as Mob;\r\n\r\n                let x = this.x + (Math.random() * this.area) - (this.area / 2);\r\n                let y = this.y;\r\n\r\n                mobBody.position = [x, y];\r\n                wp2.addBody(mobBody);\r\n\r\n                dispObj.position.set(x, y);\r\n                dispObj.visible = false;\r\n                dispObj.isLoading = true;\r\n                this.worldContainer.addChild(dispObj);\r\n\r\n                let loadSpr = new AnimatedSprite();\r\n                loadSpr.addAnimations(new AnimationSequence(\"load\", \"assets/img/effects/load.png\", [0, 1, 2, 3], 64, 64));\r\n                loadSpr.anchor.set(0.5);\r\n                loadSpr.position.set(x, y + 10);\r\n                loadSpr.play(\"load\", 4, true);\r\n                //loadSpr.scale.set(1, -1);\r\n                this.worldContainer.addChild(loadSpr);\r\n\r\n                setTimeout(() => {\r\n                    this.worldContainer.removeChild(loadSpr);\r\n                    dispObj.isLoading = false;\r\n                    dispObj.visible = true;\r\n                }, 3000);\r\n\r\n                (dispObj as Mob).onDeath = () => {\r\n                    console.log(\"mob died\");\r\n                    this.mobCount--;\r\n                }\r\n\r\n                this.mobCount++;\r\n                this.nextSpawn = (performance.now() / 1000) + this.respawnSeconds;\r\n            }\r\n        }\r\n    }\r\n}","import { AI } from \"./AI\";\r\nimport { Mob } from \"./Mob\";\r\n\r\n/**\r\n * Can attack and turn towards player but invokes no other actions.\r\n */\r\nexport class BasicStaticAI extends AI {\r\n\r\n    constructor(mobEntity: Mob) {\r\n        super(mobEntity);\r\n    }\r\n\r\n    public canFire() {\r\n        let nowMilliseconds = performance.now();\r\n        let rnd = Math.random() * 2000;\r\n        let can = (this.lastFire + this.attackCD  + rnd <= nowMilliseconds);\r\n        if (can) {\r\n            let rnd = Math.random();\r\n            can = can && rnd > 0.3;\r\n            this.lastFire = performance.now(); //  set to prevent firing in next update if 'can' is false\r\n        }\r\n        return can;\r\n    };\r\n}","import * as Global from \"../global\";\r\nimport { Mob} from \"./Mob\";\r\nimport { AtrType, DirectionH } from '../enums';\r\n\r\n/**\r\n * Max distance at which the target can be acquired.\r\n */\r\nlet LOCK_DISTANCE = 800;\r\n\r\n/**\r\n * Max distance at which the target is tracked.\r\n */\r\nlet TRACK_DISTANCE = 1050;\r\n\r\n/**\r\n * Base for all mob AI. Provides low level AI functions.\r\n */\r\nexport class AI {\r\n\r\n    /**\r\n     * True if the AI has a 'target lock' on the player.\r\n     */\r\n    protected hasTarget: boolean;\r\n\r\n    /**\r\n     * Distance from player.\r\n     */\r\n    protected targetDistance: number;\r\n\r\n    protected lastFire: number = 0;//performance.now() + Math.random() * 10;    //  so that the attack is not triggered at init time\r\n\r\n    protected attackCD: number;\r\n\r\n    constructor(protected mobEntity: Mob) {\r\n        this.attackCD = mobEntity.attributes[AtrType.AtkCD];\r\n    }\r\n\r\n    private calcDistance() {\r\n        let dx = Global.position.x - this.mobEntity.x;\r\n        let dy = Global.position.y - this.mobEntity.y;\r\n        this.targetDistance = Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    private turnTowardsTarget() {\r\n        //  negative left, positive right\r\n        let dir = Global.position.x - this.mobEntity.x;\r\n\r\n        if (dir < 0 && this.mobEntity.direction != DirectionH.Left) {\r\n            this.mobEntity.direction = DirectionH.Left;\r\n        } else if (dir > 0 && this.mobEntity.direction != DirectionH.Right) {\r\n            this.mobEntity.direction = DirectionH.Right;\r\n        }\r\n    }\r\n\r\n    public canFire() {\r\n        let nowMilliseconds = performance.now();\r\n        return (this.lastFire + this.attackCD <= nowMilliseconds);\r\n    };\r\n\r\n    public onUpdate = (dt: number) => {\r\n        this.calcDistance();\r\n\r\n        //  TODO: implement visibility check\r\n        if (this.targetDistance < TRACK_DISTANCE) {\r\n            this.turnTowardsTarget();\r\n        }\r\n\r\n        if (this.targetDistance < LOCK_DISTANCE) {\r\n            this.hasTarget = true;\r\n\r\n            //  check attack CD            \r\n            if (this.canFire()) {\r\n                this.mobEntity.attack();\r\n                this.lastFire = performance.now();\r\n            }\r\n        } else {\r\n            this.hasTarget = false;\r\n        }\r\n    }\r\n}","import { SceneManager, Button, SCENE_WIDTH } from \"..\";\r\n\r\nconst BTN_X = SCENE_WIDTH - 48;\r\nconst BTN_Y = 4;\r\nconst BTN_SCALE = 1.0;\r\n\r\n/**\r\n * Implements options and full screen togle buttons.\r\n */\r\nexport class MasterHud extends PIXI.Container {\r\n    constructor(private sceneManager:SceneManager){\r\n        super();\r\n\r\n        //----------------------------\r\n        //  full screen toggler\r\n        //----------------------------\r\n        [\"\", \"webkit\", \"moz\", \"ms\"].forEach(\r\n            prefix => document.addEventListener(prefix + \"fullscreenchange\", (event) => {\r\n                if (this.isFullScreen) {\r\n                    btnFullScreen.setTexture(\"assets/gui/gui_fs_exit.png\");\r\n                } else {\r\n                    btnFullScreen.setTexture(\"assets/gui/gui_fs_enter.png\");\r\n                }\r\n                btnFullScreen.scale.set(BTN_SCALE);\r\n            }, false)\r\n        );\r\n\r\n        //--------------------------------\r\n        //  add full screen, options and \r\n        //  back buttons\r\n        //--------------------------------       \r\n        var btnFullScreen = new Button(\"assets/gui/gui_fs_enter.png\", BTN_X, BTN_Y);\r\n        btnFullScreen.onClick = () => this.toggleFullScreen();\r\n        btnFullScreen.scale.set(BTN_SCALE);\r\n        this.addChild(btnFullScreen);\r\n\r\n        var btnOptions = new Button(\"assets/gui/gui_options.png\", BTN_X - 48, BTN_Y);\r\n        btnOptions.onClick = () => this.sceneManager.ActivateScene(\"Options\");\r\n        btnOptions.name = \"BTN_OPTIONS\";\r\n        btnOptions.scale.set(BTN_SCALE);\r\n        this.addChild(btnOptions);\r\n    }   \r\n\r\n    private get isFullScreen(): boolean {\r\n        var doc: any = document;\r\n        return !(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement);\r\n    }\r\n    private toggleFullScreen() {\r\n        var doc: any = document;\r\n        var docElm: any = document.documentElement;\r\n\r\n        var requestFullScreen = docElm.requestFullscreen || docElm.mozRequestFullScreen || docElm.webkitRequestFullScreen || docElm.msRequestFullscreen;\r\n        var exitFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;\r\n\r\n        if (!this.isFullScreen) {\r\n            requestFullScreen.call(docElm);\r\n        } else {\r\n            exitFullScreen.call(doc);\r\n        }\r\n    } \r\n}","import * as p2 from 'p2';\r\nimport * as TWEEN from \"@tweenjs/tween.js\";\r\nimport { PIXI, SceneManager, Scene, Parallax, Global } from \"..\";\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { HeroCharacter } from '../objects/HeroCharacter';\r\nimport { StatsHud } from '../objects/StatsHud';\r\nimport { stats } from '../objects/PlayerStats';\r\nimport { Bullet } from '../objects/Bullet';\r\nimport { BURN_TOPIC, IBurnChangeEvent, GROUND_SHAKE, eventEmitter } from '../events';\r\nimport { SCENE_HEIGHT, SCENE_HALF_WIDTH, SCENE_BACKCOLOR, MSG_COIN_STYLE, MSG_WARN_STYLE, ANIMATION_FPS_SLOW } from '../constants';\r\nimport { Lava } from '../objects/Lava';\r\nimport { LevelLoader } from '../world/LevelLoader';\r\nimport { Platform } from '../objects/Platform';\r\nimport { Bumper } from '../objects/Bumper';\r\nimport { snd } from '../world/SoundMan';\r\nimport { CutScene } from './CutScene';\r\nimport { QuestManager } from '../questSystem/QuestManager';\r\nimport { StatType, DamageType } from '../enums';\r\n\r\n\r\nexport class MainScene extends Scene {\r\n    private worldContainer: PIXI.Container;\r\n    private hero: HeroCharacter;\r\n    private questMngr : QuestManager;\r\n    private hud : StatsHud;\r\n\r\n\r\n    private shakeDuration: number = 0;\r\n    private shakeEnd: number = 0;\r\n    private nextShake: number = 0;\r\n    private magnitude: number = 0;\r\n    private shakeX: number;\r\n    private shakeY: number;\r\n    private readonly SHAKE_COUNT = 15;\r\n\r\n    constructor(scm: SceneManager) {\r\n        super(scm, \"Main\");\r\n        this.BackGroundColor = SCENE_BACKCOLOR;\r\n        this.setup();\r\n    }\r\n\r\n    public onUpdate(dt: number) {\r\n        //-------------------------------------------\r\n        //  update world & world container position\r\n        //-------------------------------------------        \r\n        wp2.update(dt);\r\n        this.worldContainer.x = (SCENE_HALF_WIDTH - this.hero.x);\r\n        this.worldContainer.y = (SCENE_HEIGHT - 70);\r\n        \r\n        //-------------------------------------------\r\n        //  update parallax\r\n        //-------------------------------------------\r\n        stats.currentLevel.parallax.forEach(p => {\r\n            p.SetViewPortX(Global.position.x);\r\n            p.position.x = Global.position.x - SCENE_HALF_WIDTH;\r\n        });\r\n\r\n        //-------------------------------------------\r\n        //  update entities position\r\n        //-------------------------------------------\r\n        var bodies = wp2.bodies;\r\n        for (var i = 0, len = bodies.length; i < len; i++) {\r\n            let body = bodies[i] as any;\r\n            let displayObject: PIXI.DisplayObject = (body as any).DisplayObject as PIXI.DisplayObject;\r\n            if (displayObject && displayObject.visible && body.type !== p2.Body.STATIC) {\r\n                displayObject.position.set(Math.floor(body.interpolatedPosition[0]), Math.floor(body.interpolatedPosition[1]));\r\n                displayObject.rotation = body.interpolatedAngle;\r\n            }            \r\n            \r\n            if (body.Trigger && body.Trigger.type === \"distance\") {\r\n                if (this.questMngr.canActivateTrigger(body.Trigger)) {\r\n                    let x = this.hero.position.x - body.position[0];\r\n                    let y = this.hero.position.y - body.position[1];\r\n                    let distance = Math.sqrt(x * x + y * y);\r\n                    if (body.Trigger.distance >= distance) {\r\n                        this.questMngr.handleTriggerEvent(body);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        //-------------------------------------------\r\n        //  collisions with collectible items\r\n        //-------------------------------------------\r\n        for (var i = 0, len = wp2.playerContacts.length; i < len; i++) {\r\n            let body: any = wp2.playerContacts[i];\r\n            if (body.DisplayObject && body.DisplayObject.interactionType) {\r\n                this.handleInteractiveCollision(body);\r\n            }\r\n            \r\n            if (body.Trigger && body.Trigger.type === \"collision\") {\r\n                this.questMngr.handleTriggerEvent(body);\r\n            }            \r\n        }\r\n\r\n        //-------------------------------------------\r\n        //  invoke update on each updateable\r\n        //-------------------------------------------\r\n        for (var i = 0, len = this.worldContainer.children.length; i < len; i++) {\r\n            let child: any = this.worldContainer.children[i];\r\n            if (child && child.onUpdate) {\r\n                child.onUpdate(dt);\r\n            }\r\n        };\r\n\r\n        //-------------------------------------------\r\n        //  Spawn points\r\n        //-------------------------------------------\r\n        for (var i = 0, len = stats.currentLevel.spawnPoints.length; i < len; i++) {\r\n            stats.currentLevel.spawnPoints[i].onUpdate(dt);\r\n        }\r\n\r\n        this.hud.onUpdate(dt);\r\n        stats.onUpdate(dt);\r\n\r\n        var now = performance.now();\r\n\r\n        //-------------------------------------------\r\n        //  check if player is dead\r\n        //-------------------------------------------\r\n        if (stats.getStat(StatType.HP) <= 0) {\r\n            this.IsHeroInteractive = false;\r\n            this.hero.visible = false;\r\n            var cutScene = this.sceneManager.GetScene(\"CutScene\") as CutScene;\r\n            var backGroundTexture = this.sceneManager.CaptureScene();\r\n            cutScene.SetBackGround(backGroundTexture, this.scale);\r\n            cutScene.DeathScene = true;\r\n            this.sceneManager.ActivateScene(cutScene);\r\n        }  else if (this.shakeEnd >= now) {\r\n            if (this.nextShake <= now) {\r\n                //  original start position\r\n                let x = (SCENE_HALF_WIDTH - this.hero.x);\r\n                let y = (SCENE_HEIGHT - 70);\r\n\r\n                this.shakeX = x + this.randomRange(-this.magnitude / 2, this.magnitude / 2);\r\n                this.shakeY = y + this.randomRange(-this.magnitude, this.magnitude);\r\n                //console.log(\"shake: \" + this.shakeX + \", \" + this.shakeY, this.magnitude, this.shakeEnd);\r\n\r\n                //  reduce for next shake\r\n                this.magnitude -= this.magnitude / this.SHAKE_COUNT;\r\n                this.nextShake = now + this.shakeDuration;\r\n            }\r\n\r\n            this.worldContainer.x = this.shakeX;\r\n            this.worldContainer.y = this.shakeY;\r\n        }\r\n    }\r\n\r\n    private setup() {\r\n        this.worldContainer = new PIXI.Container();\r\n        this.worldContainer.scale.y = -1;\r\n        this.addChild(this.worldContainer);\r\n        Global.worldContainer = this.worldContainer;\r\n\r\n        //-----------------------------\r\n        //  setup hero \r\n        //-----------------------------     \r\n        this.hero = new HeroCharacter(this.worldContainer);\r\n        this.hero.name = \"hero\";\r\n        this.hero.x = SCENE_HALF_WIDTH;\r\n        this.worldContainer.addChild(this.hero);\r\n        this.hero.play(\"idle\", ANIMATION_FPS_SLOW);\r\n\r\n        //--------------------------------------\r\n        //  setup hud's\r\n        //--------------------------------------\r\n        this.hud = new StatsHud();\r\n        this.HudOverlay = this.hud;\r\n\r\n        //--------------------------------------\r\n        //  register custom entity factories\r\n        //--------------------------------------\r\n        LevelLoader.registerFactory(\"Lava\", (def)=> new Lava(def.texture as string));\r\n        LevelLoader.registerFactory(\"Platform\", (def)=> {            \r\n            if (typeof def.texture === \"string\") {\r\n                return new Platform(def.tilesX || 1, 1, [def.texture]);\r\n            } else {\r\n                return new Platform(def.tilesX || 1, def.tilesY || 1, def.texture);\r\n            }\r\n        });\r\n        LevelLoader.registerFactory(\"Bumper\", (def)=> new Bumper());\r\n\r\n        this.questMngr = new QuestManager(this);\r\n        eventEmitter.on(BURN_TOPIC, (event: IBurnChangeEvent) => event.isBurning ? snd.burn():snd.burnStop() );  \r\n        eventEmitter.on(GROUND_SHAKE, this.startGroundShake);\r\n    }\r\n\r\n    public startLevel(){\r\n        this.clearLevel();\r\n\r\n        //--------------------------------------\r\n        //  test level loading\r\n        //  TODO: this should be via user save file\r\n        //--------------------------------------\r\n        stats.loadLevel();\r\n        snd.playTrack(stats.currentLevel.audioTrack || 0);\r\n        stats.currentLevel.parallax.forEach((plx, idx) => {\r\n            this.worldContainer.addChildAt(plx, idx);\r\n            plx.SetViewPortX(stats.currentLevel.start[0]);\r\n        });\r\n\r\n        //--------------------------------------\r\n        //  add all objects from level to scene\r\n        //--------------------------------------\r\n        stats.currentLevel.entities.forEach((body: any) => {\r\n            this.worldContainer.addChild(body.DisplayObject);\r\n\r\n            //  if entity is a simple sprite it has a \"fake\" body  \r\n            //  without any shapes, so no need to add it to world\r\n            if (body.shapes && body.shapes.length > 0) {\r\n                wp2.addBody(body);\r\n            }\r\n        });\r\n\r\n        //  set start for player\r\n        wp2.playerBody.position[0] = stats.currentLevel.start[0];\r\n        wp2.playerBody.position[1] = stats.currentLevel.start[1];\r\n        \r\n        this.questMngr.reset();\r\n        this.hero.visible = true;\r\n        this.IsHeroInteractive = true;\r\n        this.hud.visible = true;\r\n        this.sceneManager.ActivateScene(this);\r\n    }\r\n\r\n    /**\r\n     * Sets player interactivity.\r\n     */\r\n    public set IsHeroInteractive(value: boolean) {\r\n        if (this.hero.IsInteractive !== value) {\r\n            this.hero.IsInteractive = value;\r\n            if (!this.hero.IsInteractive) {\r\n                this.hero.play(\"idle\", ANIMATION_FPS_SLOW);\r\n                snd.idle();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts an animation tween and removes the display object & body from scene.\r\n     * @param dispObj\r\n     */\r\n    private collectObject(body): void {\r\n        var dispObj: PIXI.DisplayObject = body.DisplayObject as PIXI.DisplayObject;\r\n\r\n        var orgScaleX = dispObj.scale.x;\r\n        var upX = dispObj.position.x + 45;\r\n        var upY = dispObj.position.y + 160;\r\n\r\n        var endX = dispObj.position.x - SCENE_HALF_WIDTH;\r\n        var endY = SCENE_HEIGHT;\r\n\r\n        var moveUp = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: upX, y: upY }, 150);\r\n\r\n        var scale = new TWEEN.Tween(dispObj.scale)\r\n            .to({ x: orgScaleX + 0.5, y: orgScaleX + 0.5 }, 500)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var moveAway = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: endX, y: endY }, 2000)\r\n            .easing(TWEEN.Easing.Back.In)\r\n            .onComplete(() => this.worldContainer.removeChild(dispObj));\r\n\r\n        moveUp.chain(scale, moveAway).start();\r\n        this.removeEntity(body);\r\n    }\r\n\r\n    /**\r\n     * Handles player collision with interactive objects.\r\n     * @param body\r\n     */\r\n    private handleInteractiveCollision(body: any): void {\r\n        var dispObj: PIXI.DisplayObject = body.DisplayObject as PIXI.DisplayObject;\r\n        let interactionType: number = body.DisplayObject.interactionType;\r\n        switch (interactionType) {\r\n            case 1: //  small coin\r\n                stats.increaseStat(StatType.Coins, 1);\r\n                this.collectObject(body);\r\n                this.hud.addInfoMessage(dispObj.position, \"+1 coin\", MSG_COIN_STYLE, -100);\r\n                snd.coin();\r\n                break;\r\n\r\n            case 2: //  coin\r\n                stats.increaseStat(StatType.Coins, 10);\r\n                this.collectObject(body);\r\n                this.hud.addInfoMessage(dispObj.position, \"+10 coins\", MSG_COIN_STYLE, -100);\r\n                snd.coin();\r\n                break;\r\n\r\n            case 3: //  blue gem\r\n                stats.increaseStat(StatType.Coins, 100);\r\n                this.collectObject(body);\r\n                this.hud.addInfoMessage(dispObj.position, \"+100 coins\", MSG_COIN_STYLE, -100);\r\n                snd.gem();\r\n                break;\r\n\r\n            //------------------------------------\r\n            //  QUEST ITEMS 200-999\r\n            //------------------------------------\r\n\r\n            case 201:  //  kendo knowledge\r\n                this.hud.addInfoMessage(dispObj.position, \"Kendo knowledge acquired!\", MSG_COIN_STYLE);\r\n                this.collectObject(body);\r\n                snd.questItem();\r\n                this.questMngr.acquireItem(201);\r\n                break;\r\n\r\n            case 202:  //  KI\r\n                this.hud.addInfoMessage(dispObj.position, \"1 Ki acquired!\", MSG_COIN_STYLE);\r\n                this.collectObject(body);\r\n                snd.questItem();\r\n                this.questMngr.acquireItem(202);\r\n                //  TODO: quest manager\r\n                break;\r\n\r\n            //------------------------------------\r\n            //  OBJECTS DOING DAMAGE 1000-1999\r\n            //------------------------------------\r\n            case DamageType.LavaBorder:  //  border lava   \r\n                {\r\n                    let now = performance.now() / 1000;\r\n                    if (!stats.buffs[DamageType.LavaBorder] || stats.buffs[DamageType.LavaBorder] < now) {\r\n                        this.hud.addInfoMessage(dispObj.position, \"Burning\", MSG_WARN_STYLE, 100);\r\n                    }\r\n                    stats.buffs[DamageType.LavaBorder] = this.secondsFromNow(1);\r\n                }\r\n                break;\r\n            case DamageType.Lava:  //  lava\r\n                {\r\n                    let now = performance.now() / 1000;\r\n                    if (!stats.buffs[DamageType.Lava] || stats.buffs[DamageType.Lava] < now) {\r\n                        this.hud.addInfoMessage(dispObj.position, \"Burning\", MSG_WARN_STYLE, 100);\r\n                    }\r\n                    stats.buffs[DamageType.Lava] = this.secondsFromNow(4);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper that returns time tick value with the given seconds added.\r\n     * @param seconds\r\n     */\r\n    private secondsFromNow(seconds: number): number {\r\n        var now = performance.now() / 1000;\r\n        now += seconds;\r\n        return now;\r\n    }    \r\n\r\n    /**\r\n     * Removes an entity from the p2 world and sets its DisplayObject to null.\r\n     * If the removeDisplayObject is true the display object will be also removed from the worldContainer.\r\n     *\r\n     * @param body\r\n     * @param removeDisplayObject\r\n     */\r\n    public removeEntity(body: p2.Body, removeDisplayObject: boolean = false): void {\r\n        wp2.removeBody(body);\r\n        if (removeDisplayObject) {\r\n            this.worldContainer.removeChild((body as any).DisplayObject);\r\n        }\r\n        (body as any).DisplayObject = null;\r\n    }\r\n\r\n    private clearLevel() {\r\n        if (stats.currentLevel) {\r\n            stats.currentLevel.parallax.forEach((plx: Parallax, idx: number) => {\r\n                this.worldContainer.removeChild(plx);\r\n            });\r\n            stats.currentLevel.entities.forEach((body: any) => {\r\n                if (body !== wp2.playerBody) {\r\n                    this.worldContainer.removeChild(body.DisplayObject);\r\n                    wp2.removeBody(body);\r\n                    body.DisplayObject = null;\r\n                }\r\n            });\r\n\r\n            //  now remove all other display objects except hero\r\n            var all = this.worldContainer.children.filter((c: PIXI.DisplayObject) => c.name !== \"hero\");\r\n            all.forEach((child: any) => {\r\n                this.worldContainer.removeChild(child);\r\n            });\r\n            wp2.clearLevel();\r\n            Bullet.reset();\r\n        }\r\n    }\r\n\r\n    private randomRange(min: number, max: number) {\r\n        return min + (Math.random() * (max - min));\r\n    }\r\n\r\n    private startGroundShake = (event: {milliSeconds: number, magnitudeInPixels: number})=> {\r\n        this.shakeEnd = performance.now() + event.milliSeconds;\r\n        this.magnitude = event.magnitudeInPixels;\r\n        this.shakeDuration = event.milliSeconds / this.SHAKE_COUNT;\r\n    }\r\n}","import * as particles from \"pixi-particles\";\r\nimport * as TWEEN from \"@tweenjs/tween.js\";\r\n\r\nimport { createParticleEmitter } from '../global';\r\nimport { ANIMATION_FPS_SLOW, ANIMATION_FPS_NORMAL } from '..';\r\nimport { MOVE_TOPIC, GROUND_SHAKE, eventEmitter } from '../events';\r\nimport { AnimatedSprite, AnimationSequence, Global } from '..';\r\nimport { MovementController, MovementState } from './MovementController';\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { stats } from './PlayerStats';\r\nimport { Mob } from '../mobs/Mob';\r\nimport { LevelLoader } from '../world/LevelLoader';\r\nimport { IInteractionType } from '../world/LevelInterfaces';\r\nimport { snd } from '../world/SoundMan';\r\nimport { Bullet } from './Bullet';\r\nimport { StatType, AtrType } from '../enums';\r\n\r\nconst HERO_FRAME_SIZE: number = 64;\r\n\r\nexport class HeroCharacter extends AnimatedSprite {\r\n    private emitterPixies: particles.Emitter;\r\n    private emitterBurn: particles.Emitter;\r\n    private movementCtrl: MovementController;\r\n    private idleAnimationTimeoutHandle: any;\r\n\r\n    constructor(private container: PIXI.Container) {\r\n        super();\r\n        \r\n        this.movementCtrl = new MovementController(wp2);\r\n        wp2.on(\"playerContact\", this.onPlayerContact, this);\r\n        wp2.on(\"bulletContact\", this.onBulletContact, this);\r\n\r\n        var cfg = {     \r\n            alpha: {\r\n                start: 0.7,\r\n                end: 0\r\n            },\r\n            blendMode: \"normal\",\r\n            frequency: 0.01,\r\n            startRotation: {\r\n                min: 265,\r\n                max: 275\r\n            },\r\n            color: {\r\n                start: \"#ffffff\",\r\n                end: \"#ff5050\"\r\n            },\r\n            speed: {\r\n                start: 1,\r\n                end: 0.5,\r\n                minimumSpeedMultiplier: 1\r\n            },\r\n            scale: {\r\n                start: 0.2,\r\n                end: 0.6\r\n            },\r\n            maxParticles: 20,\r\n            lifetime: {\r\n                min: 0.25,\r\n                max: 0.75\r\n            },\r\n            spawnType: \"circle\",\r\n            spawnCircle: {\r\n                x: 0,\r\n                y: HERO_FRAME_SIZE-25,\r\n                r: 25\r\n            }\r\n        };\r\n        //    attached to hero sprite\r\n        this.emitterBurn = createParticleEmitter(this, [PIXI.Texture.fromImage(\"assets/img/effects/flame.png\")], cfg);  \r\n        //   attached to container since it must emit outside hero sprite\r\n        this.emitterPixies = createParticleEmitter(container, [PIXI.Texture.fromImage(\"assets/star.png\")]);  \r\n\r\n        const asset = \"assets/hero.png\";\r\n        this.addAnimations(new AnimationSequence(\"right\", asset, [18, 19, 20, 21, 22, 23], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"left\", asset, [12, 13, 14, 15, 16, 17], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpleft\", asset, [24, 25, 26, 27, 28, 29], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpright\", asset, [30, 31, 32, 33, 34, 35], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpup\", asset, [1, 3, 4, 6], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"idle\", asset, [1, 1, 0, 1, 2, 3, , 4, 5, 13, 12, 6, 7, 11, 18, 19, 0], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n\r\n        this.addAnimations(new AnimationSequence(\"jumpdownleft\", asset, [36, 37, 38], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpdownright\", asset, [39, 40, 41], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpdown\", asset, [42, 43, 44], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.anchor.set(0.5, 0.58);\r\n\r\n        eventEmitter.on(MOVE_TOPIC, this.onPlayerMove);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns if the player can interact via controls.\r\n     */\r\n    public get IsInteractive(): boolean {\r\n        return this.movementCtrl.isInteractive;\r\n    }\r\n    \r\n    /**\r\n     * Sets if the player can interact via controls.\r\n     */\r\n    public set IsInteractive(newValue: boolean) {\r\n        this.movementCtrl.isInteractive = newValue;\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * Checks movementCtrl.MovementState and updates pixi dust emitter and consumption.\r\n     * @param dt elapsed time in milliseconds\r\n     */\r\n    public onUpdate = (dt: number) => {\r\n        this.position.x = Global.position.x;\r\n        this.position.y = Global.position.y;\r\n\r\n        if (this.IsInteractive) {\r\n            this.movementCtrl.update(dt);\r\n        }\r\n\r\n        switch (this.movementCtrl.MovementState) {\r\n            case MovementState.Idle:\r\n                this.emitterPixies.emit = false;\r\n                break;\r\n            case MovementState.Left:\r\n            case MovementState.JumpLeft:\r\n                this.emitterPixies.emit = this.movementCtrl.IsRunning;\r\n                this.emitterPixies.minStartRotation = -25;\r\n                this.emitterPixies.maxStartRotation = 25;\r\n                break;\r\n            case MovementState.Right:\r\n            case MovementState.JumpRight:\r\n                this.emitterPixies.emit = this.movementCtrl.IsRunning;\r\n                this.emitterPixies.minStartRotation = 155;\r\n                this.emitterPixies.maxStartRotation = 205;\r\n                break;\r\n\r\n            case MovementState.JumpUp:\r\n                this.emitterPixies.emit = this.movementCtrl.IsRunning;\r\n                this.emitterPixies.minStartRotation = 245;\r\n                this.emitterPixies.maxStartRotation = 295;\r\n                break;\r\n        }\r\n        this.emitterPixies.update(dt * 0.001);\r\n        this.emitterPixies.updateOwnerPos(this.position.x, this.position.y);\r\n        this.emitterBurn.update(dt * 0.001);\r\n\r\n        //--------------------------\r\n        //  check if running\r\n        //--------------------------\r\n        if (this.movementCtrl.IsRunning && this.movementCtrl.MovementState !== MovementState.Idle) {\r\n            stats.increaseStat(StatType.Dust, -dt * 0.005);   //  5/sec\r\n            let angle = 8;\r\n            let degree = Math.PI * angle / 180;\r\n            this.rotation = (this.movementCtrl.MovementState === MovementState.Left) ? degree : -degree;\r\n        } else {\r\n            this.rotation = 0;\r\n        }\r\n        this.emitterBurn.emit = stats.isBurning;\r\n        super.onUpdate(dt);        \r\n    };\r\n\r\n    private onPlayerMove = (event: any) => {\r\n        var state: MovementState = event.newState as MovementState;\r\n        var fps = event.isRunning ? ANIMATION_FPS_NORMAL * 1.6 : ANIMATION_FPS_NORMAL;\r\n        switch (state) {\r\n            case MovementState.Idle:\r\n                if(this.idleAnimationTimeoutHandle) clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.idleAnimationTimeoutHandle = setTimeout(() => {\r\n                    this.play(\"idle\", ANIMATION_FPS_SLOW);\r\n                    snd.idle();\r\n                }, 300);\r\n                break;\r\n            case MovementState.Left:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"left\", fps);\r\n                snd.walk(event.isRunning);\r\n                break;\r\n            case MovementState.Right:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"right\", fps);\r\n                snd.walk(event.isRunning);\r\n                break;\r\n            case MovementState.JumpLeft:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpleft\", fps);\r\n                snd.jump();\r\n                break;\r\n            case MovementState.JumpRight:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpright\", fps);\r\n                snd.jump();\r\n                break;\r\n            case MovementState.JumpUp:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpup\", fps);\r\n                snd.jump();\r\n                break;\r\n            case MovementState.JumpDownLeft:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpdownleft\", fps);\r\n                snd.jumpAttack();\r\n                break;\r\n            case MovementState.JumpDownRight:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpdownright\", fps);\r\n                snd.jumpAttack();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the player has jumped on something with a high velocity.\r\n     * Adds smoke for ground contacts and handles mob collision for npc's.\r\n     *\r\n     * @param event\r\n     */\r\n    private onPlayerContact(event: any): void {\r\n        const SND_TRESHOLD_VELOCITY: number = 400;\r\n        const SMOKE_VELOCITY: number = 450;\r\n        const ATTACK_VELOCITY: number = 550;\r\n\r\n        let body: p2.Body = event.body as p2.Body;\r\n        var mob: Mob = event.body.DisplayObject as Mob;\r\n\r\n        let verticalVelocity = Math.abs(event.velocity[1]);\r\n       \r\n        if (verticalVelocity > ATTACK_VELOCITY) {\r\n            //console.log(\"Vert velocity: \" + verticalVelocity);\r\n            //  check collision vs mobs\r\n            if (mob instanceof Mob) {\r\n                if (!mob.isLoading) {\r\n                    this.handleMobInteraction(mob, body);\r\n                }\r\n            }\r\n\r\n            var movementState = this.movementCtrl.MovementState;\r\n            if (movementState === MovementState.JumpDown || \r\n                movementState === MovementState.JumpDownLeft ||\r\n                movementState === MovementState.JumpDownRight\r\n            ) {\r\n                snd.jumpContact();\r\n                eventEmitter.emit(GROUND_SHAKE, {milliSeconds: 600, magnitudeInPixels: 9});\r\n                return;\r\n            }\r\n        } \r\n        \r\n        if (verticalVelocity > SMOKE_VELOCITY) {\r\n            console.log(\"Vert velocity: \" + verticalVelocity);\r\n            var smoke: AnimatedSprite = new AnimatedSprite();\r\n            smoke.addAnimations(new AnimationSequence(\"smoke\", \"assets/img/effects/jump_smoke.png\",\r\n                [0, 1, 2, 3, 4, 5], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n            smoke.anchor.set(0.5);\r\n            smoke.pivot.set(0.5);\r\n            smoke.x = this.x;\r\n            smoke.y = this.y - 25;\r\n            smoke.alpha = 0.7;\r\n            smoke.rotation = Math.random() * Math.PI;\r\n            this.container.addChild(smoke);\r\n            smoke.onComplete = () => this.container.removeChild(smoke);\r\n            smoke.play(\"smoke\", 6, false);\r\n        }\r\n        \r\n        if(verticalVelocity > SND_TRESHOLD_VELOCITY){\r\n            snd.jumpContact();\r\n            console.log(\"velocity: \" + event.velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles bullets hitting the player or obstacle.\r\n     *\r\n     * @param event\r\n     */\r\n    private onBulletContact(event: any): void {\r\n        let bullet: Bullet = event.bulletBody.DisplayObject as Bullet;\r\n        if (!bullet.IsDead) {\r\n            if (event.playerHit) {\r\n                snd.hitPain();\r\n                //this.hud.addInfoMessage(this.position, `${-bullet.damage} HP`, MSG_HP_STYLE, 50);\r\n                stats.increaseStat(StatType.HP, -bullet.damage);\r\n            } else {\r\n\r\n                //  TODO: recycle explode animations\r\n                var explode: AnimatedSprite = new AnimatedSprite();\r\n                explode.addAnimations(new AnimationSequence(\"exp\",\r\n                    \"assets/img/effects/slime_atk_exp.png\",\r\n                    [0, 1, 2, 3, 4, 5], 32, 32)\r\n                );\r\n                explode.anchor.set(0.5);\r\n                explode.pivot.set(0.5);\r\n                explode.x = bullet.x;\r\n                explode.y = bullet.y;\r\n                explode.alpha = 0.7;\r\n                explode.rotation = Math.random() * Math.PI;\r\n                this.container.addChild(explode);\r\n                explode.onComplete = () => this.container.removeChild(explode);\r\n                explode.play(\"exp\", 10, false);\r\n                snd.bulletHitWall();\r\n            }\r\n            bullet.IsDead = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles interaction with mobs (mob kill).\r\n     * @param mob\r\n     * @param body\r\n     */\r\n    private handleMobInteraction(mob: Mob, body: p2.Body) {\r\n        let dispObj = (body as any).DisplayObject as PIXI.DisplayObject;\r\n        let it = dispObj as IInteractionType;\r\n\r\n        //  generate drop\r\n        if (it.drop) {\r\n            let isDropping = Math.random() <= it.drop.chance;\r\n            if (isDropping) {\r\n                var dropItemBody = LevelLoader.createEntity(stats.currentLevel.templates, it.drop.entity);\r\n                this.addDropItem(mob, dropItemBody);\r\n            }\r\n            \r\n        }\r\n\r\n        this.removeEntity(body);\r\n        mob.squish(() => this.container.removeChild(dispObj));\r\n        \r\n\r\n        //  add exp       \r\n        var exp = mob.attributes[AtrType.HP] / 2;\r\n        stats.increaseStat(StatType.TotalExp, exp);\r\n    }\r\n\r\n    /**\r\n     * Adds an drop item to the scene with a tween animation.\r\n     * @param dispObj\r\n     */\r\n    private addDropItem(mob: Mob, itemBody: p2.Body): void {\r\n        let dispObj = (itemBody as any).DisplayObject as PIXI.DisplayObject;\r\n        dispObj.x = mob.x;\r\n        dispObj.y = mob.y + 40;\r\n        this.container.addChild(dispObj);\r\n\r\n        //  tween from mob position to random position near hero\r\n        var upX = dispObj.position.x + 75;\r\n        var upY = dispObj.position.y + 200;\r\n        var moveUp = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: upX, y: upY }, 400)\r\n            .onComplete(() => {\r\n                itemBody.position = [dispObj.position.x, dispObj.position.y];\r\n                wp2.addBody(itemBody);\r\n            });\r\n\r\n\r\n        var orgScaleX = dispObj.scale.x;\r\n        var orgScaleY = dispObj.scale.y;\r\n        var scale = new TWEEN.Tween(dispObj.scale)\r\n            .to({ x: orgScaleX + 0.3, y: orgScaleX + 0.3 }, 350)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var endX = this.x;\r\n        var endY = this.y + 8;\r\n        var moveAway = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: endX, y: endY }, 350)\r\n            .easing(TWEEN.Easing.Back.In)\r\n            .onUpdate((pos: PIXI.Point) => {\r\n                itemBody.position = [dispObj.position.x, dispObj.position.y];\r\n            })\r\n            .onComplete(() => dispObj.scale.set(orgScaleX, orgScaleY));\r\n\r\n        moveUp.chain(scale, moveAway).start();\r\n    }\r\n\r\n    /**\r\n     * Removes an entity from the p2 world and sets its DisplayObject to null.\r\n     * If the removeDisplayObject is true the display object will be also removed from the worldContainer\r\n     *\r\n     * @param body\r\n     * @param removeDisplayObject\r\n     */\r\n    public removeEntity(body: p2.Body, removeDisplayObject: boolean = false): void {\r\n        wp2.removeBody(body);\r\n        if (removeDisplayObject) {\r\n            this.container.removeChild((body as any).DisplayObject);\r\n        }\r\n        (body as any).DisplayObject = null;\r\n    }\r\n}","import { KeyboardMapper, Global } from '..';\r\nimport { WorldP2 } from '../world/WorldP2';\r\nimport { stats } from './PlayerStats';\r\nimport { eventEmitter, MOVE_TOPIC } from '../events';\r\nimport { StatType } from '../enums';\r\n\r\nexport class MovementController {\r\n    private readonly VELOCITY = 150;\r\n    private readonly JUMP_FORCE = 17900;\r\n    private readonly JUMP_ATTACK_FORCE = -14000;\r\n\r\n    private readonly JUMP_COOLDOWN = 500;\r\n    private readonly JUMP_ATTACK_COOLDOWN = 2000;\r\n    private readonly JUMP_ATTACK_FREEZE = 800;\r\n\r\n\r\n    private nextJumpAllowed: number = 0;\r\n    private nextJumpDownAllowed: number = 0;\r\n\r\n    private world: WorldP2;\r\n    private movementState: MovementState = -1;\r\n    private kbd = new KeyboardMapper();\r\n\r\n    private isRunning = false;\r\n    private isJumping = false;\r\n    private newState: MovementState = MovementState.Idle;\r\n\r\n    private _isInteractive: boolean = true;\r\n    \r\n    constructor(world: WorldP2) {\r\n        this.world = world;\r\n    }\r\n\r\n    /**\r\n     * Returns if the player can interact via controls.\r\n     */\r\n    public get isInteractive(): boolean {\r\n        return this._isInteractive;\r\n    }\r\n\r\n    /**\r\n     * Sets if the player can interact via controls.\r\n     */\r\n    public set isInteractive(newValue: boolean) {\r\n        this._isInteractive = newValue;\r\n        if (!this._isInteractive) {\r\n            this.isRunning = false;\r\n            this.movementState = MovementState.Idle;\r\n        }\r\n    }\r\n\r\n    public get IsJumping(): boolean {\r\n        return this.isJumping;\r\n    }\r\n\r\n    public get CanJump(): boolean {\r\n        return !this.isJumping && this.nextJumpAllowed < performance.now();\r\n    }\r\n\r\n    public get IsRunning(): boolean {\r\n        return this.isRunning;\r\n    }\r\n\r\n    public get MovementState(): MovementState {\r\n        return this.movementState;\r\n    }\r\n\r\n    public StartJump(direction: MovementState.JumpLeft | MovementState.JumpRight | MovementState.JumpUp): void {\r\n        var forceVector: Array<number>;\r\n\r\n        if (direction === MovementState.JumpUp) {\r\n            forceVector = [0, this.JUMP_FORCE];\r\n        } else if (direction === MovementState.JumpLeft) {\r\n            forceVector = [-this.JUMP_FORCE * 0.10, this.JUMP_FORCE];\r\n        } else if (direction === MovementState.JumpRight) {\r\n            forceVector = [this.JUMP_FORCE * 0.10, this.JUMP_FORCE];\r\n        }\r\n        this.world.playerBody.applyImpulse(forceVector);\r\n        this.world.clearContactsForBody(this.world.playerBody);\r\n        this.nextJumpAllowed = performance.now() + this.JUMP_COOLDOWN;\r\n    }\r\n\r\n    public StartJumpDown(): void {\r\n        switch (this.movementState) {\r\n            case MovementState.Left:\r\n            case MovementState.JumpLeft:\r\n                this.newState = MovementState.JumpDownLeft;\r\n                break;\r\n\r\n            case MovementState.Right:\r\n            case MovementState.JumpRight:\r\n                this.newState = MovementState.JumpDownRight;\r\n                break;\r\n\r\n            default:\r\n                this.newState = MovementState.JumpDown;\r\n                break;\r\n        }\r\n        console.log(\"state change: \" + MovementState[this.movementState] + \" -> \" + MovementState[this.newState]);\r\n        \r\n        var forceVector: number[] = [0, this.JUMP_ATTACK_FORCE];\r\n        this.world.playerBody.setZeroForce();\r\n        this.world.playerBody.applyImpulse(forceVector);\r\n        this.nextJumpDownAllowed = performance.now() + this.JUMP_ATTACK_COOLDOWN;\r\n        \r\n        this.isInteractive = false;\r\n        setTimeout(() => this.isInteractive = true, this.JUMP_ATTACK_FREEZE);\r\n        \r\n        eventEmitter.emit(MOVE_TOPIC, {\r\n            newState: this.newState,\r\n            oldState: this.movementState,\r\n            isJumping: true,\r\n            isRunning: false // makes no difference during jumps\r\n        });\r\n        this.movementState = this.newState;\r\n    }\r\n\r\n    public update(dt: number): void {\r\n\r\n        const KEY_A: number = 65;\r\n        const KEY_D: number = 68;\r\n        const KEY_W: number = 87;\r\n        const KEY_S: number = 83;\r\n\r\n        const KEY_SHIFT: number = 16;\r\n        const KEY_LEFT: number = 37;\r\n        const KEY_RIGHT: number = 39;\r\n        const KEY_UP: number = 38;\r\n        const KEY_DOWN: number = 40;\r\n        const SPACE: number = 32;\r\n\r\n        this.newState = MovementState.Idle;\r\n\r\n        var isMovingVerticaly = Math.abs(this.world.playerBody.velocity[1]) > 0.01;\r\n        if (isMovingVerticaly) {\r\n            let hasOnlySensorContacts = this.world.playerContacts.every((body) => body.shapes[0].sensor);\r\n            this.isJumping = hasOnlySensorContacts;\r\n        } else {\r\n            this.isJumping = false;\r\n        }\r\n\r\n        //  calculate the horizontal velocity\r\n        var v: number = this.calcMovementVelocity();\r\n\r\n        //  no movement (except jump down) while jumping\r\n        if (this.isJumping && this._isInteractive) {\r\n            if ((this.kbd.isKeyDown(KEY_S) || this.kbd.isKeyDown(KEY_DOWN)) && stats.HasJumpAtack && this.nextJumpDownAllowed < performance.now()) {\r\n                this.StartJumpDown();\r\n            }\r\n            this.world.playerBody.velocity[0] += v;\r\n            return;\r\n\r\n        } else {\r\n            //  calculate the horizontal velocity\r\n            this.world.playerBody.velocity[0] = v;\r\n        }\r\n\r\n\r\n        var canRun = stats.getStat(StatType.Dust) > 1;\r\n        var newIsRunning: boolean = this.kbd.isKeyDown(KEY_SHIFT) && canRun && this._isInteractive;\r\n\r\n        if (this.kbd.isKeyDown(KEY_A) || this.kbd.isKeyDown(KEY_LEFT) ) {\r\n            this.newState = MovementState.Left;\r\n        } else if (this.kbd.isKeyDown(KEY_D) || this.kbd.isKeyDown(KEY_RIGHT)) {\r\n            this.newState = MovementState.Right;\r\n        }\r\n\r\n        //  check if jump is pressed\r\n        if ((this.kbd.isKeyDown(KEY_W) || this.kbd.isKeyDown(KEY_UP) || this.kbd.isKeyDown(SPACE)) && this.CanJump) {\r\n            if (this.movementState === MovementState.Left) {\r\n                this.newState = MovementState.JumpLeft;\r\n            } else if (this.movementState === MovementState.Right) {\r\n                this.newState = MovementState.JumpRight;\r\n            } else if (this.movementState === MovementState.Idle) {\r\n                this.newState = MovementState.JumpUp;\r\n                newIsRunning = false;\r\n            }\r\n        }\r\n\r\n        //  has state changed\r\n        if (this.newState !== this.movementState || newIsRunning !== this.IsRunning) {\r\n            var isCurrentJumping = false;\r\n            switch (this.newState) {\r\n                case MovementState.JumpLeft:\r\n                    this.StartJump(MovementState.JumpLeft);\r\n                    isCurrentJumping = true;\r\n                    break;\r\n                case MovementState.JumpRight:\r\n                    this.StartJump(MovementState.JumpRight);\r\n                    isCurrentJumping = true;\r\n                    break;\r\n                case MovementState.JumpUp:\r\n                    this.StartJump(MovementState.JumpUp);\r\n                    isCurrentJumping = true;\r\n                    break;\r\n            }\r\n            eventEmitter.emit(MOVE_TOPIC, {\r\n                newState: this.newState,\r\n                oldState: this.movementState,\r\n                isJumping: isCurrentJumping,\r\n                isRunning: newIsRunning \r\n            });\r\n        }\r\n\r\n        //  update new states\r\n        this.movementState = this.newState;\r\n        this.isRunning = newIsRunning;\r\n    }\r\n\r\n    private calcMovementVelocity(): number {\r\n        var direction: number = 0;\r\n        if (this.movementState === MovementState.Left || this.movementState === MovementState.JumpLeft) {\r\n            direction = -1;\r\n        } else if (this.movementState === MovementState.Right || this.movementState === MovementState.JumpRight) {\r\n            direction = 1;\r\n        }\r\n\r\n        if (this.IsJumping) {\r\n            //  allow for some minimal horizontal movement (this is to prevent getting stuck in air if between two bodies with friction and no contacts)\r\n            return direction * 0.2;\r\n        } else {\r\n            var velocity: number = direction * this.VELOCITY * (this.IsRunning ? 2 : 1.0);\r\n            return velocity;\r\n        }\r\n    }\r\n}\r\n\r\nexport enum MovementState {\r\n    Left,\r\n    Right,\r\n    Idle,\r\n\r\n    JumpLeft,\r\n    JumpRight,\r\n    JumpUp,\r\n\r\n    JumpDownLeft,\r\n    JumpDownRight,\r\n    JumpDown,\r\n}","import * as particles from \"pixi-particles\";\r\nimport * as TWEEN from \"@tweenjs/tween.js\";\r\nimport { Global } from '..';\r\nimport { createParticleEmitter } from '../global';\r\nimport { stats } from './PlayerStats';\r\nimport { eventEmitter, STATCHANGE_TOPIC, DAMAGE_TOPIC, IStatChangeEvent, IDpsChangeEvent } from '../events';\r\nimport { SCENE_HALF_WIDTH, TEXT_STYLE, SCENE_HEIGHT, SCENE_HALF_HEIGHT, EXP_BAR_STYLE, MSG_HP_STYLE, QUEST_ITEM_STYLE, SCENE_WIDTH, QUEST_STYLE, GUI_FONT, MSG_EXP_STYLE } from '../constants';\r\nimport { StatType } from '../enums';\r\n\r\nexport class StatsHud extends PIXI.Container {\r\n    private txtHP: PIXI.Text;\r\n    private txtDust: PIXI.Text;\r\n    private txtCoins: PIXI.Text;\r\n    private txtExp: PIXI.Text;\r\n    private txtLevel: PIXI.Text;\r\n    private expPreFiller: PIXI.Sprite;\r\n    private expFiller: PIXI.Sprite;\r\n    private fillLen: number;\r\n\r\n    private emitter: particles.Emitter;\r\n\r\n    private panel: PIXI.Sprite;\r\n    private txtQuestMessage: PIXI.Text;\r\n    private questMsgEndTime = 0;\r\n    private onCompleteCB?: () => void;\r\n\r\n    private txtPlayerPosition: PIXI.Text;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setup();\r\n    }\r\n\r\n    private setup() {\r\n        //  TODO: remove or make a hud for player position\r\n        this.txtPlayerPosition = new PIXI.Text(\"\", QUEST_STYLE);\r\n        this.txtPlayerPosition.position = new PIXI.Point(SCENE_WIDTH, SCENE_HEIGHT);\r\n        this.txtPlayerPosition.anchor.set(1, 1);\r\n        this.addChild(this.txtPlayerPosition);\r\n\r\n        //  callout for quest message\r\n        this.panel = new PIXI.Sprite(PIXI.Texture.fromImage(\"assets/gui/panel.png\"));\r\n        this.panel.texture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        this.panel.position.set(4);\r\n        this.panel.name = \"TriggerMessage\";\r\n        this.panel.anchor.set(0);\r\n        this.addChild(this.panel);\r\n\r\n        this.txtQuestMessage = new PIXI.Text(\"\", QUEST_STYLE);\r\n        this.txtQuestMessage.position.set(384, 100);\r\n        this.txtQuestMessage.anchor.set(0.5, 0);\r\n        this.panel.addChild(this.txtQuestMessage);\r\n\r\n        let y: number = 5;\r\n        //  HP\r\n        {\r\n\r\n            let pnl = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/stat_panel.png\"].texture);\r\n            pnl.texture.baseTexture.scaleMode = PIXI.SCALE_MODES.LINEAR;\r\n            pnl.position.set(5, y);\r\n            this.panel.addChild(pnl);\r\n\r\n            this.txtHP = new PIXI.Text(\"0\", TEXT_STYLE);\r\n            this.txtHP.position = new PIXI.Point(70, y + 10);\r\n            pnl.addChild(this.txtHP);\r\n\r\n            let spr = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/heart.png\"].texture);\r\n            spr.position.set(8, y + 4);\r\n            pnl.addChild(spr);\r\n        }\r\n\r\n        //  pixi dust\r\n        {\r\n            //let y = 75;\r\n            let pnl = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/stat_panel.png\"].texture);\r\n            pnl.texture.baseTexture.scaleMode = PIXI.SCALE_MODES.LINEAR;\r\n            pnl.position.set(261, y);\r\n            this.panel.addChild(pnl);\r\n\r\n            this.txtDust = new PIXI.Text(\"0\", TEXT_STYLE);\r\n            this.txtDust.position = new PIXI.Point(70, y + 10);\r\n            pnl.addChild(this.txtDust);\r\n\r\n            this.emitter = createParticleEmitter(pnl, [PIXI.Texture.fromImage(\"assets/star.png\")]);\r\n            this.emitter.updateOwnerPos(32, 55);\r\n            this.emitter.maxLifetime = 0.6;\r\n            this.emitter.maxParticles = 50;\r\n            this.emitter.emit = true;\r\n        }\r\n\r\n        //  coins\r\n        {\r\n            //let y = 145;\r\n\r\n            let pnl = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/stat_panel.png\"].texture);\r\n            pnl.texture.baseTexture.scaleMode = PIXI.SCALE_MODES.LINEAR;\r\n            pnl.position.set(517, y);\r\n            this.panel.addChild(pnl);\r\n\r\n            this.txtCoins = new PIXI.Text(\"0\", TEXT_STYLE);\r\n            this.txtCoins.position = new PIXI.Point(70, y + 10);\r\n            pnl.addChild(this.txtCoins);\r\n\r\n            let spr = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/coin.png\"].texture);\r\n            spr.position.set(8, y + 4);\r\n            pnl.addChild(spr);\r\n        }\r\n\r\n        //  Exp\r\n        {\r\n            let pnl = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/exp_panel.png\"].texture);\r\n            pnl.texture.baseTexture.scaleMode = PIXI.SCALE_MODES.LINEAR;\r\n            pnl.position.set(0, SCENE_HEIGHT - pnl.height);\r\n            this.addChild(pnl);\r\n\r\n            //  pre filler rect\r\n            this.expPreFiller = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/exp_prefill.png\"].texture);\r\n            this.expPreFiller.position.set(3, 3);\r\n            pnl.addChild(this.expPreFiller);\r\n\r\n            //  filler rect\r\n            this.expFiller = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/exp_fill.png\"].texture);\r\n            this.expFiller.position.set(3, 3);\r\n            pnl.addChild(this.expFiller);\r\n            this.fillLen = pnl.width - 6; // 3 pixels for left/right border;\r\n\r\n\r\n            this.txtExp = new PIXI.Text(\"0 / 1000\", EXP_BAR_STYLE);\r\n            this.txtExp.pivot.set(0.5);\r\n            this.txtExp.anchor.set(0.5);\r\n            this.txtExp.position = new PIXI.Point(pnl.width / 2, pnl.height / 2);\r\n            pnl.addChild(this.txtExp);\r\n\r\n            //  character level\r\n            this.txtLevel = new PIXI.Text(`Level ${stats.characterLevel}`, TEXT_STYLE);\r\n            this.txtLevel.anchor.set(0, 0.2);\r\n            this.txtLevel.position.set(pnl.x + pnl.width + 4, pnl.y);\r\n            this.addChild(this.txtLevel);\r\n        }\r\n\r\n        eventEmitter.on(STATCHANGE_TOPIC, this.handleStatChange);\r\n        eventEmitter.on(DAMAGE_TOPIC, this.handleDpsChange);\r\n    }\r\n\r\n    public onUpdate(dt: number) {\r\n        this.emitter.update(dt * 0.001);\r\n\r\n        if (this.txtQuestMessage.visible && this.questMsgEndTime < performance.now()) {\r\n            this.txtQuestMessage.visible = false;\r\n            if (this.onCompleteCB) {\r\n                this.onCompleteCB();\r\n            }\r\n        }\r\n\r\n        this.txtPlayerPosition.text = `${Global.position.x.toFixed(0)}, ${Global.position.y.toFixed(0)}`;\r\n    }\r\n\r\n    /**\r\n     * Starts an animation tween with informational text moving upwards from the given position.\r\n     * @param position the start position of the message\r\n     * @param message the message to be added\r\n     * @param style optional PIXI.ITextStyle\r\n     */\r\n    public addInfoMessage(position: PIXI.PointLike | { x: number, y: number }, message: string, style?: PIXI.TextStyleOptions, offsetX?: number): void {\r\n        var stl = style || TEXT_STYLE;\r\n        var txtInfo = new PIXI.Text(message, stl);\r\n        offsetX = offsetX || 0;\r\n        txtInfo.position.set(SCENE_HALF_WIDTH + offsetX, SCENE_HEIGHT - position.y - 70);\r\n        txtInfo.scale.set(1, 1);\r\n\r\n        this.addChild(txtInfo);\r\n\r\n        var dy = (position.y > SCENE_HALF_HEIGHT) ? 250 : -250;\r\n        var upY = SCENE_HEIGHT - position.y + dy;\r\n        var moveUp = new TWEEN.Tween(txtInfo.position)\r\n            .to({ y: upY }, 2000);\r\n        moveUp.start();\r\n\r\n        var scale = new TWEEN.Tween(txtInfo.scale)\r\n            .to({ x: 1.6, y: 1.6 }, 2200)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fade = new TWEEN.Tween(txtInfo)\r\n            .to({ alpha: 0 }, 3000)\r\n            .onComplete(() => this.removeChild(txtInfo));\r\n        scale.chain(fade).start();\r\n    }\r\n\r\n    /**\r\n     * Adds text message about acquired quest items.\r\n     * @param message the message to be added\r\n     * @param style optional PIXI.ITextStyle\r\n     */\r\n    public addQuestItemMessage(message: string, style?: PIXI.TextStyle): void {\r\n        var stl = style || QUEST_ITEM_STYLE;\r\n        var txtInfo = new PIXI.Text(message, stl);\r\n        txtInfo.anchor.set(0.5, 0.5);\r\n        txtInfo.position.set(SCENE_HALF_WIDTH, 150);\r\n\r\n        this.addChild(txtInfo);\r\n\r\n        var scale = new TWEEN.Tween(txtInfo.scale)\r\n            .to({ x: 1.8, y: 1.8 }, 2200)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fade = new TWEEN.Tween(txtInfo)\r\n            .to({ alpha: 0 }, 3000)\r\n            .onComplete(() => this.removeChild(txtInfo));\r\n        scale.chain(fade).start();\r\n    }\r\n\r\n    /**\r\n     * Displays the quest message in the quest rectangle.\r\n     * @param msg\r\n     * @param ttlMilis\r\n     */\r\n    public setQuestMessage(msg: string, ttlMilis: number = 8000, onCompleteCB: () => void = null) {\r\n        this.txtQuestMessage.text = msg;\r\n        this.panel.visible = true;\r\n        this.txtQuestMessage.visible = true;\r\n        this.questMsgEndTime = performance.now() + ttlMilis;\r\n        this.onCompleteCB = onCompleteCB;\r\n    }\r\n\r\n    /**\r\n     * Starts an animation tween with level up message.\r\n     * @param message the message to be added\r\n     */\r\n    private addLvlUpMessage(message: string): void {\r\n        var stl: PIXI.TextStyleOptions = {\r\n            align: \"center\",\r\n            padding: 0,\r\n            fontSize: \"64px\",\r\n            fontFamily: GUI_FONT,\r\n            fill: 0x335533,\r\n            strokeThickness: 6,\r\n            stroke: 0xccccff\r\n        };\r\n\r\n        var txtInfo = new PIXI.Text(message, stl);\r\n        txtInfo.scale.set(1);\r\n        txtInfo.anchor.set(0.5);\r\n        txtInfo.position.set(SCENE_HALF_WIDTH, SCENE_HEIGHT - Global.position.y - 70);\r\n        this.addChild(txtInfo);\r\n\r\n        var dy = (Global.position.y > SCENE_HALF_HEIGHT) ? 450 : -450;\r\n        var upY = SCENE_HEIGHT - Global.position.y + dy;\r\n        var moveUp = new TWEEN.Tween(txtInfo.position)\r\n            .to({ y: upY }, 2000);\r\n        moveUp.start();\r\n\r\n        var scale = new TWEEN.Tween(txtInfo.scale)\r\n            .to({ x: 1.6, y: 1.6 }, 1500)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fade = new TWEEN.Tween(txtInfo)\r\n            .to({ alpha: 0.4 }, 6000)\r\n            .onComplete(() => this.removeChild(txtInfo));\r\n        scale.chain(fade).start();\r\n    }    \r\n\r\n    private handleDpsChange = (event: IDpsChangeEvent) => {\r\n        this.addInfoMessage(Global.position, `${event.Amount} HP`, MSG_HP_STYLE, 50);\r\n    };\r\n\r\n    private handleStatChange = (event: IStatChangeEvent) => {\r\n        switch (event.Type) {\r\n            case StatType.Coins:\r\n                this.txtCoins.text = event.NewValue.toString();\r\n                break;\r\n            case StatType.Dust:\r\n                this.txtDust.text = `${event.NewValue.toFixed(0)} / ${event.Stats[StatType.MaxDust].toFixed(0)}`;\r\n                break;\r\n            case StatType.MaxDust:\r\n                this.txtDust.text = `${Math.floor(event.Stats[StatType.Dust])} / ${event.NewValue.toFixed(0)}`;\r\n                break;\r\n            case StatType.HP:\r\n                this.txtHP.text = `${Math.round(event.NewValue)} / ${event.Stats[StatType.MaxHP]}`;\r\n                break;\r\n            case StatType.MaxHP:\r\n                this.txtHP.text = `${Math.round(event.Stats[StatType.HP])} / ${event.NewValue}`;\r\n                break;\r\n            case StatType.TotalExp:\r\n                let exp = event.NewValue - event.OldValue;\r\n                if (exp != 0)\r\n                    this.addInfoMessage({ x: 0, y: 90 }, `+${exp} exp`, MSG_EXP_STYLE, -50);\r\n                this.renderExp(event);\r\n                break;\r\n            case StatType.CharacterLevel:\r\n                this.handleLevelUp(event);\r\n                break;\r\n\r\n            // case StatType.AttributePoints:\r\n            //     this.characterMngr.visible = event.NewValue > 0;\r\n            //     this.txtAtrPts.visible = event.NewValue > 0;\r\n            //     //this.txtAtrPts.text = \"points available\";\r\n            //     break;\r\n        }\r\n    }\r\n\r\n    private handleLevelUp = (event: IStatChangeEvent) => {\r\n        this.txtExp.text = `${Math.round(event.Stats[StatType.LevelExp])} / ${event.Stats[StatType.LevelMaxExp]}`;\r\n        this.expFiller.width = 1;\r\n        this.addLvlUpMessage(\"Level \" + event.NewValue);\r\n        this.txtLevel.text = `Level ${stats.characterLevel}`;\r\n    };\r\n\r\n    private renderExp(event: IStatChangeEvent) {\r\n        this.txtExp.text = `${Math.round(event.Stats[StatType.LevelExp])} / ${event.Stats[StatType.LevelMaxExp]}`;\r\n        this.txtLevel.text = `Level ${stats.characterLevel}`;\r\n\r\n        var pct = Math.min(event.Stats[StatType.LevelExp] / event.Stats[StatType.LevelMaxExp], 1.0);\r\n\r\n        //  special case during level up\r\n        if (pct === 0) {\r\n            this.expFiller.width = 1;\r\n            this.expPreFiller.position.x = 1 + this.expFiller.x;\r\n            return;\r\n        }\r\n\r\n        this.expPreFiller.position.x = this.expFiller.width + this.expFiller.x;\r\n        var targetWidth = (this.fillLen * pct) | 0;\r\n\r\n        var diff = targetWidth - this.expFiller.width;\r\n\r\n        //  tween pre-fill width\r\n        this.expPreFiller.width = 1;\r\n        var preFillTween = new TWEEN.Tween(this.expPreFiller)\r\n            .to({ width: diff }, 1500)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fillTween = new TWEEN.Tween(this.expFiller)\r\n            .to({ width: targetWidth }, 2000)\r\n            .easing(TWEEN.Easing.Bounce.Out);\r\n        preFillTween.chain(fillTween).start();\r\n    }\r\n}","import { AnimatedSprite, AnimationSequence } from \"../_engine/AnimatedSprite\";\r\n\r\nexport class Lava extends AnimatedSprite {\r\n    private readonly FRAME_SIZE_X: number = 64;\r\n    private readonly FRAME_SIZE_Y: number = 128;\r\n\r\n    constructor(textureName: string) {\r\n        super();\r\n\r\n        this.addAnimations(new AnimationSequence(\"lava\", textureName, [0, 1, 2, 3], this.FRAME_SIZE_X, this.FRAME_SIZE_Y));\r\n        this.anchor.set(0.5, 0.70);\r\n        this.play(\"lava\", 3);\r\n    }\r\n}","export class Platform extends PIXI.Container {\r\n\r\n    /**\r\n     * \r\n     * @param tilesX number of horizontal mid tiles. Note: this is the number of mid tiles - the actual width is tilesX + 2\r\n     * @param tilesY number of vertical tiles\r\n     * @param textures array of textures in specific order: top mid, top left, top right, bottom mid, bottom left, bottom right.\r\n     */\r\n    constructor(tilesX: number = 1, tilesY: number = 1, textures:string[]) {\r\n        super();\r\n\r\n        this.scale.set(1, -1);   //  scale invert since everything is upside down due to coordinate system\r\n\r\n        var textureNameTopLeft: string,\r\n            textureNameTopRight: string,\r\n            textureNameBtmMid: string,\r\n            textureNameBtmLeft: string,\r\n            textureNameBtmRight: string;\r\n\r\n        //  this one must exist\r\n        var textureNameTopMid: string = textures[0];\r\n        if (tilesX > 1 || textures.length > 1) {\r\n            textureNameTopLeft = textures[1];\r\n            textureNameTopRight = textures[2];\r\n        }\r\n        if (tilesY > 1) {\r\n            textureNameBtmMid = textures[3];\r\n            textureNameBtmLeft = textures[4];\r\n            textureNameBtmRight = textures[5];\r\n        }\r\n        var spr: PIXI.Sprite;\r\n        var x = 0;\r\n\r\n        //--------------------------\r\n        //  left border\r\n        //--------------------------\r\n        if (textureNameTopLeft) {\r\n            texture = PIXI.loader.resources[textureNameTopLeft].texture;\r\n            spr = new PIXI.Sprite(texture);\r\n            spr.position.set(x+1, 0);\r\n            x += texture.width;\r\n            this.addChild(spr);\r\n        }\r\n\r\n        //--------------------------\r\n        //  mid tiles\r\n        //--------------------------\r\n        var texture = PIXI.loader.resources[textureNameTopMid].texture;\r\n        if (tilesX > 1) {\r\n            let w = texture.width * tilesX;\r\n            let h = texture.height;\r\n            spr = new PIXI.extras.TilingSprite(texture, w, h);\r\n            spr.position.set(x, 0);\r\n            x += w;\r\n        } else {\r\n            spr = new PIXI.Sprite(texture);\r\n            spr.position.set(x, 0);\r\n            x += spr.width;\r\n        }\r\n        this.addChild(spr);\r\n\r\n        //--------------------------\r\n        //  right border\r\n        //--------------------------\r\n        if (textureNameTopRight) {\r\n            texture = PIXI.loader.resources[textureNameTopRight].texture;\r\n            spr = new PIXI.Sprite(texture);\r\n            spr.position.set(x -1, 0);\r\n            x += spr.width;\r\n            this.addChild(spr);\r\n        }\r\n\r\n        //--------------------------\r\n        //  fill downwards\r\n        //--------------------------\r\n        let xTiles = tilesX + 2;\r\n        if (tilesY > 1) {\r\n            for (var x = 0; x < xTiles; x++) {\r\n                var name: string;\r\n                if (x === 0) {\r\n                    name = textureNameBtmLeft;\r\n\r\n\r\n                } else if (x === xTiles - 1) {\r\n                    name = textureNameBtmRight;\r\n                } else {\r\n                    name = textureNameBtmMid;\r\n                }\r\n\r\n                for (var y = 1; y < tilesY; y++) {                    \r\n                    texture = PIXI.loader.resources[name].texture;\r\n                    spr = new PIXI.Sprite(texture);\r\n                    spr.position.set(x * spr.width, y * spr.height);\r\n                    this.addChild(spr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","const TEXTURE_BUMPER = \"assets/img/objects/bumper_01.png\";\r\nconst TEXTURE_ROTOR = \"assets/img/objects/bumper_rotor_01.png\";\r\nconst ROTATION = Math.PI / 8;\r\n\r\nexport class Bumper extends PIXI.Sprite {\r\n    private rotor: PIXI.Sprite;\r\n\r\n    constructor() {\r\n        super(PIXI.loader.resources[TEXTURE_BUMPER].texture);\r\n        this.rotor = new PIXI.Sprite(PIXI.loader.resources[TEXTURE_ROTOR].texture);\r\n        this.rotor.anchor.set(0.5);\r\n        this.rotor.pivot.set(0.5);\r\n        this.addChild(this.rotor);\r\n        this.anchor.set(0.5);\r\n    }\r\n\r\n    public onUpdate = (dt: number) => {\r\n        var rot = this.rotor.rotation - (ROTATION * dt / 1000);\r\n        this.rotor.rotation = rot % Math.PI;\r\n    };\r\n}","import * as Global from \"../global\";\r\nimport { QuestState } from \"./QuestState\";\r\nimport { Quest } from \"./Quest\";\r\nimport { ITriggerDefinition } from \"../world/LevelInterfaces\";\r\nimport { MainScene } from \"../Scenes/MainScene\";\r\nimport { CutScene } from \"../Scenes/CutScene\";\r\nimport { stats } from \"../objects/PlayerStats\";\r\nimport { StatsHud } from \"../objects/StatsHud\";\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { snd } from '../world/SoundMan';\r\nimport { QUEST_STYLE } from '..';\r\nimport { StatType } from '../enums';\r\n\r\n/**\r\n * Contains quest related logic, checks and helpers.\r\n */\r\nexport class QuestManager {\r\n    private questState: Array<QuestState> = [];\r\n    private hud: StatsHud;\r\n\r\n    constructor(private gameScene: MainScene) {\r\n        this.hud = this.gameScene.HudOverlay as StatsHud;\r\n    }\r\n\r\n    /**\r\n     * Resets state of all quests.\r\n     */\r\n    public reset() {\r\n        this.questState.forEach((qs, index) => {\r\n            if (qs != QuestState.None) {\r\n                var quest = this.findQuest(index);\r\n                quest.itemsCollected  = 0;\r\n            }\r\n        });\r\n        this.questState = [];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param itemId\r\n     */\r\n    public acquireItem(itemId: number) {\r\n        //  find if there is an unfinished quest depending on that item\r\n        let quest = this.findQuestWithItem(itemId);\r\n        if (quest) {\r\n            quest.itemsCollected++;\r\n            this.hud.addQuestItemMessage(`collected ${quest.itemsCollected} / ${quest.itemsNeeded}`);\r\n            if (quest.itemsCollected >= quest.itemsNeeded) {\r\n                this.setQuestState(quest.id, QuestState.Completed);\r\n                if (quest.completedMsg) {\r\n                    this.hud.setQuestMessage(quest.completedMsg);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a trigger can be activated. \r\n     * @param trigger\r\n     */\r\n    public canActivateTrigger(trigger: ITriggerDefinition): boolean {\r\n        if (!trigger || !trigger.questId) {\r\n            return false;\r\n        }\r\n\r\n        //  check if trigger depends on quest \r\n        if (Array.isArray(trigger.dependsOn)) {\r\n            for (var i = 0; i < trigger.dependsOn.length; i++) {\r\n                let dependency = trigger.dependsOn[i];\r\n                let state = this.questState[dependency];\r\n                if (!state || state != QuestState.Rewarded)\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        let TEN_SECONDS = 10000;\r\n        let nextAllowedTime = (trigger.lastActive || -TEN_SECONDS) + TEN_SECONDS;\r\n        return nextAllowedTime < performance.now();\r\n    }\r\n\r\n    /**\r\n     * Handles level events triggers.\r\n     * @param body\r\n     */\r\n    public handleTriggerEvent(body: any): void {\r\n        let scm = Global.getScm();\r\n        var trigger: ITriggerDefinition = body.Trigger;\r\n\r\n        //  note: trigger can have a predefined state (so we skip previous states)\r\n        let state = Math.max(this.getQuestState(trigger.questId), trigger.state || 0);\r\n\r\n        // react only if trigger has quest id and last active is older than 10 seconds \r\n        if (this.canActivateTrigger(trigger)) {\r\n            trigger.lastActive = performance.now();\r\n\r\n            let quest: Quest = this.findQuest(trigger.questId);\r\n\r\n            switch (trigger.questId) {\r\n                case 1: //   intro\r\n                    if (state === QuestState.None) {\r\n\r\n                        this.setQuestState(trigger.questId, QuestState.Completed);\r\n                        this.gameScene.IsHeroInteractive = false;\r\n\r\n                        this.hud.setQuestMessage(quest.welcomeMsg, 2000, () => {\r\n                            this.hud.setQuestMessage(quest.completedMsg, 2000, () => {\r\n                                this.gameScene.IsHeroInteractive = true;\r\n                                this.setQuestState(trigger.questId, QuestState.Finished);\r\n                                this.giveRewards(quest);\r\n\r\n                                this.setQuestState(trigger.questId + 1, QuestState.InProgress);\r\n                                quest = this.findQuest(trigger.questId + 1);\r\n                                this.hud.setQuestMessage(quest.welcomeMsg, 4000);\r\n                            });\r\n                        });\r\n                    }\r\n                    break;\r\n\r\n                case 2: //  intro - jump on box task\r\n                    if (this.getQuestState(1) > QuestState.Finished) {\r\n                        if (state === QuestState.InProgress) {\r\n                            this.setQuestState(trigger.questId, QuestState.Completed);\r\n                            //this.gameScene.IsHeroInteractive = false;\r\n                            this.hud.setQuestMessage(quest.completedMsg, 4000, () => {\r\n                                this.gameScene.IsHeroInteractive = true;\r\n                                this.setQuestState(trigger.questId, QuestState.Finished);\r\n                                this.giveRewards(quest);\r\n\r\n                                //  start quest 3\r\n                                quest = this.findQuest(trigger.questId + 1);\r\n                                this.setQuestState(trigger.questId + 1, QuestState.InProgress);\r\n                                this.hud.setQuestMessage(quest.welcomeMsg);\r\n                            });\r\n                        } else if (state >= QuestState.Finished) {\r\n                            quest = this.findQuest(trigger.questId + 1);\r\n                            this.hud.setQuestMessage(quest.welcomeMsg, 4000);\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 3: //  intro - exit sign                                           \r\n                    if (state === QuestState.InProgress) {\r\n                        this.setQuestState(trigger.questId, QuestState.Finished);\r\n                        this.giveRewards(quest);\r\n                        this.gameScene.IsHeroInteractive = false;\r\n                        this.hud.setQuestMessage(quest.completedMsg, 4000, () => {\r\n                            Global.getScm().ActivateScene(\"Loader\");\r\n                        });\r\n                        stats.saveUserState(true);\r\n                        snd.win();\r\n                    }\r\n                    break;\r\n\r\n                case 201:   //  Kendo knowledge\r\n                    this.genericQuestHandler(quest, state, body, [\r\n                        () => {\r\n                            let item = Global.worldContainer.getChildByName(\"quest_item_201\");\r\n                            item.visible = true;\r\n                            var lock: any = this.findBodyByName(\"lock\");\r\n                            this.gameScene.removeEntity(lock, true);\r\n                        },\r\n                        () => { },\r\n                        () => {\r\n                            this.setQuestState(trigger.questId, QuestState.Finished);\r\n                            this.giveRewards(quest);\r\n                            this.gameScene.IsHeroInteractive = false;\r\n\r\n                            stats.saveUserState(true);\r\n\r\n                            snd.win();\r\n                            this.hud.visible = false;\r\n                            var cs = scm.GetScene(\"CutScene\") as CutScene;\r\n                            cs.SetText(quest.finishedMsg, QUEST_STYLE);\r\n                            var rt = scm.CaptureScene();\r\n                            cs.SetBackGround(rt, this.gameScene.scale);\r\n                            scm.ActivateScene(cs);\r\n                        }\r\n                    ]);\r\n                    break;\r\n\r\n                // case 202:   //  seek the hanshi Kendo master\r\n                //     this.genericQuestHandler(quest, state, body);\r\n                //     break;\r\n\r\n                case 203:   //  hanshi Kendo master dojo: collect 10 ki\r\n                    this.genericQuestHandler(quest, state, body, [\r\n                        () => { stats.HasJumpAtack = true; },\r\n                        () => { },\r\n                        () => { },\r\n                        () => { }\r\n                    ]);\r\n                    break;\r\n\r\n                // case 204:   //  hanshi Kendo master dojo: collect 25 ki\r\n                //     this.genericQuestHandler(quest, state, body);\r\n                //     break;\r\n\r\n                default:\r\n                    this.genericQuestHandler(quest, state, body);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param quest \r\n     * @param state \r\n     * @param body the physics sensor or trigger that causes this quest\r\n     * @param actions array of actions (one optional action for each state)\r\n     */\r\n    private genericQuestHandler(quest: Quest, state: QuestState, body, actions?: Array<() => void>) {\r\n        let trigger: ITriggerDefinition = body.Trigger;\r\n        switch (state) {\r\n            case QuestState.None:\r\n                this.setQuestState(quest.id, QuestState.InProgress);\r\n                this.hud.setQuestMessage(quest.welcomeMsg);\r\n                break;\r\n            case QuestState.InProgress:\r\n                this.hud.setQuestMessage(quest.objectiveMsg);\r\n                break;\r\n            case QuestState.Completed:\r\n                if (quest.itemId && quest.itemsCollected >= quest.itemsNeeded) { //  if the acquireItem has set quest to completed move to next stated\r\n                    this.setQuestState(quest.id, QuestState.Finished);\r\n                    trigger.lastActive = 0;\r\n                } else {\r\n                    this.hud.setQuestMessage(quest.completedMsg);\r\n                }\r\n                break;\r\n            case QuestState.Finished:\r\n                this.hud.setQuestMessage(quest.finishedMsg);\r\n                this.giveRewards(quest);\r\n                this.gameScene.removeEntity(body, true); // remove the sensor from physics and the displayobject from scene\r\n                break;\r\n        }\r\n        if (actions && actions[state]) {\r\n            actions[state]();\r\n        }\r\n    }\r\n\r\n    private giveRewards(quest: Quest) {\r\n        snd.questItem();\r\n        if (quest.rewardExp) {\r\n            stats.increaseStat(StatType.TotalExp, quest.rewardExp);\r\n            // let pt = new PIXI.Point(Global.position.x, Global.position.y + 50);\r\n            // this.hud.addInfoMessage(pt, `+${quest.rewardExp} exp`, MSG_EXP_STYLE);\r\n        }\r\n        if (quest.rewardCoins) {\r\n            stats.increaseStat(StatType.Coins, quest.rewardCoins);\r\n            // let pt = new PIXI.Point(Global.position.x + 50, Global.position.y + 100);\r\n            // this.hud.addInfoMessage(pt, `+${quest.rewardCoins} coins`);\r\n        }\r\n        this.setQuestState(quest.id, QuestState.Rewarded);\r\n    }\r\n\r\n    private findQuest(questId: number): Quest {\r\n        var quests = Global.LevelDefinitions.quests.filter((q) => {\r\n            return q.id === questId;\r\n        });\r\n        var quest: Quest = quests[0];\r\n        return quest;\r\n    }\r\n\r\n    private findQuestWithItem(itemId: number): Quest {\r\n        var quests = Global.LevelDefinitions.quests.filter((q: Quest) => {\r\n            if (q.itemId === itemId) {\r\n                let state = this.getQuestState(q.id);\r\n                return state < QuestState.Completed && state > QuestState.None;\r\n            }\r\n            return false;\r\n        });\r\n        if (quests.length > 0) {\r\n            return quests[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sets the quest state.\r\n    */\r\n    private setQuestState(questId: number, state: QuestState) {\r\n        this.questState[questId] = state;\r\n    }\r\n\r\n    /**\r\n     * Gets the quest state.\r\n     */\r\n    private getQuestState(questId: number): QuestState {\r\n        return this.questState[questId] || QuestState.None;\r\n    }\r\n\r\n    /**\r\n     * Finds a body with the given display objects name.\r\n     * @param name\r\n     */\r\n    private findBodyByName(name: string): p2.Body {\r\n        var foundBody = undefined;\r\n        wp2.bodies.forEach((body: any) => {\r\n            var dispObj = body.DisplayObject as PIXI.DisplayObject;\r\n            if (dispObj && dispObj.name === name) {\r\n                foundBody = body;\r\n            }\r\n        });\r\n        return foundBody;\r\n    }\r\n}\r\n\r\n","\r\nexport enum QuestState {\r\n    None,\r\n\r\n    /**\r\n     *  Quest has been started.\r\n     */\r\n    InProgress,\r\n\r\n    /**\r\n     *  Quest items/conditions have been completed.\r\n     */\r\n    Completed,\r\n\r\n    /**\r\n     *  Quest has been finished.\r\n     */\r\n    Finished,\r\n\r\n    /**\r\n     *  Quest has been finished and reward awarded.\r\n     */\r\n    Rewarded,\r\n}","import { Global, PIXI, Scene, Button, SceneManager } from \"..\";\r\nimport { SCENE_HALF_WIDTH, TEXT_STYLE, SCENE_BACKCOLOR, BTN_WIDTH, SCENE_HEIGHT, BTN_HEIGHT, BTN_STYLE } from '../constants';\r\n\r\n/**\r\n *   Main options GUI.\r\n */\r\nexport class OptionsScene extends Scene {\r\n\r\n    private currentMusicTrack: number = 0; \r\n    \r\n\r\n    /**\r\n     *   Creates a new scene instance.\r\n     */\r\n    constructor(scm:SceneManager) {\r\n        super(scm, \"Options\");\r\n        this.BackGroundColor = SCENE_BACKCOLOR;\r\n        this.setup();\r\n    }\r\n\r\n    public onActivate =()=>{\r\n        var btnOptions = this.sceneManager.MasterHudOverlay.children.find((obj, idx)=> obj.name == \"BTN_OPTIONS\");\r\n        btnOptions!.visible = false;\r\n    }\r\n    public onDeactivate =()=>{\r\n        var btnOptions = this.sceneManager.MasterHudOverlay.children.find((obj, idx)=> obj.name == \"BTN_OPTIONS\");\r\n        btnOptions!.visible = true;\r\n    }\r\n    private setup = () => {\r\n        var title = new PIXI.Text(\"Options\", TEXT_STYLE);\r\n        this.addChild(title);\r\n        title.anchor.set(0.5);\r\n        title.x = SCENE_HALF_WIDTH;\r\n        title.y = 20;\r\n\r\n        let OFFSET = BTN_WIDTH / 3;\r\n        let y = SCENE_HEIGHT - BTN_HEIGHT - OFFSET;\r\n\r\n        //--------------------\r\n        //  back to game\r\n        //--------------------\r\n        var btnBack = new Button(\"assets/gui/gui_button1.png\", OFFSET, y, BTN_WIDTH, BTN_HEIGHT);\r\n        btnBack.text = new PIXI.Text(\"Back to game\", BTN_STYLE);\r\n        btnBack.onClick = () => {\r\n            //this.resetSounds();\r\n            this.sceneManager.ActivatePreviousScene();\r\n        };\r\n        this.addChild(btnBack);\r\n    }\r\n}","import { Scene } from \"../_engine/Scene\";\r\nimport { Button } from \"../_engine/Button\";\r\nimport { snd } from \"../world/SoundMan\";\r\nimport { SceneManager, SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT, SCENE_HEIGHT, BTN_WIDTH, SCENE_WIDTH, BTN_HEIGHT, BTN_STYLE } from '..';\r\nimport { LoaderScene } from './LoaderScene';\r\n\r\nexport class CutScene extends Scene {\r\n    private callout: PIXI.Sprite;\r\n    private textMessage: PIXI.Text;\r\n    private backSprite: PIXI.Sprite;\r\n    private deathScene: boolean = false;\r\n    private corpse: PIXI.Sprite;\r\n    private btnContinue: Button;\r\n\r\n    private corpseBlurFilter: PIXI.filters.BlurFilter;\r\n\r\n    constructor(scm: SceneManager) {\r\n        super(scm, \"CutScene\");\r\n        this.BackGroundColor = 0x1099bb;\r\n\r\n        this.corpse = new PIXI.Sprite(PIXI.loader.resources[\"assets/hero-dead.png\"].texture);\r\n        this.corpse.anchor.set(0.5);\r\n        this.corpse.pivot.set(0.5);\r\n        this.corpse.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT);\r\n        this.addChild(this.corpse);\r\n\r\n        this.corpseBlurFilter = new PIXI.filters.BlurFilter();\r\n        this.corpse.filters = [this.corpseBlurFilter];\r\n\r\n\r\n        this.callout = new PIXI.Sprite(PIXI.loader.resources[\"assets/gui/rect.png\"].texture);\r\n        this.callout.anchor.set(0.5);\r\n        this.callout.position.set(SCENE_HALF_WIDTH, SCENE_HEIGHT / 5);\r\n        this.addChild(this.callout);\r\n\r\n        this.textMessage = new PIXI.Text(\"\");\r\n        this.textMessage.anchor.set(0.5);\r\n        this.textMessage.position.set(0, 0);\r\n        this.callout.addChild(this.textMessage);\r\n\r\n        //--------------------------------\r\n        //  btn for next level\r\n        //--------------------------------\r\n        this.btnContinue = new Button(  \"assets/gui/gui_button1.png\",\r\n                                        (SCENE_WIDTH - BTN_WIDTH) / 2,\r\n                                        this.callout.height + BTN_HEIGHT,\r\n                                        BTN_WIDTH, \r\n                                        BTN_HEIGHT);\r\n        this.btnContinue.text = new PIXI.Text(\"Continue\", BTN_STYLE);\r\n        this.btnContinue.onClick = () => {            \r\n            this.sceneManager.ActivateScene(\"Loader\");\r\n        };\r\n        this.addChild(this.btnContinue);\r\n    }\r\n\r\n    public onActivate = () => {\r\n        this.btnContinue.visible = !this.deathScene;\r\n        this.callout.visible = !this.deathScene;\r\n        this.corpse.visible = this.deathScene;\r\n        this.corpse.scale.set(0.1);\r\n        this.btnContinue.text.text = this.deathScene ? \"Retry\" : \"Continue\";\r\n\r\n        if (this.deathScene) {\r\n            var deathTrackId = snd.getTrack(\"Carrousel\");\r\n            snd.playTrack(deathTrackId);\r\n        }\r\n    }\r\n\r\n    public onUpdate(dt: number) {\r\n        if (this.deathScene) {\r\n            if (this.corpse.scale.x < 2.5) {\r\n                this.corpse.rotation += 0.03;\r\n                var scale = this.corpse.scale.x + 0.01;\r\n                this.corpse.scale.set(scale);\r\n            } else {\r\n                //  death msg & retry btn\r\n                this.deathScene = false;\r\n                this.textMessage.text = this.deathMessages[0 | (Math.random() * this.deathMessages.length)];\r\n                this.callout.visible = true;\r\n                this.btnContinue.visible = true;\r\n            }\r\n        } else {\r\n            this.corpse.rotation += 0.005;           \r\n        }\r\n\r\n        var blr = Math.max(5, this.corpseBlurFilter.blur + 0.00004);\r\n        this.corpseBlurFilter.blur = blr;\r\n    }\r\n\r\n    /**\r\n     * If true the player death scene is played.\r\n     */\r\n    public get DeathScene() {\r\n        return this.deathScene;\r\n    }\r\n    public set DeathScene(value: boolean) {\r\n        this.deathScene = value;\r\n        if (this.deathScene) {\r\n            this.corpseBlurFilter.blur = 0;\r\n            var clm = new PIXI.filters.ColorMatrixFilter();\r\n            clm.sepia();\r\n            this.backSprite.filters = [clm];\r\n        } else {\r\n            this.backSprite.filters = null;\r\n        }\r\n    }\r\n\r\n\r\n    public SetBackGround(texture: PIXI.RenderTexture, scale) {\r\n        if (!this.backSprite) {\r\n            this.backSprite = new PIXI.Sprite(texture);\r\n            this.addChildAt(this.backSprite, 0);\r\n        } else {\r\n            this.backSprite.texture = texture;\r\n        }\r\n        this.backSprite.scale.set(1 / scale.x, 1 / scale.y);  //  rescale to fit full scene\r\n    }\r\n\r\n    public SetText(text: string, style?: PIXI.TextStyleOptions) {\r\n        this.textMessage.text = text;\r\n        if (style) {\r\n            this.textMessage.style = new PIXI.TextStyle(style);\r\n        }\r\n    }\r\n\r\n    private deathMessages: string[] = [\r\n        \"Life sucks and you just died!\",\r\n        \"You decided to check the\\nafterlife. Guess what?\\n\\nYou are dead!\",\r\n        \"Owned!\\nMore luck next time.\",\r\n        \"You have died!\\nRest in peace.\",\r\n        \"Your quest has failed.\\nMay you find more peace\\nin that world than\\nyou found in this one.\",\r\n        \"Here's a picture of\\nyour corpse.\\n\\nNot pretty!\",\r\n        \"Yep, you're dead.\\nMaybe you should consider\\nplaying a Barbie game!\",\r\n        \"Died...\"\r\n    ];\r\n}","import { StatType } from './enums';\r\n\r\nexport var eventEmitter = new PIXI.utils.EventEmitter();\r\nexport var MOVE_TOPIC = \"MOVE\";\r\nexport var BURN_TOPIC = \"BURN\";\r\nexport var STATCHANGE_TOPIC = \"STATCHANGE\";\r\nexport var DAMAGE_TOPIC = \"DAMAGE\";\r\n\r\n//  action signaling topics\r\nexport var GROUND_SHAKE = \"SHAKE\";\r\n\r\nexport interface IStatChangeEvent {\r\n    Type: StatType;\r\n    OldValue: number;\r\n    NewValue: number;\r\n    Stats: Array<number>;\r\n}\r\n\r\nexport interface IDpsChangeEvent {\r\n    OldValue: number;\r\n    Amount: number;\r\n}\r\n\r\nexport interface IBurnChangeEvent {\r\n    wasBurning: boolean;\r\n    isBurning: boolean;\r\n}","import {Howl} from \"howler\";\r\n\r\nexport class SoundMan {\r\n    private backgroundSnd: Howl;\r\n    private walkSnd: Howl;\r\n    private jumpSnd1: Howl;\r\n    private jumpSnd2: Howl;\r\n    private burnSnd: Howl;\r\n    private coinSnd: Howl;\r\n    private gemSnd: Howl;\r\n    private hurtSnd: Howl;\r\n    private winSnd: Howl;\r\n    private atkMag1: Howl;\r\n    private hitMag1: Howl;\r\n    private jumpAtk: Howl;\r\n    private woosh: Howl;\r\n    private squish: Howl;\r\n    private pain: Howl;\r\n    private jmpContact: Howl;\r\n    \r\n    private fxDemoSnd: Howl;\r\n\r\n    private questItemSnd: Howl;\r\n\r\n    private musicTrackNames: Array<string> = [\r\n        'assets/audio/Two-Finger-Johnny.mp3',\r\n        'assets/audio/Bumbling-Burglars_Looping.mp3',\r\n        'assets/audio/Bama-Country.mp3',\r\n        'assets/audio/Beachfront-Celebration.mp3',\r\n        'assets/audio/Easy-Jam.mp3',\r\n        'assets/audio/Whiskey-on-the-Mississippi.mp3',\r\n        'assets/audio/ZigZag.mp3',\r\n        'assets/audio/Carrousel.mp3',\r\n        'assets/audio/Disco-Break.mp3'\r\n    ];\r\n    private musicTracks: Array<Howl> = [];\r\n    private currentTrack: number = 0;\r\n\r\n    constructor() {\r\n        for (var i = 0, len = this.musicTrackNames.length; i < len; i++) {\r\n            var trackName = this.musicTrackNames[i];\r\n            this.musicTracks.push(new Howl({\r\n                src: [trackName],\r\n                autoplay: false,\r\n                loop: true,\r\n                volume: 0.6\r\n            }));\r\n        }\r\n\r\n        this.walkSnd = new Howl({\r\n            src: ['assets/audio/effects/step.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: true,\r\n            volume: 1,\r\n        });\r\n        this.jumpSnd1 = new Howl({\r\n            src: ['assets/audio/effects/jump1.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.jumpSnd2 = new Howl({\r\n            src: ['assets/audio/effects/jump2.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.burnSnd = new Howl({\r\n            src: ['assets/audio/effects/burn.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: true,\r\n            volume: 1\r\n        });\r\n        this.hurtSnd = new Howl({\r\n            src: ['assets/audio/effects/hurt.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.coinSnd = new Howl({\r\n            src: ['assets/audio/effects/coin.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.gemSnd = new Howl({\r\n            src: ['assets/audio/effects/gem.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.questItemSnd = new Howl({\r\n            src: ['assets/audio/effects/quest-item.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.winSnd = new Howl({\r\n            src: ['assets/audio/effects/win.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.atkMag1 = new Howl({\r\n            src: ['assets/audio/effects/atk-mag01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1,\r\n        });\r\n        this.hitMag1 = new Howl({\r\n            src: ['assets/audio/effects/hit-mag01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.jumpAtk = new Howl({\r\n            src: ['assets/audio/effects/jump-atk01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.pain = new Howl({\r\n            src: ['assets/audio/effects/pain01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n\r\n        this.jmpContact = new Howl({\r\n            src:['assets/audio/effects/jmp-contact.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n\r\n        this.woosh = new Howl({\r\n            src: ['assets/audio/effects/woosh.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.squish = new Howl({\r\n            src: ['assets/audio/effects/mob-squish.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n\r\n        this.fxDemoSnd = new Howl({\r\n            src: ['assets/audio/effects/fx-demo.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n    }\r\n\r\n    private previousMusicVolume = 0.6;\r\n    private previousFxVolume = 1;\r\n\r\n    private musicVolume = 0.6;\r\n    private fxVolume = 1;\r\n\r\n    public get MusicVolume() { return this.musicVolume; }\r\n    public set MusicVolume(value: number) {\r\n        this.musicVolume = value;\r\n        if (this.backgroundSnd && this.backgroundSnd.playing()) {\r\n            this.backgroundSnd.volume(this.musicVolume);\r\n        }\r\n    }\r\n\r\n    public get FxVolume() { return this.fxVolume; }\r\n    public set FxVolume(value: number) {\r\n        this.fxVolume = value;\r\n    }\r\n\r\n\r\n    public get IsFxOn() { return this.fxVolume > 0.0; }\r\n    public set IsFxOn(value: boolean) {\r\n        if (!value) {\r\n            this.previousFxVolume = this.fxVolume;\r\n            this.FxVolume = 0;\r\n        } else {\r\n            this.FxVolume = this.previousFxVolume;\r\n        }\r\n    }\r\n\r\n    public get IsMusicOn() { return this.musicVolume > 0.0; }\r\n    public set IsMusicOn(value: boolean) {\r\n        if (!value) {\r\n            this.previousMusicVolume = this.musicVolume;\r\n            this.MusicVolume = 0;\r\n        } else {\r\n            this.MusicVolume = this.previousMusicVolume;\r\n        }\r\n    }\r\n\r\n    public get CurrentTrackId() {\r\n        return this.currentTrack;\r\n    }\r\n\r\n\r\n    public get fxDemo() {\r\n        return this.fxDemoSnd;\r\n    }\r\n\r\n    public jumpAttack() {\r\n        this.walkSnd.pause();\r\n        this.jumpAtk.loop(false);\r\n        this.jumpAtk.play();\r\n        this.jumpAtk.volume(this.fxVolume);\r\n    }\r\n\r\n    public jump() {\r\n        this.walkSnd.pause();\r\n        this.jumpSnd1.play();\r\n        this.jumpSnd1.volume(this.fxVolume);\r\n    }\r\n    public idle() {\r\n        this.walkSnd.pause();\r\n    }\r\n    public walk(isRunning?: boolean) {\r\n        this.walkSnd.rate(isRunning ? 2.0 : 1.2);\r\n        if (!this.walkSnd.playing()) {\r\n            this.walkSnd.volume(this.fxVolume);\r\n            this.walkSnd.play();\r\n        }\r\n    }\r\n    public atkMagic1() {\r\n        this.atkMag1.volume(this.fxVolume);\r\n        this.atkMag1.play();\r\n    }\r\n    public hitMagic1() {\r\n        this.hitMag1.volume(this.fxVolume);\r\n        this.hitMag1.play();\r\n    }\r\n    public hitPain() {\r\n        this.pain.volume(this.fxVolume);\r\n        this.pain.play();\r\n    }\r\n\r\n    public mobSquish() {\r\n        this.squish.volume(this.fxVolume);\r\n        this.squish.play();\r\n    }\r\n\r\n    public bulletHitWall() {\r\n        this.woosh.volume(this.fxVolume);\r\n        this.woosh.play();\r\n    }\r\n\r\n    public coin() {\r\n        this.coinSnd.volume(this.fxVolume);\r\n        this.coinSnd.play();\r\n    }\r\n\r\n    public gem() {\r\n        this.gemSnd.volume(this.fxVolume);\r\n        this.gemSnd.play();\r\n    }\r\n\r\n    public hurt() {\r\n        this.hurtSnd.volume(this.fxVolume);\r\n        this.hurtSnd.play();\r\n    }\r\n\r\n    public jumpContact() {\r\n        this.jmpContact.volume(this.fxVolume);\r\n        this.jmpContact.play();\r\n    }\r\n    public questItem() {\r\n        this.questItemSnd.volume(this.fxVolume);\r\n        this.questItemSnd.play();\r\n    }\r\n\r\n    public win() {\r\n        if (this.backgroundSnd && this.backgroundSnd.playing()) {\r\n            this.backgroundSnd.fade(1, 0, 500);\r\n        }\r\n        this.hurtSnd.stop();\r\n        this.walkSnd.stop();\r\n        this.jumpSnd1.stop();\r\n        this.jumpSnd2.stop();\r\n        this.burnSnd.stop();\r\n\r\n        this.winSnd.volume(this.fxVolume);\r\n        this.winSnd.play();\r\n    }\r\n\r\n    public burn() {\r\n        if (!this.burnSnd.playing()) {\r\n            this.burnSnd.volume(this.fxVolume);\r\n            this.burnSnd.play();\r\n        }\r\n        this.hurt();\r\n    }\r\n    public burnStop() {\r\n        //this.burnSnd.stop();\r\n        this.burnSnd.fade(1, 0, 200);\r\n        setTimeout(() => this.burnSnd.stop(), 200);\r\n    }\r\n\r\n    public getTrack(name: string) {\r\n        for (var i = 0, len = this.musicTrackNames.length; i < len; i++) {\r\n            if (this.musicTrackNames[i].indexOf(name) >= 0) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public stopTrack() {\r\n        if (this.backgroundSnd !== undefined) {\r\n            this.backgroundSnd.stop();\r\n        }\r\n    }\r\n\r\n    public playTrack(trackId: number) {\r\n        if (this.backgroundSnd === undefined) {\r\n            this.backgroundSnd = this.musicTracks[trackId];\r\n            console.log(\"playTrack \" + trackId, this.backgroundSnd);\r\n        }\r\n\r\n        if (this.backgroundSnd !== this.musicTracks[trackId]) {\r\n            this.backgroundSnd.stop();\r\n            this.backgroundSnd = this.musicTracks[trackId];\r\n            this.backgroundSnd.volume(this.musicVolume);\r\n            this.backgroundSnd.play();\r\n        } else {\r\n            if (!this.backgroundSnd.playing()) {\r\n                this.backgroundSnd.volume(this.musicVolume);\r\n                this.backgroundSnd.play();\r\n            }\r\n        }\r\n        this.currentTrack = trackId;\r\n    }\r\n}\r\n\r\nexport var snd = new SoundMan();","import { Dictionary } from \"./Dictionary\";\r\nimport * as PIXI from 'pixi.js';\r\n\r\nexport class AnimatedSprite extends PIXI.Sprite {\r\n    constructor() {\r\n        super();\r\n        this.pivot.set(0.5);\r\n        this.anchor.set(0.5);\r\n        this.scale.set(1, -1);\r\n    }\r\n    \r\n    private animations = new Dictionary<AnimationSequence>();\r\n    protected currentSequence: AnimationSequence | null = null;\r\n\r\n    public addAnimations(...sequences: Array<AnimationSequence>):void {\r\n        sequences.forEach((seq: AnimationSequence, idx:number) => {\r\n            this.animations.set(seq.sequenceName, seq);\r\n\r\n            //  if no clip exists create it from first animation sequence\r\n            if (!this.texture.valid && idx === 0) {\r\n                this.texture = seq.textureAtlas;\r\n                this.texture.frame = seq.frames[0];\r\n            }\r\n        });\r\n    }\r\n\r\n    public clearAnimations() {\r\n        this.stop();\r\n        this.currentSequence = null;\r\n        this.animations.clear();\r\n    }\r\n\r\n    /**\r\n     *  Plays the animation sequence by name\r\n     */\r\n    public play = (name: string, fps?: number, loop = true) :void => {\r\n        if (!this.currentSequence || this.currentSequence.sequenceName !== name) {\r\n            this.resetAnimation();\r\n            this.currentSequence = this.animations.get(name);\r\n            this.texture = this.currentSequence.textureAtlas;\r\n            this.texture.frame = this.currentSequence.frames[0];            \r\n            this.isPlaying = true;\r\n        }\r\n        this.fps = fps || this.fps;\r\n        this.isLooping = loop;\r\n    }\r\n\r\n    private accumulator: number = 0;\r\n    private isPlaying: boolean = false;\r\n    private isLooping: boolean = false;\r\n    private frameIndex: number = 0;\r\n    private currentFps: number = 8;\r\n    private onCompleteCallBack!: (seq:AnimationSequence) => void;\r\n\r\n    public onUpdate (dt: number) { \r\n        if (this.isPlaying && this.texture.valid && this.currentSequence) {\r\n            this.accumulator += dt;\r\n            let secForFrame = 1000 / this.fps;\r\n            if (this.accumulator > secForFrame) {\r\n                this.accumulator -= secForFrame;\r\n                this.texture.frame = this.currentSequence.frames[++this.frameIndex];\r\n                if (this.frameIndex == this.currentSequence.frames.length-1) {\r\n                    this.frameIndex = 0;\r\n\r\n                    //  end the animation if not looping\r\n                    if (!this.isLooping) {\r\n                        this.isPlaying = false;\r\n                        if (this.onCompleteCallBack) {\r\n                            this.onCompleteCallBack(this.currentSequence);\r\n                        }\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n    }\r\n\r\n    public set onComplete(cb: (seq: AnimationSequence) => void) {\r\n        this.onCompleteCallBack = cb;\r\n    }\r\n    public get onComplete(): (seq: AnimationSequence) => void {\r\n        return this.onCompleteCallBack;\r\n    }\r\n\r\n    public stop():void {\r\n        this.isPlaying = false;\r\n    }\r\n    public get fps():number {\r\n        return this.currentFps;\r\n    }\r\n    public set fps(fps: number) {\r\n        this.currentFps = fps;\r\n        if (fps < 2) debugger;\r\n    }    \r\n    public set loop(isLooping: boolean) {\r\n        this.isLooping = isLooping;\r\n    }\r\n    public get loop(): boolean {\r\n        return this.isLooping;\r\n    }\r\n    \r\n    protected resetAnimation():void {\r\n        this.stop();\r\n        this.currentSequence = null;\r\n        this.accumulator = 0;\r\n        this.frameIndex = -1;\r\n    }\r\n    \r\n}\r\n\r\n/*\r\n *   Creates textures for all individual frames of the sequence from the given texture atlas.\r\n */\r\nexport class AnimationSequence  {\r\n    public textureAtlas: PIXI.Texture;\r\n    public frames: PIXI.Rectangle[] = [];\r\n\r\n    constructor(public sequenceName: string, textureAtlasName:string, frames: Array<number> = [], frameWidth : number, frameHeight : number) {\r\n        let tempTexure : PIXI.Texture = PIXI.utils.TextureCache[textureAtlasName];\r\n        this.textureAtlas = new PIXI.Texture(tempTexure.baseTexture);\r\n        var xFrames = Math.floor(this.textureAtlas.baseTexture.width / frameWidth);\r\n        frames.forEach((frame:number) => {\r\n            let y = Math.floor(frame / xFrames);\r\n            let x = frame % xFrames;\r\n            let rect = new PIXI.Rectangle(x * frameWidth, y * frameHeight, frameWidth, frameHeight);\r\n            this.frames.push(rect);\r\n        });\r\n    }\r\n    \r\n    public get frameCount(): number {\r\n        return this.frames.length;\r\n    }\r\n}","import * as Global from \"../global\";\r\nimport * as p2 from \"p2\";\r\nimport { Parallax, AnimatedSprite, AnimationSequence  } from \"..\";\r\nimport { COL_GRP_PLAYER, COL_GRP_GROUND, COL_GRP_NPC, COL_GRP_SCENE, COL_GRP_BULLET } from \"./CollisionGroups\";\r\nimport { SpawnPoint } from '../mobs/SpawnPoint';\r\nimport { Mob } from '../mobs/Mob';\r\nimport { IRootObject, ILevel, ILevelDefinition, IMapEntity, IMobEntity, ISpawnPoint, IDisplayObjectDefinition, IInteractionType, IBodyDefinition } from './LevelInterfaces';\r\nimport { getEntityDefinition } from './LevelHelper';\r\nimport { SCENE_HEIGHT, SCENE_WIDTH } from '../constants';\r\nimport { Dictionary } from '../_engine';\r\n\r\ndeclare type Fn = (definition: IDisplayObjectDefinition) => PIXI.DisplayObject;\r\n\r\nexport class LevelLoader {\r\n    \r\n    private gameLevels: IRootObject;\r\n    private static factoryList = new Dictionary<Fn>();\r\n\r\n    constructor(gameLevels: IRootObject) {\r\n        this.gameLevels = gameLevels;\r\n    }\r\n\r\n    /**\r\n     * Registers custom factory function for creating display objects.\r\n     * @param name the entity name used in level definition\r\n     * @param factory factory function returning a display object based on the given definition\r\n     */\r\n    public static registerFactory(name:string, factory:Fn){\r\n        this.factoryList.set(name, factory);\r\n    }\r\n\r\n    /**\r\n     * Loads the level.\r\n     * @param name\r\n     * @param container\r\n     */\r\n    public buildLevel(id: number): ILevel {\r\n\r\n        //  find the level by its id\r\n        var levelDefinition: ILevelDefinition = undefined;\r\n        for (var i = 0; i < this.gameLevels.levels.length; i++) {\r\n            if (this.gameLevels.levels[i].id === id) {\r\n                levelDefinition = this.gameLevels.levels[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        //  create level objects\r\n        var result: ILevel;\r\n        if (levelDefinition) {\r\n            result = this.createLevel(levelDefinition);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private createLevel(level: ILevelDefinition): ILevel {\r\n        var result: ILevel = {\r\n            parallax: [],\r\n            entities: [],\r\n            start: [],\r\n            audioTrack: level.audioTrack,\r\n            templates: [],\r\n            spawnPoints: []\r\n        };\r\n\r\n        //--------------------------------------\r\n        //  create parallax objects\r\n        //--------------------------------------            \r\n        var vps = new PIXI.Point(SCENE_WIDTH, SCENE_HEIGHT);\r\n        level.parallax.forEach((iplx) => {\r\n            var parallax = new Parallax(vps, iplx.parallaxFactor, iplx.textures, iplx.scale);\r\n            parallax.y = iplx.y;\r\n            result.parallax.push(parallax);\r\n        });\r\n\r\n        //--------------------------------------\r\n        //  merge global with level templates\r\n        //--------------------------------------\r\n        var templates = Global.LevelDefinitions.templates.concat(level.map.templates);\r\n        result.templates = templates;\r\n\r\n        //--------------------------------------\r\n        //  create display/physics object pairs\r\n        //--------------------------------------\r\n        level.map.entities.forEach((entity: IMapEntity, idx, arr) => {\r\n            let p2body = LevelLoader.createEntity(templates, entity);            \r\n            result.entities.push(p2body);\r\n        });\r\n\r\n        //--------------------------------------\r\n        //  create NPC's\r\n        //--------------------------------------\r\n        level.map.NPC = level.map.NPC || [];\r\n        level.map.NPC.forEach((npc: IMobEntity, idx, arr) => {\r\n            if (npc.type && npc.type === \"spawn_point\") {\r\n                let sp = <any>npc as ISpawnPoint;\r\n                let entity = sp.entity;\r\n                result.spawnPoints.push(new SpawnPoint(sp.name, sp.xy[0], sp.xy[1], sp.area, sp.maxMobCount, sp.respawnSeconds, entity));\r\n            } else {\r\n                let p2body = LevelLoader.createMob(templates, npc);                \r\n                result.entities.push(p2body);\r\n            }\r\n        });\r\n        result.start = level.map.start;\r\n        return result;\r\n    }\r\n\r\n    public static createEntity(templates: Array<any>, entity: IMapEntity): p2.Body {\r\n        let defs = getEntityDefinition(templates, entity);\r\n\r\n        //  display object\r\n        let dispObj: PIXI.DisplayObject = LevelLoader.buildDisplayObject(defs.doDef);\r\n        dispObj.name = entity.name || entity.template;\r\n        (dispObj as any).templateName = defs.templateName;\r\n\r\n        //  body\r\n        var p2body: p2.Body;\r\n        if (defs.bdDef) {\r\n            p2body = LevelLoader.buildPhysicsObject(defs.bdDef, dispObj);\r\n            p2body.shapes.every((s: p2.Shape) => {\r\n                if (defs.bdDef.collisionType === \"ground\") {\r\n                    s.collisionGroup = COL_GRP_GROUND;\r\n                    s.collisionMask = COL_GRP_PLAYER | COL_GRP_NPC | COL_GRP_SCENE | COL_GRP_BULLET;\r\n                } else {\r\n                    s.collisionGroup = COL_GRP_SCENE;\r\n                    s.collisionMask = COL_GRP_PLAYER | COL_GRP_NPC | COL_GRP_SCENE | COL_GRP_GROUND;\r\n                }\r\n                return true;\r\n            });\r\n            (p2body as any).DisplayObject = dispObj;\r\n\r\n            //  trigger\r\n            if (defs.trigger) {\r\n                (p2body as any).Trigger = defs.trigger;\r\n            }\r\n        } else {\r\n            p2body = new p2.Body();\r\n            (p2body as any).DisplayObject = dispObj;\r\n        }\r\n        return p2body;\r\n    }\r\n\r\n    public static createMob(templates: Array<any>, entity: IMobEntity): p2.Body {\r\n        let defs = getEntityDefinition(templates, entity);\r\n\r\n        //  display object\r\n        let mobDispObj: Mob = LevelLoader.buildDisplayObject(defs.doDef) as Mob;\r\n        mobDispObj.name = entity.name || entity.template;\r\n        (mobDispObj as any).templateName = defs.templateName;\r\n\r\n        // attributes and AI\r\n        mobDispObj.attributes = entity.attributes || defs.doDef.attributes || [];\r\n        mobDispObj.createAI(entity.ai || \"basic_static\");\r\n        mobDispObj.atkTexture = entity.attack || defs.doDef.attack;\r\n\r\n        //  body        \r\n        defs.bdDef.material = defs.bdDef.material || \"mob_default\";\r\n        var p2body: p2.Body = LevelLoader.buildPhysicsObject(defs.bdDef, mobDispObj);\r\n        p2body.shapes.every((s: p2.Shape) => {\r\n            s.collisionGroup = COL_GRP_NPC;\r\n            s.collisionMask = COL_GRP_PLAYER | COL_GRP_GROUND | COL_GRP_SCENE;\r\n            return true;\r\n        });\r\n        (p2body as any).DisplayObject = mobDispObj;\r\n\r\n        //  trigger\r\n        if (defs.trigger) {\r\n            (p2body as any).Trigger = defs.trigger;\r\n        }\r\n\r\n        return p2body;\r\n    }\r\n\r\n    /**\r\n     * Creates a display object from the definition.\r\n     * @param definition\r\n     */\r\n    private static buildDisplayObject(definition: IDisplayObjectDefinition): PIXI.DisplayObject {\r\n        var dispObj: PIXI.DisplayObject;\r\n        switch (definition.typeName) {\r\n            case \"Mob\":\r\n                let mob = new Mob(definition.texture as string);\r\n                //  if animations are defined in the json replace the built-in mob animations\r\n                if (definition.sequences) {\r\n                    mob.clearAnimations();\r\n                    definition.sequences.forEach((seq) => {\r\n                        var textureName = seq.texture || definition.texture;\r\n                        var aseq = new AnimationSequence(seq.name, textureName as string, seq.frames, seq.framesize[0], seq.framesize[1]);\r\n                        mob.addAnimations(aseq);\r\n                    });\r\n                    mob.play(definition.sequences[0].name);\r\n                }\r\n                if (definition.fps) {\r\n                    mob.fps = definition.fps;\r\n                }\r\n                mob.anchor.set(0.5, 0.5);\r\n                (mob as any).typeName = \"Mob\";\r\n                dispObj = mob;\r\n                break;\r\n\r\n            case \"Sensor\":\r\n                dispObj = new PIXI.DisplayObject();\r\n                (dispObj as any).typeName = \"Sensor\";\r\n                break;\r\n\r\n            case \"AnimatedSprite\":\r\n                var aspr = new AnimatedSprite();\r\n                definition.sequences.forEach((seq, idx, arr) => {\r\n                    var aseq = new AnimationSequence(seq.name, seq.texture, seq.frames, seq.framesize[0], seq.framesize[1]);\r\n                    aspr.addAnimations(aseq);\r\n                });\r\n                aspr.play(definition.sequences[0].name, definition.fps);\r\n                aspr.anchor.set(0.5, 0.5);\r\n                (aspr as any).typeName = \"AnimatedSprite\";\r\n                dispObj = aspr;\r\n                break;\r\n\r\n            case \"Sprite\":\r\n                var text = PIXI.loader.resources[definition.texture as string].texture;\r\n                var spr = new PIXI.Sprite(text);\r\n\r\n                if (definition.anchor === undefined)\r\n                    definition.anchor = 0.5;\r\n                spr.anchor.set(definition.anchor);\r\n\r\n                if (definition.pivot === undefined)\r\n                    definition.pivot = 0.5;\r\n\r\n                if (definition.scale === undefined)\r\n                    definition.scale = [1, -1];\r\n\r\n                spr.pivot.set(definition.pivot);\r\n                (spr as any).typeName = \"Sprite\";\r\n                dispObj = spr;\r\n                break;\r\n\r\n            // case \"Balloon\":\r\n            //     var bln = new Balloon();\r\n            //     dispObj = bln;\r\n            //     break;\r\n\r\n            // case \"Bumper\":\r\n            //     var bmp = new Bumper();\r\n            //     bmp.anchor.set(0.5);\r\n            //     dispObj = bmp;\r\n            //     break;\r\n            default:\r\n                var factory = this.factoryList.get(definition.typeName);\r\n                if(factory)\r\n                    dispObj = factory(definition);\r\n                else\r\n                    throw \"Factory not found for object name: \" + definition.typeName;\r\n                break;            \r\n        }\r\n\r\n        if (definition.visible !== undefined) {\r\n            dispObj.visible = definition.visible;\r\n        }\r\n        dispObj.rotation = definition.rotation || 0;\r\n        if (definition.xy) {\r\n            dispObj.position.set(definition.xy[0], definition.xy[1]);\r\n        }\r\n        if (definition.scale) {\r\n            dispObj.scale.set(definition.scale[0], definition.scale[1]);\r\n        }\r\n        if (definition.interactionType) {\r\n            (dispObj as IInteractionType).interactionType = definition.interactionType;\r\n        }\r\n        if (definition.drop) {\r\n            (dispObj as IInteractionType).drop = definition.drop;\r\n        }\r\n        if (definition.tint) {\r\n            (dispObj as any).tint = parseInt(definition.tint, 16);\r\n        }\r\n        return dispObj;\r\n    }\r\n\r\n    /**\r\n     * Creates a physics body and shape from the definition.\r\n     * @param definition\r\n     * @param dispObj the display object to retrieve the defaults from.\r\n     * @param preventSensor if true a non sensor body will be created (this is to support mobs\r\n     *                      that must have normal bodies but also an interactionType.\r\n     */\r\n    private static buildPhysicsObject(definition: IBodyDefinition, dispObj: PIXI.DisplayObject, preventSensor: boolean = false): p2.Body {\r\n        var body: p2.Body;\r\n        let w = 0, h = 0;\r\n        if (definition) {\r\n            var options: p2.BodyOptions = {\r\n                mass: definition.mass,\r\n                position: definition.xy ? definition.xy : [dispObj.x, dispObj.y],\r\n                angle: definition.angle || dispObj.rotation,\r\n                fixedRotation: definition.fixedRotation || false,\r\n                angularDamping: definition.angularDamping || 0.1,\r\n                damping: definition.damping || 0.1,\r\n            } as p2.BodyOptions;\r\n            \r\n            body = new p2.Body(options);\r\n            body.type = definition.type || p2.Body.KINEMATIC; /* DYNAMIC = 1, DYNAMIC = 1, STATIC = 2 */\r\n            var dispObjAsAny: any = dispObj as any;\r\n            var shape: p2.Shape;\r\n            switch (definition.shape) {\r\n                case \"Circle\":\r\n                    let radius = 32;\r\n                    if (definition.size) {\r\n                        if (definition.size.constructor === Array) {\r\n                            radius = definition.size[0];\r\n                        } else {\r\n                            radius = definition.size as number;\r\n                        }\r\n                    } else {\r\n                        radius = dispObjAsAny.width;\r\n                    }\r\n                    shape = new p2.Circle({ radius: radius });\r\n                    break;\r\n\r\n                case \"Platform\":\r\n                    if (definition.size) {\r\n                        w = definition.size[0];\r\n                        h = definition.size[1];\r\n                    } else {\r\n                        w = Math.abs(dispObjAsAny.width);\r\n                        h = Math.abs(dispObjAsAny.height);\r\n                    }\r\n                    shape = new p2.Box({\r\n                        width: w,\r\n                        height: h,\r\n                    });\r\n\r\n                    //  the position is centered but we need it to be left top aligned\r\n                    body.position[0] = body.position[0] + w / 2;\r\n                    body.position[1] = body.position[1] - h / 2;\r\n                    break;\r\n\r\n                case \"Box\":\r\n                    //  get the size\r\n                    if (definition.size) {\r\n                        w = definition.size[0];\r\n                        h = definition.size[1];\r\n                    } else {\r\n                        if (dispObjAsAny.width) {\r\n                            w = Math.abs(dispObjAsAny.width);\r\n                            h = Math.abs(dispObjAsAny.height);\r\n                        } else {\r\n                            //  TODO: check this - seems not to get correct bounds\r\n                            w = dispObj.scale.x * dispObj.getLocalBounds().width;\r\n                            h = dispObj.scale.y * dispObj.getLocalBounds().height;\r\n                        }\r\n                    }\r\n                    shape = new p2.Box({\r\n                        width: w,\r\n                        height: h,\r\n                    });\r\n                    break;\r\n                //  TODO: implement other shapes if needed\r\n            }\r\n\r\n            if (definition.material) {\r\n                (shape as any).materialName = definition.material;\r\n            }\r\n\r\n            if (!preventSensor && !!(dispObj as IInteractionType).interactionType) {\r\n                shape.sensor = true;\r\n                body.type = p2.Body.STATIC;\r\n                body.collisionResponse = false;\r\n                body.setDensity(0.0); //   this is to prevent body impacts on player collide (makes no sense as it is a sensor, bug maybe?)\r\n                console.log(\"created collectible sensor\", shape);\r\n            } else if ((dispObj as any).typeName === \"Sensor\") {\r\n                shape.sensor = true;\r\n                body.type = p2.Body.STATIC;\r\n                body.collisionResponse = false;\r\n                body.setDensity(0.0);\r\n            }\r\n\r\n            body.addShape(shape);\r\n        }\r\n        return body;\r\n    }\r\n}","export {AnimatedSprite, AnimationSequence} from \"./AnimatedSprite\";\r\nexport {Button, OutlineMode} from \"./Button\";\r\nexport {Dictionary} from \"./Dictionary\";\r\nexport {KeyboardMapper} from \"./KeyboardMapper\";\r\nexport {LinkedList} from \"./LinkedList\";\r\nexport {Parallax} from \"./Parallax\";\r\nexport {Scene} from \"./Scene\";\r\nexport {SceneManager, DefaultResizer, ISize, ISceneResizer} from \"./SceneManager\";\r\nexport {Slider} from \"./Slider\";","export class Dictionary<T> {\r\n    private _values: { [key: string]: T; } = {};\r\n    private _keys: string[] = [];\r\n\r\n    public get(key: string): T {\r\n        return this._values[key];        \r\n    }\r\n\r\n    public contains(key: string): boolean {\r\n        return key in this._values;\r\n    }\r\n\r\n    public remove(key: string) {\r\n        var index = this._keys.indexOf(key, 0);\r\n        this._keys.splice(index, 1);\r\n        delete this._values[key];\r\n    }\r\n\r\n    public set(key: string, value: T) {\r\n        if (!(key in this._values)) {\r\n            this._keys.push(key);\r\n        }\r\n        this._values[key] = value;\r\n    }\r\n\r\n    public get keys(): string[] {\r\n        return this._keys;\r\n    }\r\n\r\n    public getAll(): { [key: string]: T; } {\r\n        return this._values;\r\n    }\r\n\r\n    public getSet(key: string, valueGetter: () => T): T;\r\n    public getSet(key: string, value: T): T;\r\n    public getSet(key: string, valueOrvalueGetter: any): T {\r\n        if (!this.contains(key)) {\r\n            this.set(key, typeof valueOrvalueGetter == 'function' ? valueOrvalueGetter() : valueOrvalueGetter);\r\n        }\r\n        return this.get(key);\r\n    }\r\n\r\n    public clear() {\r\n        this._keys = [];\r\n        this._values = {};\r\n    }\r\n}\r\n","export const COL_GRP_PLAYER = 1;\r\nexport const COL_GRP_NPC = 2;\r\nexport const COL_GRP_SCENE = 4;\r\nexport const COL_GRP_BULLET = 8;\r\nexport const COL_GRP_GROUND = 16;","import * as pixi from 'pixi.js';\r\nexport var PIXI = pixi;\r\n\r\nimport * as g from \"./global\";\r\nexport var Global = g;\r\n\r\nexport * from \"./_engine\";\r\nexport * from \"./constants\";"],"sourceRoot":""}