{"version":3,"sources":["webpack:///./index.ts","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./constants.ts","webpack:///./enums.ts","webpack:///./objects/PlayerStats.ts","webpack:///./global.ts","webpack:///./world/WorldP2.ts","webpack:///./objects/AnimatedSprite.ts","webpack:///./objects/AnimationSequence.ts","webpack:///./events.ts","webpack:///./world/SoundMan.ts","webpack:///./world/LevelLoader.ts","webpack:///./utility/TextureLoader.ts","webpack:///./world/CollisionGroups.ts","webpack:///./node_modules/pixi-scenegraph/dist/index.es.js","webpack:///./utility/Dictionary.ts","webpack:///./world/LevelHelper.ts","webpack:///./mobs/Mob.ts","webpack:///./objects/Bullet.ts","webpack:///./app.ts","webpack:///../src/ParticleUtils.ts","webpack:///../src/PropertyNode.ts","webpack:///../src/PropertyList.ts","webpack:///../src/Particle.ts","webpack:///../src/Emitter.ts","webpack:///../src/PolygonalChain.ts","webpack:///../src/PathParticle.ts","webpack:///../src/AnimatedParticle.ts","webpack:///./objects/SpriteButton.ts","webpack:///./objects/Parallax.ts","webpack:///./utility/KeyboardMapper.ts","webpack:///./scenes/BootScene.ts","webpack:///./scenes/LoaderScene.ts","webpack:///./mobs/SpawnPoint.ts","webpack:///./mobs/BasicStaticAI.ts","webpack:///./mobs/AI.ts","webpack:///./objects/MasterHud.ts","webpack:///./scenes/MainScene.ts","webpack:///./objects/HeroCharacter.ts","webpack:///./objects/MovementController.ts","webpack:///./objects/StatsHud.ts","webpack:///./objects/Lava.ts","webpack:///./objects/Platform.ts","webpack:///./objects/Bumper.ts","webpack:///./questSystem/QuestManager.ts","webpack:///./questSystem/QuestState.ts","webpack:///./scenes/OptionsScene.ts","webpack:///./scenes/CutScene.ts"],"names":["PIXI","pixi","TWEEN","_TWEEN","default","Global","g","createParticleEmitter","TextureLoader","AnimatedSprite","AnimationSequence","SpriteButton","Parallax","Dictionary","KeyboardMapper","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","__generator","body","f","y","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__exportStar","m","exports","__values","o","__read","ar","error","__spread","concat","__spreadArrays","il","k","a","j","jl","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","__importDefault","SCENE_WIDTH","SCENE_HEIGHT","SCENE_HALF_WIDTH","SCENE_HALF_HEIGHT","BTN_WIDTH","BTN_HEIGHT","GUI_FONT","SCENE_BACKCOLOR","ANIMATION_FPS_NORMAL","ANIMATION_FPS_SLOW","BTN_STYLE","align","padding","fontSize","fontFamily","fill","strokeThickness","stroke","TEXT_STYLE","font","name","size","tint","MSG_COIN_STYLE","MSG_HP_STYLE","MSG_EXP_STYLE","MSG_WARN_STYLE","QUEST_ITEM_STYLE","QUEST_STYLE","BaseStatType","StatType","DamageType","AtrType","DirectionH","baseStats","attributeStats","stats","accumulator","dpsDecreaseAmount","hasJumpAttack","hasMagicAttack","characterLevel","currentGameLevel","expForNextLevel","isBurningBuff","buffs","onUpdate","dt","now","performance","len","dps","LavaBorder","Lava","Poison","dmg","Dust","MaxDust","INTERVAL","RegenDust","increaseStat","HP","MaxHP","RegenHP","amount","Math","floor","event","OldValue","Amount","eventEmitter","emit","DAMAGE_TOPIC","wasBurning","isBurning","BURN_TOPIC","scevent","Type","Coins","NewValue","Stats","id","TotalExp","AttributePoints","PlayerStats","expForLevel","rebuildStats","levelLoader","LevelLoader","LevelDefinitions","loadLevel","loadUserState","currentLevel","buildLevel","saveUserState","isLevelCompleted","Gold","data","getStat","Exp","AtrPts","LastLevel","console","log","setStat","type","findExpLevel","LevelMaxExp","LevelExp","updateEvent","STATCHANGE_TOPIC","maxValue","newValue","CharacterLevel","exp","sceneManager","canvas","document","getElementById","renderOptions","width","height","view","backgroundColor","antialias","transparent","resolution","window","devicePixelRatio","SceneManager","Renderer","destroy","undefined","position","Point","container","textures","config","cfg","alpha","start","end","color","scale","minimumScaleMultiplier","speed","minimumSpeedMultiplier","acceleration","startRotation","min","max","rotationSpeed","lifetime","blendMode","frequency","emitterLifetime","maxParticles","pos","addAtBack","spawnType","spawnCircle","x","emitter","particles","Emitter","templates","levels","quests","BodyA","BodyB","ContactPair","contactPairs","contactWatch","playerBodyContacts","fixedTimeStep","beginContact","evt","bullet","other","bodyA","shapes","collisionGroup","COL_GRP_BULLET","bodyB","world","playerHit","playerBody","bulletBody","otherBody","velocity","watchedItemFound","filter","bodyId","cp","endContact","bodyIDX","splice","foundIdx","p2","World","gravity","setupMaterials","ground","Body","mass","shape","Plane","material","materials","get","COL_GRP_GROUND","collisionMask","COL_GRP_SCENE","COL_GRP_NPC","COL_GRP_PLAYER","addShape","addBody","fixedRotation","damping","Circle","radius","sleepMode","BODY_SLEEPING","on","clearLevel","bodies","removeBody","eventName","handler","context","update","interpolatedPosition","materialName","clearContactsForBody","getContactsForBody","foundPairs","addContactWatch","set","Material","idCounter","playerGroundContactMaterial","ContactMaterial","friction","restitution","stiffness","Equation","DEFAULT_STIFFNESS","relaxation","DEFAULT_RELAXATION","frictionStiffness","frictionRelaxation","surfaceVelocity","addContactMaterial","playerMobContactMaterial","playerBoxContactMaterial","playerBoxHighFirctContactMaterial","playerBumperContactMaterial","Number","MAX_VALUE","boxGroundContactMaterial","WorldP2","wp2","currentSequence","isPlaying","isLooping","frameIndex","currentFps","animations","play","fps","loop","sequenceName","resetAnimation","texture","spriteSheet","frame","frames","pivot","anchor","addAnimations","sequences","forEach","seq","idx","valid","clearAnimations","stop","clear","secForFrame","onCompleteCallBack","cb","Sprite","spriteSheetName","frameWidth","frameHeight","tempTexure","Get","isAtlas","IsAtlas","Texture","baseTexture","xFrames","rect","Rectangle","utils","EventEmitter","MOVE_TOPIC","GROUND_SHAKE","musicTrackNames","musicTracks","currentTrack","previousMusicVolume","previousFxVolume","musicVolume","fxVolume","trackName","Howl","preload","src","autoplay","volume","walkSnd","jumpSnd1","jumpSnd2","burnSnd","hurtSnd","coinSnd","gemSnd","questItemSnd","winSnd","atkMag1","hitMag1","jumpAtk","pain","jmpContact","woosh","squish","fxDemoSnd","backgroundSnd","playing","FxVolume","MusicVolume","jumpAttack","pause","jump","idle","walk","isRunning","rate","atkMagic1","hitMagic1","hitPain","mobSquish","bulletHitWall","coin","gem","hurt","jumpContact","questItem","win","fade","burn","burnStop","setTimeout","getTrack","stopTrack","playTrack","trackId","state","load","once","SoundMan","snd","gameLevels","registerFactory","factory","factoryList","levelDefinition","createLevel","level","parallax","entities","audioTrack","spawnPoints","vps","iplx","parallaxFactor","map","entity","arr","p2body","createEntity","NPC","npc","sp","SpawnPoint","xy","area","maxMobCount","respawnSeconds","createMob","defs","getEntityDefinition","dispObj","buildDisplayObject","doDef","template","templateName","bdDef","buildPhysicsObject","every","collisionType","DisplayObject","trigger","Trigger","mobDispObj","attributes","createAI","ai","atkTexture","attack","definition","typeName","Mob","textureName","aseq","framesize","aspr","sprTexture","spr","visible","rotation","interactionType","drop","parseInt","preventSensor","w","h","options","angle","angularDamping","KINEMATIC","dispObjAsAny","abs","Box","getLocalBounds","sensor","STATIC","collisionResponse","setDensity","fullName","mipmap","scaleMode","SCALE_MODES","LINEAR","substr","resourceName","res","resourceCache","Loader","shared","resources","loadType","spritesheet","DefaultScreenSizeCalculator","designedWidth","designedHeight","GetAvailableSize","innerWidth","innerHeight","GetAspectRatio","CalculateSize","availableSize","aspect","maxWidth","maxHeight","CalculateScale","calculatedSize","VERSION","screenSizeCalculator","_this","currentScene","scenes","controllers","animationFrameHandle","Destroy","cancelAnimationFrame","scene","RemoveScene","app","children","resizeHandler","onResize","onRender","time","startTime","Date","timeStamp","ctrl","scope","isPaused","logVersion","masterContainer","ticker","add","stage","designWidth","designHeight","removeEventListener","addEventListener","navigator","userAgent","toLowerCase","fmtPurp","args","info","renderer","enumerable","configurable","AddController","controller","RemoveController","controllerOrId","AddScene","RemoveAllScenes","onDestroy","item","index","HasScene","found","Name","GetScene","Error","ActivateScene","sceneOrName","onDeactivate","lastScene","BackGroundColor","onActivate","removeChildren","addChild","masterHudOverlay","RESOLUTION","ActivatePreviousScene","hud","CaptureScene","renderTexture","render","avlSize","resize","Scene","_super","paused","hudScene","clearValue","timestamp","removeChild","maxIndex","addChildAt","child","_i","setChildIndex","clearFlag","dictValues","dictKeys","contains","remove","getAll","getSet","valueOrvalueGetter","displayObjectDefinition","bodyDefinition","displayObject","entityTemplate","triggerTemplate","getUniqueItems","root","levelId","assets","tos","_isDead","isLoading","currentSeq","_direction","Left","onComplete","fireBullet","onDeathCallBack","isDead","aname","dir","_attributes","values","Bullet","emitBullet","Atk","aiTypeName","_ai","BasicStaticAI","ttl","damage","direction","ellapsed","IsDead","sqrt","onDeath","reset","bullets","findDeadBullet","worldContainer","gravityScale","angularVelocity","DYNAMIC","pt","Float32Array","Direction","blt","PRELOAD_FONTS","google","families","active","scm","getScm","boot","BootScene","WebFontConfig","location","protocol","wf","createElement","async","getElementsByTagName","parentNode","insertBefore","TextureFromString","ParticleUtils","ease","isStepped","generateEase","createList","array","list","node","first","PropertyNode","hexToRGB","pixiNS","GetTextureFromString","exec","pixi.VERSION","fromImage","from","verbose","DEG_TO_RADS","PI","rotatePoint","sin","cos","xnew","ynew","combineRGBComponents","normalize","point","oneOverLen","scaleBy","output","charAt","segments","qty","oneOverQty","getBlendMode","NORMAL","toUpperCase","replace","createSteppedGradient","numSteps","currentNode","current","nextIndex","lerp","curVal","nextVal","isColor","interpolate","intColorSimple","intValueSimple","intColorStepped","intValueStepped","intColorComplex","intValueComplex","rotationAcceleration","maxLife","age","extraData","alphaList","PropertyList","speedList","speedMultiplier","maxSpeed","NaN","scaleList","scaleMultiplier","colorList","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","prev","init","Particle_init","Particle","Particle_update","Sprite_destroy","Particle_destroy","applyArt","kill","tslib_1.__extends","noRotation","art","EMPTY","delta","deltaX","deltaY","oldVX","oldVY","currentSpeed","newRotationSpeed","atan2","recycle","parent","parseArt","warn","parseData","countingLengths","totalLength","isArray","chain","prevPoint","second","p1","l","segLength","getRandomPoint","out","chosenSeg","rand","random","Ticker","helperPoint","particleParent","particleImages","_currentImageIndex","_particleConstructor","startAlpha","startSpeed","startScale","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","_frequency","spawnChance","spawnPos","_spawnFunc","spawnRect","spawnPolygonalChain","particlesPerWave","particleSpacing","angleStart","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","rotate","updateSpawnPos","updateOwnerPos","cleanup","particle","slice","partClass","parseSpawnType","initAdditional","clone","autoUpdate","orderedArt","_spawnRect","_spawnCircle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","_spawnPolygonalChain","PolygonalChain","spawnPolygon","newRot","diff","resetPositionTracking","playOnceAndDestroy","callback","playOnce","TARGET_FPMS","prevX","prevY","curX","curY","emitPosX","emitPosY","particleConstructor","applyAdditionalProperties","unshift","MATH_FUNCS","WHITELISTER","RegExp","join","path","initialRotation","initialPosition","movement","pathString","matches","match","Function","parsePath","duration","framerate","elapsed","tex","outTextures","outArr","dupe","count","texturePath","isHighlightedValue","isPressedValue","isDisabledValue","isClickStartedValue","requestedWidth","requestedHeight","onButtonDown","textureDown","onButtonUp","onClickHandler","applyTexture","onButtonUpOutside","onButtonOver","textureHighlight","mouseover","onButtonOut","mouseout","setTexture","buttonMode","interactive","cursor","isPressed","textValue","text","performClick","textureAtlasName","NEAREST","btnHeight","btnWidth","textureUp","scaleW","scaleH","onClick","textureScale","spriteBuffer","spriteOrderList","totalWidth","recalculatePosition","newPositionX","firstIdx","firstSpr","lastIdx","lastSpr","worldPosition","updatePositions","viewPortSize","setTextures","SetViewPortX","factor","textureIndex","getTexture","Container","State","ALT_KEY","SHIFT_KEY","CTRL_KEY","addKeyboardActionHandler","action","stateActions","keyboard","keydown","bind","keyup","currentState","actions","findHandlerAndInvoke","GLOBAL","isKeyDown","keyCode","ka","isAssigned","altKey","shiftKey","ctrlKey","releaseKeyAfterInvoke","which","PRELOAD_BOOT_ASSETS","spinner","loadingMessage","Text","dropShadow","startPreloading","loadingTexture","onPreloadFinished","defaultIcon","plugins","interaction","cursorStyles","hover","style","questsObj","itemId","itemsNeeded","itemsCollected","rewardCoins","rewardExp","ls","LoaderScene","preloadAssets","GetLevelAssets","handleLevelLoading","onProgress","MainScene","OptionsScene","CutScene","MasterHudOverlay","MasterHud","startLevel","loader","resource","progress","toFixed","mobCount","nextSpawn","mobBody","mobEntity","canFire","nowMilliseconds","rnd","can","lastFire","attackCD","AI","calcDistance","targetDistance","turnTowardsTarget","hasTarget","AtkCD","dx","dy","Right","BTN_X","prefix","isFullScreen","btnFullScreen","toggleFullScreen","btnOptions","doc","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","docElm","documentElement","requestFullScreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","exitFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","shakeDuration","shakeEnd","nextShake","magnitude","SHAKE_COUNT","startGroundShake","milliSeconds","magnitudeInPixels","setup","hero","interpolatedAngle","questMngr","canActivateTrigger","distance","handleTriggerEvent","playerContacts","handleInteractiveCollision","IsHeroInteractive","cutScene","backGroundTexture","SetBackGround","DeathScene","shakeX","randomRange","shakeY","HeroCharacter","StatsHud","HudOverlay","def","Platform","tilesX","tilesY","Bumper","QuestManager","plx","IsInteractive","collectObject","orgScaleX","upX","upY","endX","endY","moveUp","Tween","to","easing","Easing","Linear","None","moveAway","Back","In","removeEntity","addInfoMessage","acquireItem","secondsFromNow","seconds","removeDisplayObject","movementCtrl","MovementState","Idle","emitterPixies","JumpLeft","IsRunning","JumpRight","JumpUp","emitterBurn","degree","onPlayerMove","newState","idleAnimationTimeoutHandle","clearTimeout","JumpDownLeft","JumpDownRight","JumpDown","MovementController","onPlayerContact","onBulletContact","HERO_FRAME_SIZE","asset","isInteractive","mob","verticalVelocity","handleMobInteraction","movementState","smoke","explode","it","chance","dropItemBody","addDropItem","itemBody","orgScaleY","VELOCITY","JUMP_FORCE","JUMP_ATTACK_FORCE","JUMP_COOLDOWN","JUMP_ATTACK_COOLDOWN","JUMP_ATTACK_FREEZE","nextJumpAllowed","nextJumpDownAllowed","kbd","isJumping","_isInteractive","StartJump","forceVector","applyImpulse","StartJumpDown","setZeroForce","oldState","hasOnlySensorContacts","calcMovementVelocity","HasJumpAtack","canRun","newIsRunning","CanJump","isCurrentJumping","IsJumping","questMsgEndTime","handleDpsChange","handleStatChange","txtCoins","toString","txtDust","txtHP","round","renderExp","handleLevelUp","txtExp","expFiller","addLvlUpMessage","txtLevel","txtPlayerPosition","BitmapText","statContainer","questPanel","txtQuestMessage","txtPanelStyle","pnl","expPreFiller","fillLen","txtExpStyle","onCompleteCB","message","offsetX","stl","txtInfo","addQuestItemMessage","setQuestMessage","msg","ttlMilis","pct","targetWidth","preFillTween","fillTween","Bounce","Out","FRAME_SIZE_X","FRAME_SIZE_Y","textureNameTopLeft","textureNameTopRight","textureNameBtmMid","textureNameBtmLeft","textureNameBtmRight","textureNameTopMid","TilingSprite","xTiles","ROTATION","rot","rotor","gameScene","questState","qs","QuestState","findQuest","quest","findQuestWithItem","setQuestState","Completed","completedMsg","questId","dependsOn","dependency","Rewarded","lastActive","getQuestState","welcomeMsg","Finished","giveRewards","InProgress","genericQuestHandler","getChildByName","lock","findBodyByName","cs","SetText","finishedMsg","rt","objectiveMsg","foundBody","currentMusicTrack","find","obj","title","OFFSET","btnBack","deathScene","btnContinue","callout","corpse","deathTrackId","deathMessages","corpseBlurFilter","filters","BlurFilter","textMessage","blr","blur","clm","ColorMatrixFilter","sepia","backSprite"],"mappings":"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","file":"main.bundle.js","sourcesContent":["import * as pixi from 'pixi.js';\r\nexport var PIXI = pixi;\r\n\r\nimport * as _TWEEN from \"@tweenjs/tween.js\";\r\nexport var TWEEN = (_TWEEN as any).default;\r\n\r\nimport * as g from \"./global\";\r\nexport var Global = g;\r\nexport var createParticleEmitter = g.createParticleEmitter;\r\n\r\nexport * from \"pixi-scenegraph\";\r\nexport * from \"./constants\";\r\n\r\nexport {TextureLoader} from './utility/TextureLoader';\r\nexport {AnimatedSprite} from './objects/AnimatedSprite';\r\nexport {AnimationSequence} from './objects/AnimationSequence';\r\nexport {SpriteButton} from './objects/SpriteButton';\r\nexport {Parallax} from './objects/Parallax';\r\nexport {Dictionary} from './utility/Dictionary';\r\nexport {KeyboardMapper} from './utility/KeyboardMapper';","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export const SCENE_WIDTH: number = 1920;\r\nexport const SCENE_HEIGHT: number = 1080;\r\nexport const SCENE_HALF_WIDTH = SCENE_WIDTH / 2;\r\nexport const SCENE_HALF_HEIGHT = SCENE_HEIGHT / 2;\r\nexport const BTN_WIDTH: number = 120;\r\nexport const BTN_HEIGHT: number = 60;\r\nexport const GUI_FONT = \"Orbitron\";\r\n\r\nexport const SCENE_BACKCOLOR = 0x112233;\r\n\r\nexport const ANIMATION_FPS_NORMAL = 14;\r\nexport const ANIMATION_FPS_SLOW = 4;\r\n\r\nexport const BTN_STYLE = {\r\n    align: \"center\",\r\n    padding: 0,\r\n    fontSize: 28,\r\n    fontFamily: GUI_FONT,\r\n    fill: 0x46fbfd,\r\n    strokeThickness: 1,\r\n    stroke: 0x0\r\n};\r\n\r\nexport const TEXT_STYLE: PIXI.IBitmapTextStyle = {\r\n    align: \"left\",\r\n    font: {name: \"Orbitron\", size: 21},\r\n    tint: 0xE5E51B,\r\n};\r\n\r\nexport const MSG_COIN_STYLE : PIXI.IBitmapTextStyle =\r\n{\r\n    align: \"left\",\r\n    font: {name: \"Orbitron\", size: 22},\r\n    tint: 0xfeff44,\r\n};\r\n\r\nexport const MSG_HP_STYLE: PIXI.IBitmapTextStyle =\r\n{\r\n    align: \"center\",\r\n    font: {name: \"Orbitron\", size: 24},\r\n    tint: 0xff1111    \r\n};\r\n\r\nexport const MSG_EXP_STYLE: PIXI.IBitmapTextStyle =\r\n    {\r\n        align: \"center\",\r\n        font: {name: \"Orbitron\", size: 24},\r\n        tint: 0x84c202,\r\n    };\r\n\r\nexport const MSG_WARN_STYLE: PIXI.IBitmapTextStyle =\r\n{\r\n    align: \"center\",\r\n    font: {name: \"Orbitron\", size: 27},\r\n    tint: 0xff0011,\r\n};\r\n\r\nexport const QUEST_ITEM_STYLE: PIXI.IBitmapTextStyle =\r\n    {\r\n        align: \"center\",\r\n        font: {name: \"Orbitron\", size: 28},\r\n        tint: 0x84c2f2        \r\n    };\r\n\r\n    export const QUEST_STYLE: PIXI.IBitmapTextStyle =\r\n    {\r\n        align: \"left\",\r\n        font: {name: \"Orbitron\", size: 24},\r\n        tint: 0xfeffcc,\r\n    };","export enum BaseStatType {\r\n    MaxHP,\r\n    MaxDust,\r\n    RegenHP,\r\n    RegenDust,\r\n}\r\n\r\nexport enum StatType {\r\n    MaxHP,\r\n    HP,\r\n\r\n    MaxDust,\r\n    Dust,\r\n\r\n    RegenHP,\r\n    RegenDust,\r\n\r\n    Coins,\r\n    Gold,           //  not used\r\n\r\n    LevelExp,       // calculated value: current level exp, starts from 0 each level\r\n    LevelMaxExp,    // calculated value: current level exp needed to reach next level \r\n    TotalExp,       // total exp  \r\n\r\n    AttributePoints,\r\n\r\n    CharacterLevel, // calculated value: current char level based on total experience\r\n}\r\n\r\nexport enum DamageType {\r\n    LavaBorder = 1000,\r\n    Lava = 1001,\r\n    Poison = 1002\r\n}\r\n\r\n\r\nexport enum AtrType {\r\n    HP,\r\n    Atk,\r\n    AtkCD,\r\n    Def,\r\n}\r\n\r\nexport enum DirectionH {\r\n    Left,\r\n    Right,\r\n}","import { LevelDefinitions } from '../global';\r\nimport { eventEmitter, DAMAGE_TOPIC, STATCHANGE_TOPIC, BURN_TOPIC, IStatChangeEvent, IDpsChangeEvent} from \"../events\";\r\nimport { LevelLoader } from '../world/LevelLoader';\r\nimport { ILevel } from '../world/LevelInterfaces';\r\nimport { BaseStatType, StatType, DamageType } from '../enums';\r\n\r\n\r\n\r\nclass PlayerStats {\r\n    /**\r\n     * Base stats are fixed values increased with level.\r\n     */\r\n    private baseStats: Array<number> = [];\r\n\r\n    /**\r\n     * Attribute stats are player assigned values (point distribution).\r\n     */\r\n    private attributeStats: Array<number> = [];\r\n    \r\n    private stats: Array<number> = [];\r\n\r\n    private accumulator: number = 0.0;\r\n    private dpsDecreaseAmount: number = 0;\r\n    private static expForLevel: Array<number> = [];\r\n\r\n    //  acquired skills\r\n    private hasJumpAttack: boolean = false;\r\n    private hasMagicAttack: boolean = false;\r\n\r\n    //  achievement levels\r\n    public characterLevel: number = 0;\r\n    public currentGameLevel: number = 0;\r\n    private expForNextLevel: number = 0;\r\n\r\n    //  user related\r\n    public id: number;\r\n\r\n    private isBurningBuff: boolean = false;\r\n\r\n    /**\r\n     *   Stores timestamps (Unix timestamps in seconds with fractions) when the buff elapses.\r\n     */\r\n    public buffs: Array<number> = [];\r\n\r\n    private levelLoader : LevelLoader;\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n\r\n        //  attr  stats\r\n        this.attributeStats[BaseStatType.RegenHP] = 0;\r\n        this.attributeStats[BaseStatType.RegenDust] = 0;\r\n        this.attributeStats[BaseStatType.MaxHP] = 0;\r\n        this.attributeStats[BaseStatType.MaxDust] = 0;\r\n\r\n        // runtime stats\r\n        this.stats[StatType.Coins] = 0;\r\n        this.stats[StatType.Dust] = 600;\r\n        this.stats[StatType.TotalExp] = 0;\r\n        this.stats[StatType.AttributePoints] = 0;\r\n        this.stats[StatType.HP] = 120;\r\n\r\n        let diff = 1000;\r\n        PlayerStats.expForLevel[0] = 0;\r\n        for (var i = 1; i < 10000; i++) {\r\n            PlayerStats.expForLevel[i] = PlayerStats.expForLevel[i - 1] + (i * diff);\r\n        }\r\n\r\n        this.rebuildStats();\r\n    }\r\n\r\n    /**\r\n     * Rteurns the level loader.\r\n     */\r\n    public get LevelLoader(){\r\n        if(!this.levelLoader){\r\n            this.levelLoader = new LevelLoader(LevelDefinitions);\r\n        }\r\n        return this.levelLoader;\r\n    }\r\n\r\n    /**\r\n     *  Updates stats that increase/decrease over time.\r\n     *  The update is calculated in a half second interval.\r\n     */\r\n    public onUpdate = (dt: number) => {\r\n\r\n        let INTERVAL = 500;\r\n        let SECOND_2_INTERVAL = INTERVAL / 1000; //  this factor converts per second values to per interval values\r\n\r\n        var now = performance.now() / 1000;\r\n\r\n        //  accumulate dps\r\n        for (let i = 1000, len = this.buffs.length; i < len; i++) {\r\n            if (this.buffs[i] && this.buffs[i] > now) {\r\n                let dps = 0;\r\n                switch (i) {\r\n                    case DamageType.LavaBorder:  \r\n                        dps = 5;\r\n                        break;\r\n                    case DamageType.Lava:  \r\n                        dps = 15;\r\n                        break;\r\n                    case DamageType.Poison:  \r\n                        dps = 10;\r\n                        break;\r\n                }\r\n                let dmg = dt * 0.001 * dps;\r\n                this.dpsDecreaseAmount += dmg;\r\n            }\r\n        }\r\n\r\n        //  handle once per interval ticks\r\n        this.accumulator += dt;\r\n        if (this.accumulator > INTERVAL) {\r\n            this.accumulator -= INTERVAL;\r\n\r\n            //  dust\r\n            if (this.stats[StatType.Dust] < this.stats[StatType.MaxDust]) {\r\n                let v = this.stats[StatType.RegenDust] * SECOND_2_INTERVAL;\r\n                this.increaseStat(StatType.Dust, v);\r\n            }\r\n\r\n            //  hp\r\n            if (this.stats[StatType.HP] < this.stats[StatType.MaxHP]) {\r\n                let v = this.stats[StatType.RegenHP] * SECOND_2_INTERVAL;\r\n                this.increaseStat(StatType.HP, v);\r\n            }\r\n\r\n            //  dps\r\n            if (this.dpsDecreaseAmount >= 1) {\r\n                var amount = Math.floor(this.dpsDecreaseAmount);\r\n                let event: IDpsChangeEvent = {\r\n                    OldValue: this.stats[StatType.HP],\r\n                    Amount: -amount\r\n                };                \r\n                eventEmitter.emit(DAMAGE_TOPIC, event);\r\n                this.increaseStat(StatType.HP, -amount);\r\n                this.dpsDecreaseAmount -= amount;\r\n            }\r\n        }\r\n\r\n        //--------------------------\r\n        //  check if is burning\r\n        //--------------------------\r\n        let wasBurning = this.isBurningBuff;\r\n        this.isBurningBuff = this.buffs[DamageType.LavaBorder] > now || this.buffs[DamageType.Lava] > now;\r\n        if (wasBurning !== this.isBurning) {            \r\n            eventEmitter.emit(BURN_TOPIC, { wasBurning: wasBurning, isBurning: this.isBurningBuff });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns true if the player is taking burn damage.\r\n     */\r\n    public get isBurning() {\r\n        return this.isBurningBuff;\r\n    }\r\n\r\n    /**\r\n     * The parsed current level.\r\n     */\r\n    public currentLevel : ILevel;\r\n\r\n    public loadLevel(){\r\n        this.loadUserState();\r\n        this.currentLevel = this.LevelLoader.buildLevel(this.currentGameLevel);\r\n    }\r\n\r\n    /**\r\n     * Saves user data.\r\n     */\r\n    public saveUserState(isLevelCompleted: boolean) {\r\n        if (isLevelCompleted) {\r\n            this.currentGameLevel += 1;\r\n        }\r\n        let model = {\r\n            ExternalId: this.id,\r\n            Coins: this.stats[StatType.Coins],\r\n            Gold: this.stats[StatType.Gold],\r\n            Dust: Math.floor(this.stats[StatType.Dust]),\r\n            Exp: this.stats[StatType.TotalExp],\r\n            AtrPts: this.stats[StatType.AttributePoints],\r\n            HP: this.stats[StatType.HP],\r\n            LastLevel: this.currentGameLevel,\r\n            // TODO: add sending skills etc.\r\n        };\r\n        // AjaxHelper.Post(baseUrl + \"/api/user/save\", model, (data, status) => {\r\n        //     console.log(\"connectUser() response\", data);\r\n        // });\r\n        //TODO: implement\r\n    }\r\n\r\n    /**\r\n     * Loads user data.\r\n     */\r\n    public loadUserState() {\r\n        let model = { id: this.id };\r\n        var data = {\r\n            HP: this.getStat(StatType.MaxHP),\r\n            Exp : this.getStat(StatType.TotalExp),\r\n            Coins: this.getStat(StatType.Coins),\r\n            Dust: this.getStat(StatType.MaxDust),\r\n            Gold: 0,\r\n            AtrPts: 0,\r\n            LastLevel: this.currentGameLevel\r\n        };\r\n        //  todo: http get\r\n        console.log(\"loadUserState() response\", data);\r\n\r\n            stats.currentGameLevel = data.LastLevel;\r\n\r\n            //  we never accept 0 hp, convert to full health instead\r\n            if (data.HP <= 0) {\r\n                data.HP = this.stats[StatType.MaxHP];\r\n            }\r\n            this.setStat(StatType.HP, data.HP);\r\n            this.setStat(StatType.Coins, data.Coins);\r\n            this.setStat(StatType.Gold, data.Gold);\r\n            this.setStat(StatType.Dust, data.Dust);\r\n            this.setStat(StatType.AttributePoints, data.AtrPts);\r\n            this.setStat(StatType.TotalExp, data.Exp);\r\n            //  TODO: attributeStats\r\n            this.rebuildStats();\r\n    }\r\n\r\n    public get HasJumpAtack() {\r\n        return this.hasJumpAttack;\r\n    }\r\n    public set HasJumpAtack(value: boolean) {\r\n        this.hasJumpAttack = value;\r\n    }\r\n\r\n    public setStat(type: StatType, value: number) {\r\n        this.stats[type] = value;\r\n        if (type === StatType.TotalExp) {\r\n            this.characterLevel = PlayerStats.findExpLevel(value);\r\n            this.stats[StatType.LevelMaxExp] = PlayerStats.expForLevel[this.characterLevel + 1] - PlayerStats.expForLevel[this.characterLevel];\r\n            this.stats[StatType.LevelExp] = this.stats[StatType.TotalExp] - PlayerStats.expForLevel[this.characterLevel];\r\n            this.expForNextLevel = PlayerStats.expForLevel[this.characterLevel + 1];\r\n        }\r\n        this.updateEvent(type, value);\r\n        eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n    }\r\n\r\n    public getStat(type: StatType): number {\r\n        return this.stats[type];\r\n    }\r\n\r\n    public increaseStat(type: StatType, value: number, maxValue?: number) {\r\n\r\n        var newValue = this.stats[type] + value;\r\n        if (maxValue && newValue > maxValue) {\r\n            newValue = maxValue;\r\n        }\r\n        if (newValue < 0) {\r\n            newValue = 0;\r\n        }\r\n\r\n        this.updateEvent(type, newValue);\r\n        this.stats[type] = newValue;\r\n\r\n        //  special logic for experience\r\n        if (type === StatType.TotalExp) {\r\n            this.stats[StatType.LevelExp] = newValue - PlayerStats.expForLevel[this.characterLevel];\r\n\r\n            //  level up check\r\n            if (newValue >= this.expForNextLevel) {\r\n                this.characterLevel = PlayerStats.findExpLevel(newValue);\r\n                this.expForNextLevel = PlayerStats.expForLevel[this.characterLevel + 1];\r\n\r\n                this.stats[StatType.LevelMaxExp] = this.expForNextLevel - PlayerStats.expForLevel[this.characterLevel];\r\n                this.stats[StatType.LevelExp] = newValue - PlayerStats.expForLevel[this.characterLevel];\r\n\r\n                //  lvl up event\r\n                this.scevent.Type = StatType.CharacterLevel;\r\n                this.scevent.OldValue = this.characterLevel - 1;\r\n                this.scevent.NewValue = this.characterLevel;\r\n                this.scevent.Stats = this.stats;\r\n                eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n\r\n                //  attr change event\r\n                newValue = this.stats[StatType.AttributePoints] + 5;\r\n                this.scevent.Type = StatType.AttributePoints;\r\n                this.scevent.OldValue = this.getStat(StatType.AttributePoints);\r\n                this.scevent.NewValue = newValue;\r\n                this.setStat(StatType.AttributePoints, newValue);\r\n                this.scevent.Stats = this.stats;\r\n                eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n\r\n                // refill HP & dust\r\n                this.setStat(StatType.Dust, this.stats[StatType.MaxDust]);\r\n                this.setStat(StatType.HP, this.stats[StatType.MaxHP]);\r\n\r\n                //  prepare regular stat change event (for exp)\r\n                this.scevent.Type = type;\r\n                this.scevent.OldValue = 0;\r\n                this.scevent.NewValue = this.stats[StatType.LevelExp];\r\n                this.scevent.Stats = this.stats;\r\n                //this.saveUserState(false);\r\n            }\r\n        }\r\n\r\n        eventEmitter.emit(STATCHANGE_TOPIC, this.scevent);\r\n    }\r\n\r\n    /**\r\n     * Finds the exp level for the given total exp value.\r\n     * @param exp\r\n     */\r\n    public static findExpLevel(exp: number) {\r\n        for (var i = 0, len = PlayerStats.expForLevel.length; i < len; i++) {\r\n            if (exp < PlayerStats.expForLevel[i]) {\r\n                return i - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private rebuildStats() {\r\n        //  calc max & regen stats\r\n        this.baseStats[BaseStatType.MaxHP] = 150 + (this.characterLevel * 10);\r\n        this.baseStats[BaseStatType.MaxDust] = 600 + (this.characterLevel * 50);\r\n        this.baseStats[BaseStatType.RegenDust] = 2 + (this.characterLevel / 2);\r\n        this.baseStats[BaseStatType.RegenHP] = 1 + (this.characterLevel / 2);\r\n\r\n        //  each max attribute increases base stat by 10%\r\n        this.stats[StatType.MaxHP] = this.baseStats[BaseStatType.MaxHP] * (1 + this.attributeStats[BaseStatType.MaxHP]/10);\r\n        this.stats[StatType.MaxDust] = this.baseStats[BaseStatType.MaxDust] * (1 + this.attributeStats[BaseStatType.MaxDust] / 10);\r\n\r\n        //  each regen attribute increases base stat by 10%\r\n        this.stats[StatType.RegenHP] = this.baseStats[BaseStatType.RegenHP] * (1 + this.attributeStats[BaseStatType.RegenHP] / 10);\r\n        this.stats[StatType.RegenDust] = this.baseStats[BaseStatType.RegenDust] * (1 + this.attributeStats[BaseStatType.RegenDust] / 10);\r\n    }\r\n\r\n    private scevent: IStatChangeEvent = {\r\n        Type: StatType.Coins,\r\n        OldValue: 0,\r\n        NewValue: 0,\r\n        Stats: []\r\n    };\r\n\r\n    private updateEvent(type: StatType, newValue: number) {\r\n        this.scevent.Type = type;\r\n        this.scevent.OldValue = this.stats[type];\r\n        this.scevent.NewValue = newValue;\r\n        this.scevent.Stats = this.stats;\r\n    }\r\n}\r\n\r\nexport var stats = new PlayerStats();","import * as PIXI from \"pixi.js\";\r\nimport * as particles from \"pixi-particles\";\r\nimport { SceneManager, IRendererOptions } from \"pixi-scenegraph\";\r\nimport { IRootObject } from './world/LevelInterfaces';\r\nimport { SCENE_HEIGHT, SCENE_WIDTH } from './constants';\r\n\r\n\r\n\r\n/**\r\n * The global scene manager.\r\n */\r\nexport function getScm() {\r\n    if (!sceneManager) {\r\n        const canvas: HTMLCanvasElement = document.getElementById(\"stage\") as HTMLCanvasElement;\r\n        const renderOptions: IRendererOptions = {\r\n            width:SCENE_WIDTH,\r\n            height: SCENE_HEIGHT,\r\n            view: canvas,\r\n            backgroundColor: 0,\r\n            antialias: false,\r\n            transparent: false,\r\n            resolution: window.devicePixelRatio\r\n        };\r\n        sceneManager = new SceneManager(renderOptions/*, SCENE_WIDTH, SCENE_HEIGHT, */);\r\n    }\r\n    return sceneManager;\r\n}\r\nexport function deleteScm() {\r\n    if (sceneManager) {\r\n        sceneManager.Renderer.destroy();\r\n    }\r\n    (sceneManager as any) = undefined;\r\n}\r\nlet sceneManager: SceneManager;\r\n\r\n/**\r\n * Player position.\r\n */\r\nexport var position = new PIXI.Point();\r\n\r\nexport var worldContainer : PIXI.Container;\r\n\r\nexport function createParticleEmitter(container: PIXI.Container, textures: PIXI.Texture[], config?: any) {\r\n    \"use strict\";\r\n    var cfg: any = {\r\n        alpha: {\r\n            start: 0.8,\r\n            end: 0.03\r\n        },\r\n        color: {\r\n            start: \"#dcff09\",\r\n            end: \"#9f1f1f\"\r\n        },\r\n        scale: {\r\n            start: 0.1,\r\n            end: 0.4,\r\n            minimumScaleMultiplier: 1\r\n        },\r\n        speed: {\r\n            start: 50,\r\n            end: 3,\r\n            minimumSpeedMultiplier: 1\r\n        },\r\n        acceleration: new PIXI.Point(),\r\n        startRotation: {\r\n            min: 0,\r\n            max: 360\r\n        },\r\n        rotationSpeed: {\r\n            min: 5,\r\n            max: 20\r\n        },\r\n        lifetime: {\r\n            min: 0.4,\r\n            max: 1.0\r\n        },\r\n        blendMode: \"add\",\r\n        frequency: 0.01,\r\n        emitterLifetime: -1,\r\n        maxParticles: 200,\r\n        pos: new PIXI.Point(0, -24),\r\n        addAtBack: false,\r\n        spawnType: \"circle\",\r\n        spawnCircle: {\r\n            x: 0,\r\n            y: 0,\r\n            r: 10\r\n        }\r\n    };\r\n    if (config) {\r\n        cfg = { ...cfg, ...config };\r\n    }\r\n\r\n    var emitter = new particles.Emitter(\r\n        // the PIXI.Container to put the emitter in\r\n        // if using blend modes, it's important to put this\r\n        // on top of a bitmap, and not use the root stage Container\r\n        container,\r\n        textures,\r\n        cfg\r\n    );\r\n    emitter.emit = false;\r\n    return emitter;\r\n}\r\n\r\nexport var LevelDefinitions: IRootObject = {\r\n        templates: undefined,\r\n        levels: undefined,\r\n        quests: undefined\r\n};","import * as p2 from \"p2\";\r\nimport { Global } from '..';\r\nimport {Dictionary} from '..';\r\nimport { COL_GRP_GROUND, COL_GRP_SCENE, COL_GRP_NPC, COL_GRP_PLAYER, COL_GRP_BULLET } from './CollisionGroups';\r\n\r\n/**\r\n * Tuple of two physics bodies touching or penetrating each other.\r\n */\r\nexport class ContactPair {\r\n    constructor(public BodyA: p2.Body, public BodyB: p2.Body) { }\r\n}\r\n\r\n\r\n/**\r\n * Takes care of the physics simulations.\r\n */\r\nexport class WorldP2 {\r\n\r\n    public playerBody: p2.Body;\r\n    private world: p2.World;\r\n    private ground: p2.Body;\r\n    private materials: Dictionary<p2.Material>;\r\n    private contactPairs: Array<ContactPair> = [];\r\n    private contactWatch: Array<number> = [];\r\n\r\n    /**\r\n     * We hold all player contacts separate (due to heavy usage).\r\n     */\r\n    private playerBodyContacts: Array<p2.Body> = [];\r\n\r\n    private readonly fixedTimeStep = 1 / 60; // seconds\r\n\r\n\r\n    constructor() {\r\n        this.world = new p2.World({\r\n            gravity: [0, -1500],\r\n        });\r\n\r\n        this.setupMaterials();\r\n\r\n        //------------------------------------------\r\n        // create an infinite ground plane body\r\n        //------------------------------------------\r\n        this.ground = new p2.Body({\r\n            mass: 0,\r\n        });\r\n        var shape = new p2.Plane();\r\n        shape.material = this.materials.get(\"ground_default\");\r\n        shape.collisionGroup = COL_GRP_GROUND;\r\n        shape.collisionMask = COL_GRP_SCENE | COL_GRP_NPC | COL_GRP_PLAYER | COL_GRP_BULLET;\r\n        this.ground.addShape(shape);\r\n        this.world.addBody(this.ground);\r\n\r\n        //------------------------------------------\r\n        //  player body\r\n        //------------------------------------------\r\n        this.playerBody = new p2.Body({\r\n            mass: 42,\r\n            fixedRotation: true,            \r\n        });\r\n        this.playerBody.damping = 0.001;\r\n        shape = new p2.Circle({\r\n            radius: 24,\r\n        });\r\n        shape.collisionGroup = COL_GRP_PLAYER;\r\n        shape.collisionMask = COL_GRP_GROUND | COL_GRP_SCENE | COL_GRP_NPC | COL_GRP_BULLET;\r\n        shape.material = this.materials.get(\"player\");\r\n        this.playerBody.addShape(shape);\r\n        this.world.addBody(this.playerBody);\r\n\r\n        //------------------------------------------\r\n        //  settings\r\n        //------------------------------------------\r\n        this.world.sleepMode = p2.World.BODY_SLEEPING;\r\n        this.world.on(\"beginContact\", this.beginContact, this);\r\n        this.world.on(\"endContact\", this.endContact, this);\r\n    }\r\n\r\n    /**\r\n     * Removes all bodies except the player body and ground plane.\r\n     */\r\n    public clearLevel() {\r\n        var bodies = this.world.bodies;\r\n        for (var i = bodies.length-1; i >=0; i--) {\r\n            let b = bodies[i];\r\n            if (b !== this.playerBody && b !== this.ground) {\r\n                this.world.removeBody(b);\r\n            }\r\n        }       \r\n    }\r\n\r\n    /**\r\n     * Returns the world bodies.\r\n     */\r\n    public get bodies(): Array<p2.Body> {\r\n        return this.world.bodies;\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler to the p2 world object.\r\n     * @param eventName\r\n     * @param handler\r\n     */\r\n    public on(eventName: string, handler: any, context?: any): void {\r\n        context = context || this;\r\n        this.world.on(eventName, handler, context);\r\n    }\r\n\r\n    /**\r\n     * advances the physics simulation for the given dt time\r\n     * @param dt the time in seconds since the last simulation step\r\n     */\r\n    public update(dt: number): void {\r\n        this.world.step(this.fixedTimeStep, dt/1000);\r\n        Global.position.x = this.playerBody.interpolatedPosition[0];\r\n        Global.position.y = this.playerBody.interpolatedPosition[1];\r\n    }\r\n\r\n    /**\r\n     * Removes the body from world.\r\n     * @param body\r\n     */\r\n    public removeBody(body: p2.Body): void {\r\n        this.world.removeBody(body);\r\n    }\r\n\r\n    /**\r\n     * adds an object to the p2 world\r\n     * @param body\r\n     */\r\n    public addBody(body: p2.Body): void {\r\n        // HACK: loader specific implementation stores the material name in shape.materialName\r\n        if (body.shapes && body.shapes.length > 0) {\r\n            for (var i = 0, len = body.shapes.length; i < len; i++) {\r\n                let shape: any = body.shapes[i];\r\n                if (shape.materialName && !shape.material) {\r\n                    shape.material = this.materials.get(shape.materialName);\r\n                }\r\n            }            \r\n        }\r\n        this.world.addBody(body);\r\n    }\r\n\r\n    /**\r\n     * Clears all saved contacts (from contactPairs) for the given body.\r\n     * @param body\r\n     */\r\n    public clearContactsForBody(body: p2.Body):void {\r\n        if (body === this.playerBody) {\r\n            this.playerBodyContacts = [];\r\n            return;\r\n        }\r\n\r\n        var foundIdx: number = 0;\r\n        while (foundIdx > -1) {\r\n            foundIdx = -1;\r\n            for (var i = 0; i < this.contactPairs.length; i++) {\r\n                let cp:ContactPair = this.contactPairs[i];\r\n                if (cp.BodyA === body || cp.BodyB === body)  {\r\n                    foundIdx = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundIdx >= 0) {\r\n                this.contactPairs.splice(foundIdx, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns all contact pairs for the given body.\r\n     * Note: the body must be in the contact watch list or an empty array will be returned.\r\n     * @param body\r\n     */\r\n    public getContactsForBody(body: p2.Body): Array<ContactPair> {\r\n        var foundPairs: Array<ContactPair> = [];\r\n        for (var i = 0, len = this.contactPairs.length; i < len; i++) {\r\n            let cp: ContactPair = this.contactPairs[i];        \r\n            if (cp.BodyA === body || cp.BodyB === body) {\r\n                foundPairs.push(cp);\r\n            }\r\n        };\r\n        return foundPairs;\r\n    }\r\n\r\n    /**\r\n     * Adds the body to the contact watch list.\r\n     * Only bodies in this list can be retrieved via the getContactsForBody() function.\r\n     * @param body\r\n     */\r\n    public addContactWatch(body: p2.Body): void {\r\n        this.contactWatch.push(body.id);\r\n    }\r\n\r\n    /**\r\n     * Returns all bodies the player has contact with.\r\n     */\r\n    public get playerContacts(): p2.Body[]{\r\n        return this.playerBodyContacts;\r\n    }\r\n\r\n    private beginContact = (evt: any) => {\r\n        \r\n        let bullet: p2.Body = null;\r\n        let other: p2.Body = null;\r\n        if (evt.bodyA.shapes[0].collisionGroup === COL_GRP_BULLET) {\r\n            bullet = evt.bodyA;\r\n            other = evt.bodyB;\r\n        } else if (evt.bodyB.shapes[0].collisionGroup === COL_GRP_BULLET){\r\n            bullet = evt.bodyB;\r\n            other = evt.bodyA;\r\n        }\r\n        if (bullet) {\r\n           // console.log(\"emitting bulettContact, body.id: \" + bullet.id);\r\n            this.world.emit({ type: \"bulletContact\", playerHit: other === this.playerBody, bulletBody: bullet, otherBody: other });\r\n            return;\r\n        }\r\n\r\n        //  check for player contacts (but only with dynamic bodies)\r\n        if (this.playerBody === evt.bodyA) {\r\n            this.playerBodyContacts.push(evt.bodyB);\r\n            this.world.emit({ type: \"playerContact\", velocity: this.playerBody.velocity, body: evt.bodyB });\r\n            return;\r\n        } else if (this.playerBody === evt.bodyB) {\r\n            this.playerBodyContacts.push(evt.bodyA);\r\n            this.world.emit({ type: \"playerContact\", velocity: this.playerBody.velocity, body: evt.bodyA });\r\n            return;\r\n        }\r\n\r\n        //  check for watched bodies and store pairs if match\r\n        var watchedItemFound = this.contactWatch.filter((bodyId) => {\r\n            return (bodyId === evt.bodyA.id || bodyId === evt.bodyB.id);\r\n        });\r\n        if (watchedItemFound && watchedItemFound.length > 0) {\r\n            let cp: ContactPair = new ContactPair(evt.bodyA, evt.bodyB);\r\n            this.contactPairs.push(cp);\r\n        }\r\n        \r\n    };\r\n\r\n    private endContact = (evt: any) => {\r\n        //  no need to update player contacts or contact pairs for bullets\r\n        let isBulletConntact = evt.bodyA.shapes[0].collisionGroup === COL_GRP_BULLET || evt.bodyB.shapes[0].collisionGroup === COL_GRP_BULLET;\r\n        if (isBulletConntact) return;\r\n\r\n        //  if it is a player contact remove the foreign body from the playerBodyContacts list\r\n        if (this.playerBody === evt.bodyA ) {\r\n            var bodyIDX = this.playerBodyContacts.indexOf(evt.bodyB);\r\n            this.playerBodyContacts.splice(bodyIDX, 1);\r\n            this.world.emit({ type: \"playerContactEnd\", velocity: this.playerBody.velocity, body: evt.bodyB });\r\n            //console.log(\"endContact\",evt.bodyB);\r\n            return;\r\n        } else if (this.playerBody === evt.bodyB) {\r\n            var bodyIDX = this.playerBodyContacts.indexOf(evt.bodyB);\r\n            this.playerBodyContacts.splice(bodyIDX, 1);\r\n            this.world.emit({ type: \"playerContactEnd\", velocity: this.playerBody.velocity, body: evt.bodyA });\r\n            //console.log(\"endContact\", evt.bodyA);\r\n            return;\r\n        }\r\n\r\n\r\n        //console.log(\"endContact: \", evt);\r\n        var foundIdx: number = -1;\r\n        for (var i = 0; i < this.contactPairs.length; i++) {\r\n            let cp: ContactPair = this.contactPairs[i];\r\n            if (\r\n                (cp.BodyA === evt.bodyA && cp.BodyB === evt.bodyB) ||\r\n                (cp.BodyA === evt.bodyB && cp.BodyB === evt.bodyA)) {\r\n                foundIdx = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (foundIdx >= 0) {\r\n            this.contactPairs.splice(foundIdx, 1);\r\n        }\r\n    };\r\n\r\n    private setupMaterials(): void {\r\n        this.materials = new Dictionary<p2.Material>();\r\n        this.materials.set(\"player\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"ground_default\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"box_default\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"box_highfriction\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"mob_default\", new p2.Material(p2.Material.idCounter++));\r\n        this.materials.set(\"bumper\", new p2.Material(p2.Material.idCounter++));\r\n\r\n\r\n        var playerGroundContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"ground_default\"),\r\n            {\r\n                friction: 0.85,\r\n                restitution: 0.1,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity:0\r\n            });\r\n        this.world.addContactMaterial(playerGroundContactMaterial);\r\n\r\n        var playerMobContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"mob_default\"),\r\n            {\r\n                friction: 0.1,\r\n                restitution: 0.4,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerMobContactMaterial);\r\n\r\n\r\n        var playerBoxContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"box_default\"),\r\n            {\r\n                friction: 0.20,\r\n                restitution: 0.25,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerBoxContactMaterial);\r\n\r\n        var playerBoxHighFirctContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"box_highfriction\"),\r\n            {\r\n                friction: 0.70,\r\n                restitution: 0.20,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerBoxHighFirctContactMaterial);\r\n\r\n        var playerBumperContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"player\"),\r\n            this.materials.get(\"bumper\"),\r\n            {\r\n                friction: 0.35,\r\n                restitution: 0.75,\r\n                stiffness: Number.MAX_VALUE,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: Number.MAX_VALUE,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(playerBumperContactMaterial);\r\n\r\n        var boxGroundContactMaterial = new p2.ContactMaterial(\r\n            this.materials.get(\"box_default\"),\r\n            this.materials.get(\"ground_default\"),\r\n            {\r\n                friction: 0.8,\r\n                restitution: 0.3,\r\n                stiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                relaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                frictionStiffness: p2.Equation.DEFAULT_STIFFNESS,\r\n                frictionRelaxation: p2.Equation.DEFAULT_RELAXATION,\r\n                surfaceVelocity: 0\r\n            });\r\n        this.world.addContactMaterial(boxGroundContactMaterial);\r\n    }\r\n}\r\n\r\nexport var wp2 = new WorldP2();","import { PIXI } from '..';\r\nimport { AnimationSequence} from './AnimationSequence';\r\nimport { Dictionary } from '../utility/Dictionary';\r\n\r\n/**\r\n * Animated sprite display object. Holds a collection of `AnimationSequence` objects that can be started and stopped on demand.\r\n */\r\nexport class AnimatedSprite extends PIXI.Sprite {\r\n    protected currentSequence: AnimationSequence | null = null;\r\n\r\n    private accumulator: number = 0;\r\n    private isPlaying: boolean = false;\r\n    private isLooping: boolean = false;\r\n    private frameIndex: number = 0;\r\n    private currentFps: number = 8;\r\n    private onCompleteCallBack: (seq: AnimationSequence) => void;\r\n    private animations = new Dictionary<AnimationSequence>();\r\n\r\n    constructor() {\r\n        super();\r\n        this.pivot.set(0.5);\r\n        this.anchor.set(0.5);\r\n    }\r\n\r\n    /**\r\n     * Adds one or multiple animation sequences.\r\n     * @example\r\n     * ```\r\n     * explode.addAnimations(new AnimationSequence(\"exp\", \"assets/atlas.json@big_bang.png\", [0, 1, 2, 3, 4, 5], 32, 32));\r\n     * ```\r\n     * @param sequences - animation sequence instances to be added. All animation sequences added to an `AnimatedSprite` **must** have unique names.\r\n     */\r\n    public addAnimations(...sequences: AnimationSequence[]): void {\r\n        sequences.forEach((seq: AnimationSequence, idx: number) => {\r\n            this.animations.set(seq.sequenceName, seq);\r\n\r\n            //  if no clip exists create it from first animation sequence\r\n            if (!this.texture.valid && idx === 0) {\r\n                this.texture = seq.spriteSheet;\r\n                this.texture.frame = seq.frames[0];\r\n            }\r\n        });\r\n    }\r\n\r\n    public clearAnimations() {\r\n        this.stop();\r\n        this.currentSequence = null;\r\n        this.animations.clear();\r\n    }\r\n\r\n    /**\r\n     * Plays the animation sequence by name.\r\n     * @param name - animation sequence to be played\r\n     * @param fps - animation speed in frames per second\r\n     * @param loop - if true the animation keeps looping else the animation stops once last frame is reached\r\n     * @remarks The `onComplete` callback will be invoked only if the `loop` parameter is false\r\n     */\r\n    public play = (name: string, fps?: number, loop = true): void => {\r\n        if (!this.currentSequence || this.currentSequence.sequenceName !== name) {\r\n            this.resetAnimation();\r\n            this.currentSequence = this.animations.get(name);\r\n            this.texture = this.currentSequence.spriteSheet;\r\n            this.texture.frame = this.currentSequence.frames[0];\r\n            this.isPlaying = true;\r\n        }\r\n        this.fps = fps || this.fps;\r\n        this.isLooping = loop;\r\n    };\r\n\r\n    /**\r\n     * Used by the framework to update internal state on each frame.\r\n     */\r\n    public onUpdate(dt: number) {\r\n        if (this.isPlaying && this.texture.valid && this.currentSequence) {\r\n            this.accumulator += dt;\r\n            const secForFrame = 1000 / this.fps;\r\n            if (this.accumulator > secForFrame) {\r\n                this.accumulator -= secForFrame;\r\n                this.texture.frame = this.currentSequence.frames[++this.frameIndex];\r\n                if (this.frameIndex === this.currentSequence.frames.length - 1) {\r\n                    this.frameIndex = 0;\r\n\r\n                    //  end the animation if not looping\r\n                    if (!this.isLooping) {\r\n                        this.isPlaying = false;\r\n                        if (this.onCompleteCallBack) {\r\n                            this.onCompleteCallBack(this.currentSequence);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the callback function to be invoked after the animation ends.\r\n     * @example Use it to trigger actions on animation end `explode.onComplete = () => this.container.removeChild(explode);`\r\n     * @remarks This callback will be invoked only if the animated sprite is not looping.\r\n     */\r\n    public set onComplete(cb: (seq: AnimationSequence) => void) {\r\n        this.onCompleteCallBack = cb;\r\n    }\r\n    public get onComplete(): (seq: AnimationSequence) => void {\r\n        return this.onCompleteCallBack;\r\n    }\r\n\r\n    public stop(): void {\r\n        this.isPlaying = false;\r\n    }\r\n    public get fps(): number {\r\n        return this.currentFps;\r\n    }\r\n    public set fps(fps: number) {\r\n        this.currentFps = fps;\r\n    }\r\n    public set loop(isLooping: boolean) {\r\n        this.isLooping = isLooping;\r\n    }\r\n    public get loop(): boolean {\r\n        return this.isLooping;\r\n    }\r\n\r\n    protected resetAnimation(): void {\r\n        this.stop();\r\n        this.currentSequence = null;\r\n        this.accumulator = 0;\r\n        this.frameIndex = -1;\r\n    }\r\n}","import { PIXI, TextureLoader } from '..';\r\n\r\n/**\r\n *  Defines a single animation. Consists of a a texture and individual animation frames.\r\n *  @remarks The texture (`spriteSheetName`) is either a spritesheet or an image inside a larger texture atlas.\r\n */\r\nexport class AnimationSequence {\r\n    public spriteSheet: PIXI.Texture;\r\n    public frames: PIXI.Rectangle[] = [];\r\n\r\n    /**\r\n     * Creates a new AnimationSequence instance.\r\n     * @param sequenceName - the unique name of this animation\r\n     * @param spriteSheetName - the texture name holding all animation frames or atlas/image name\r\n     * @param frames - sequential list of frame indices defining the frame animation order.\r\n     * @param frameWidth - width of a single frame in pixels\r\n     * @param frameHeight - height of a single frame in pixels\r\n     */\r\n    constructor(public sequenceName: string, spriteSheetName: string, frames: number[] = [], frameWidth: number, frameHeight: number) {\r\n        const tempTexure = TextureLoader.Get(spriteSheetName)!;\r\n        const isAtlas = TextureLoader.IsAtlas(tempTexure);\r\n\r\n        this.spriteSheet = new PIXI.Texture(tempTexure.baseTexture);\r\n        const xFrames = isAtlas ? Math.floor(tempTexure.frame.width / frameWidth) : Math.floor(this.spriteSheet.width / frameWidth);\r\n\r\n        frames.forEach((frame: number) => {\r\n            const y = Math.floor(frame / xFrames);\r\n            const x = frame % xFrames;\r\n            let rect: PIXI.Rectangle;\r\n            if (isAtlas) {\r\n                rect = new PIXI.Rectangle(\r\n                    tempTexure.frame.x + x * frameWidth,\r\n                    tempTexure.frame.y + y * frameHeight,\r\n                    frameWidth,\r\n                    frameHeight,\r\n                );\r\n            } else {\r\n                rect = new PIXI.Rectangle(x * frameWidth, y * frameHeight, frameWidth, frameHeight);\r\n            }\r\n            this.frames.push(rect);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the number of frames defined in this animation instance.\r\n     */\r\n    public get frameCount(): number {\r\n        return this.frames.length;\r\n    }\r\n}","import {PIXI} from '.';\r\nimport { StatType } from './enums';\r\n\r\nexport var eventEmitter = new PIXI.utils.EventEmitter();\r\nexport var MOVE_TOPIC = \"MOVE\";\r\nexport var BURN_TOPIC = \"BURN\";\r\nexport var STATCHANGE_TOPIC = \"STATCHANGE\";\r\nexport var DAMAGE_TOPIC = \"DAMAGE\";\r\n\r\n//  action signaling topics\r\nexport var GROUND_SHAKE = \"SHAKE\";\r\n\r\nexport interface IStatChangeEvent {\r\n    Type: StatType;\r\n    OldValue: number;\r\n    NewValue: number;\r\n    Stats: Array<number>;\r\n}\r\n\r\nexport interface IDpsChangeEvent {\r\n    OldValue: number;\r\n    Amount: number;\r\n}\r\n\r\nexport interface IBurnChangeEvent {\r\n    wasBurning: boolean;\r\n    isBurning: boolean;\r\n}","import { Howl } from \"howler\";\r\n\r\nexport class SoundMan {\r\n    private backgroundSnd: Howl;\r\n    private walkSnd: Howl;\r\n    private jumpSnd1: Howl;\r\n    private jumpSnd2: Howl;\r\n    private burnSnd: Howl;\r\n    private coinSnd: Howl;\r\n    private gemSnd: Howl;\r\n    private hurtSnd: Howl;\r\n    private winSnd: Howl;\r\n    private atkMag1: Howl;\r\n    private hitMag1: Howl;\r\n    private jumpAtk: Howl;\r\n    private woosh: Howl;\r\n    private squish: Howl;\r\n    private pain: Howl;\r\n    private jmpContact: Howl;\r\n\r\n    private fxDemoSnd: Howl;\r\n\r\n    private questItemSnd: Howl;\r\n\r\n    private musicTrackNames: Array<string> = [\r\n        'assets/audio/Two-Finger-Johnny.mp3',\r\n        'assets/audio/Bumbling-Burglars_Looping.mp3',\r\n        'assets/audio/Bama-Country.mp3',\r\n        'assets/audio/Beachfront-Celebration.mp3',\r\n        'assets/audio/Easy-Jam.mp3',\r\n        'assets/audio/Whiskey-on-the-Mississippi.mp3',\r\n        'assets/audio/ZigZag.mp3',\r\n        'assets/audio/Carrousel.mp3',\r\n        'assets/audio/Disco-Break.mp3'\r\n    ];\r\n    private musicTracks: Array<Howl> = [];\r\n    private currentTrack: number = 0;\r\n\r\n    constructor() {\r\n        for (var i = 0, len = this.musicTrackNames.length; i < len; i++) {\r\n            var trackName = this.musicTrackNames[i];\r\n            this.musicTracks.push(new Howl({\r\n                preload: false,\r\n                src: [trackName],\r\n                autoplay: false,\r\n                loop: true,\r\n                volume: 0.6\r\n            }));\r\n        }\r\n\r\n        this.walkSnd = new Howl({\r\n            src: ['assets/audio/effects/step.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: true,\r\n            volume: 1,\r\n        });\r\n        this.jumpSnd1 = new Howl({\r\n            src: ['assets/audio/effects/jump1.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.jumpSnd2 = new Howl({\r\n            src: ['assets/audio/effects/jump2.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.burnSnd = new Howl({\r\n            src: ['assets/audio/effects/burn.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: true,\r\n            volume: 1\r\n        });\r\n        this.hurtSnd = new Howl({\r\n            src: ['assets/audio/effects/hurt.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.coinSnd = new Howl({\r\n            src: ['assets/audio/effects/coin.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.gemSnd = new Howl({\r\n            src: ['assets/audio/effects/gem.mp3'],\r\n            preload: true,\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.questItemSnd = new Howl({\r\n            src: ['assets/audio/effects/quest-item.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.winSnd = new Howl({\r\n            src: ['assets/audio/effects/win.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.atkMag1 = new Howl({\r\n            src: ['assets/audio/effects/atk-mag01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1,\r\n        });\r\n        this.hitMag1 = new Howl({\r\n            src: ['assets/audio/effects/hit-mag01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.jumpAtk = new Howl({\r\n            src: ['assets/audio/effects/jump-atk01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.pain = new Howl({\r\n            src: ['assets/audio/effects/pain01.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n\r\n        this.jmpContact = new Howl({\r\n            src: ['assets/audio/effects/jmp-contact.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n\r\n        this.woosh = new Howl({\r\n            src: ['assets/audio/effects/woosh.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n        this.squish = new Howl({\r\n            src: ['assets/audio/effects/mob-squish.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n\r\n        this.fxDemoSnd = new Howl({\r\n            src: ['assets/audio/effects/fx-demo.mp3'],\r\n            autoplay: false,\r\n            loop: false,\r\n            volume: 1\r\n        });\r\n    }\r\n\r\n    private previousMusicVolume = 0.6;\r\n    private previousFxVolume = 1;\r\n\r\n    private musicVolume = 0.6;\r\n    private fxVolume = 1;\r\n\r\n    public get MusicVolume() { return this.musicVolume; }\r\n    public set MusicVolume(value: number) {\r\n        this.musicVolume = value;\r\n        if (this.backgroundSnd && this.backgroundSnd.playing()) {\r\n            this.backgroundSnd.volume(this.musicVolume);\r\n        }\r\n    }\r\n\r\n    public get FxVolume() { return this.fxVolume; }\r\n    public set FxVolume(value: number) {\r\n        this.fxVolume = value;\r\n    }\r\n\r\n\r\n    public get IsFxOn() { return this.fxVolume > 0.0; }\r\n    public set IsFxOn(value: boolean) {\r\n        if (!value) {\r\n            this.previousFxVolume = this.fxVolume;\r\n            this.FxVolume = 0;\r\n        } else {\r\n            this.FxVolume = this.previousFxVolume;\r\n        }\r\n    }\r\n\r\n    public get IsMusicOn() { return this.musicVolume > 0.0; }\r\n    public set IsMusicOn(value: boolean) {\r\n        if (!value) {\r\n            this.previousMusicVolume = this.musicVolume;\r\n            this.MusicVolume = 0;\r\n        } else {\r\n            this.MusicVolume = this.previousMusicVolume;\r\n        }\r\n    }\r\n\r\n    public get CurrentTrackId() {\r\n        return this.currentTrack;\r\n    }\r\n\r\n\r\n    public get fxDemo() {\r\n        return this.fxDemoSnd;\r\n    }\r\n\r\n    public jumpAttack() {\r\n        this.walkSnd.pause();\r\n        this.jumpAtk.loop(false);\r\n        this.jumpAtk.play();\r\n        this.jumpAtk.volume(this.fxVolume);\r\n    }\r\n\r\n    public jump() {\r\n        this.walkSnd.pause();\r\n        this.jumpSnd1.play();\r\n        this.jumpSnd1.volume(this.fxVolume);\r\n    }\r\n    public idle() {\r\n        this.walkSnd.pause();\r\n    }\r\n    public walk(isRunning?: boolean) {\r\n        this.walkSnd.rate(isRunning ? 2.0 : 1.2);\r\n        if (!this.walkSnd.playing()) {\r\n            this.walkSnd.volume(this.fxVolume);\r\n            this.walkSnd.play();\r\n        }\r\n    }\r\n    public atkMagic1() {\r\n        this.atkMag1.volume(this.fxVolume);\r\n        this.atkMag1.play();\r\n    }\r\n    public hitMagic1() {\r\n        this.hitMag1.volume(this.fxVolume);\r\n        this.hitMag1.play();\r\n    }\r\n    public hitPain() {\r\n        this.pain.volume(this.fxVolume);\r\n        this.pain.play();\r\n    }\r\n\r\n    public mobSquish() {\r\n        this.squish.volume(this.fxVolume);\r\n        this.squish.play();\r\n    }\r\n\r\n    public bulletHitWall() {\r\n        this.woosh.volume(this.fxVolume);\r\n        this.woosh.play();\r\n    }\r\n\r\n    public coin() {\r\n        this.coinSnd.volume(this.fxVolume);\r\n        this.coinSnd.play();\r\n    }\r\n\r\n    public gem() {\r\n        this.gemSnd.volume(this.fxVolume);\r\n        this.gemSnd.play();\r\n    }\r\n\r\n    public hurt() {\r\n        this.hurtSnd.volume(this.fxVolume);\r\n        this.hurtSnd.play();\r\n    }\r\n\r\n    public jumpContact() {\r\n        this.jmpContact.volume(this.fxVolume);\r\n        this.jmpContact.play();\r\n    }\r\n    public questItem() {\r\n        this.questItemSnd.volume(this.fxVolume);\r\n        this.questItemSnd.play();\r\n    }\r\n\r\n    public win() {\r\n        if (this.backgroundSnd && this.backgroundSnd.playing()) {\r\n            this.backgroundSnd.fade(1, 0, 500);\r\n        }\r\n        this.hurtSnd.stop();\r\n        this.walkSnd.stop();\r\n        this.jumpSnd1.stop();\r\n        this.jumpSnd2.stop();\r\n        this.burnSnd.stop();\r\n\r\n        this.winSnd.volume(this.fxVolume);\r\n        this.winSnd.play();\r\n    }\r\n\r\n    public burn() {\r\n        if (!this.burnSnd.playing()) {\r\n            this.burnSnd.volume(this.fxVolume);\r\n            this.burnSnd.play();\r\n        }\r\n        this.hurt();\r\n    }\r\n    public burnStop() {\r\n        //this.burnSnd.stop();\r\n        this.burnSnd.fade(1, 0, 200);\r\n        setTimeout(() => this.burnSnd.stop(), 200);\r\n    }\r\n\r\n    public getTrack(name: string) {\r\n        for (var i = 0, len = this.musicTrackNames.length; i < len; i++) {\r\n            if (this.musicTrackNames[i].indexOf(name) >= 0) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public stopTrack() {\r\n        if (this.backgroundSnd !== undefined) {\r\n            this.backgroundSnd.stop();\r\n        }\r\n    }\r\n\r\n    public playTrack(trackId: number) {\r\n        if (this.backgroundSnd === undefined) {\r\n            this.backgroundSnd = this.musicTracks[trackId];\r\n            console.log(\"playTrack \" + trackId, this.backgroundSnd);\r\n        }\r\n\r\n        if (this.backgroundSnd !== this.musicTracks[trackId] || !this.backgroundSnd.playing()) {\r\n            this.backgroundSnd.stop();\r\n            this.backgroundSnd = this.musicTracks[trackId];\r\n            this.backgroundSnd.volume(this.musicVolume);\r\n            this.backgroundSnd.play();\r\n            if (this.backgroundSnd.state() === 'unloaded') {\r\n                this.backgroundSnd.load();\r\n                this.backgroundSnd.once('load', () => {\r\n                    this.backgroundSnd.play();\r\n                });\r\n            }\r\n        } \r\n        this.currentTrack = trackId;\r\n    }\r\n}\r\n\r\nexport var snd = new SoundMan();","import * as Global from \"../global\";\r\nimport * as p2 from \"p2\";\r\nimport { PIXI, Parallax, Dictionary, AnimatedSprite, AnimationSequence, TextureLoader} from \"..\";\r\nimport { COL_GRP_PLAYER, COL_GRP_GROUND, COL_GRP_NPC, COL_GRP_SCENE, COL_GRP_BULLET } from \"./CollisionGroups\";\r\nimport { SpawnPoint } from '../mobs/SpawnPoint';\r\nimport { Mob } from '../mobs/Mob';\r\nimport { IRootObject, ILevel, ILevelDefinition, IMapEntity, IMobEntity, ISpawnPoint, IDisplayObjectDefinition, IInteractionType, IBodyDefinition } from './LevelInterfaces';\r\nimport { getEntityDefinition } from './LevelHelper';\r\nimport { SCENE_HEIGHT, SCENE_WIDTH } from '../constants';\r\n\r\ndeclare type Fn = (definition: IDisplayObjectDefinition) => PIXI.DisplayObject;\r\n\r\nexport class LevelLoader {\r\n    \r\n    private gameLevels: IRootObject;\r\n    private static factoryList = new Dictionary<Fn>();\r\n\r\n    constructor(gameLevels: IRootObject) {\r\n        this.gameLevels = gameLevels;\r\n    }\r\n\r\n    /**\r\n     * Registers custom factory function for creating display objects.\r\n     * @param name the entity name used in level definition\r\n     * @param factory factory function returning a display object based on the given definition\r\n     */\r\n    public static registerFactory(name:string, factory:Fn){\r\n        this.factoryList.set(name, factory);\r\n    }\r\n\r\n    /**\r\n     * Builds the level.\r\n     * @param id\r\n     */\r\n    public buildLevel(id: number): ILevel {\r\n\r\n        //  find the level by its id\r\n        var levelDefinition: ILevelDefinition = undefined;\r\n        for (var i = 0; i < this.gameLevels.levels.length; i++) {\r\n            if (this.gameLevels.levels[i].id === id) {\r\n                levelDefinition = this.gameLevels.levels[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        //  create level objects\r\n        var result: ILevel;\r\n        if (levelDefinition) {\r\n            result = this.createLevel(levelDefinition);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private createLevel(level: ILevelDefinition): ILevel {\r\n        var result: ILevel = {\r\n            parallax: [],\r\n            entities: [],\r\n            start: [],\r\n            audioTrack: level.audioTrack,\r\n            templates: [],\r\n            spawnPoints: []\r\n        };\r\n\r\n        //--------------------------------------\r\n        //  create parallax objects\r\n        //--------------------------------------            \r\n        var vps = new PIXI.Point(SCENE_WIDTH, SCENE_HEIGHT);\r\n        level.parallax.forEach((iplx) => {\r\n            var parallax = new Parallax(vps, iplx.parallaxFactor, iplx.textures, iplx.scale);\r\n            parallax.y = iplx.y;\r\n            result.parallax.push(parallax);\r\n        });\r\n\r\n        //--------------------------------------\r\n        //  merge global with level templates\r\n        //--------------------------------------\r\n        var templates = Global.LevelDefinitions.templates.concat(level.map.templates);\r\n        result.templates = templates;\r\n\r\n        //--------------------------------------\r\n        //  create display/physics object pairs\r\n        //--------------------------------------\r\n        level.map.entities.forEach((entity: IMapEntity, idx, arr) => {\r\n            let p2body = LevelLoader.createEntity(templates, entity);            \r\n            result.entities.push(p2body);\r\n        });\r\n\r\n        //--------------------------------------\r\n        //  create NPC's\r\n        //--------------------------------------\r\n        level.map.NPC = level.map.NPC || [];\r\n        level.map.NPC.forEach((npc: IMobEntity, idx, arr) => {\r\n            if (npc.type && npc.type === \"spawn_point\") {\r\n                let sp = <any>npc as ISpawnPoint;\r\n                let entity = sp.entity;\r\n                result.spawnPoints.push(new SpawnPoint(sp.name, sp.xy[0], sp.xy[1], sp.area, sp.maxMobCount, sp.respawnSeconds, entity));\r\n            } else {\r\n                let p2body = LevelLoader.createMob(templates, npc);                \r\n                result.entities.push(p2body);\r\n            }\r\n        });\r\n        result.start = level.map.start;\r\n        return result;\r\n    }\r\n\r\n    public static createEntity(templates: Array<any>, entity: IMapEntity): p2.Body {\r\n        let defs = getEntityDefinition(templates, entity);\r\n\r\n        //  display object\r\n        let dispObj: PIXI.DisplayObject = LevelLoader.buildDisplayObject(defs.doDef);\r\n        dispObj.name = entity.name || entity.template;\r\n        (dispObj as any).templateName = defs.templateName;\r\n\r\n        //  body\r\n        var p2body: p2.Body;\r\n        if (defs.bdDef) {\r\n            p2body = LevelLoader.buildPhysicsObject(defs.bdDef, dispObj);\r\n            p2body.shapes.every((s: p2.Shape) => {\r\n                if (defs.bdDef.collisionType === \"ground\") {\r\n                    s.collisionGroup = COL_GRP_GROUND;\r\n                    s.collisionMask = COL_GRP_PLAYER | COL_GRP_NPC | COL_GRP_SCENE | COL_GRP_BULLET;\r\n                } else {\r\n                    s.collisionGroup = COL_GRP_SCENE;\r\n                    s.collisionMask = COL_GRP_PLAYER | COL_GRP_NPC | COL_GRP_SCENE | COL_GRP_GROUND;\r\n                }\r\n                return true;\r\n            });\r\n            (p2body as any).DisplayObject = dispObj;\r\n\r\n            //  trigger\r\n            if (defs.trigger) {\r\n                (p2body as any).Trigger = defs.trigger;\r\n            }\r\n        } else {\r\n            p2body = new p2.Body();\r\n            (p2body as any).DisplayObject = dispObj;\r\n        }\r\n        return p2body;\r\n    }\r\n\r\n    public static createMob(templates: Array<any>, entity: IMobEntity): p2.Body {\r\n        let defs = getEntityDefinition(templates, entity);\r\n\r\n        //  display object\r\n        let mobDispObj: Mob = LevelLoader.buildDisplayObject(defs.doDef) as Mob;\r\n        mobDispObj.name = entity.name || entity.template;\r\n        (mobDispObj as any).templateName = defs.templateName;\r\n\r\n        // attributes and AI\r\n        mobDispObj.attributes = entity.attributes || defs.doDef.attributes || [];\r\n        mobDispObj.createAI(entity.ai || \"basic_static\");\r\n        mobDispObj.atkTexture = entity.attack || defs.doDef.attack;\r\n\r\n        //  body        \r\n        defs.bdDef.material = defs.bdDef.material || \"mob_default\";\r\n        var p2body: p2.Body = LevelLoader.buildPhysicsObject(defs.bdDef, mobDispObj);\r\n        p2body.shapes.every((s: p2.Shape) => {\r\n            s.collisionGroup = COL_GRP_NPC;\r\n            s.collisionMask = COL_GRP_PLAYER | COL_GRP_GROUND | COL_GRP_SCENE;\r\n            return true;\r\n        });\r\n        (p2body as any).DisplayObject = mobDispObj;\r\n\r\n        //  trigger\r\n        if (defs.trigger) {\r\n            (p2body as any).Trigger = defs.trigger;\r\n        }\r\n\r\n        return p2body;\r\n    }\r\n\r\n    /**\r\n     * Creates a display object from the definition.\r\n     * @param definition\r\n     */\r\n    private static buildDisplayObject(definition: IDisplayObjectDefinition): PIXI.DisplayObject {\r\n        var dispObj: PIXI.DisplayObject;\r\n        definition = {...{anchor: 0.5, pivot: 0.5, scale:[1,1]}, ...definition};\r\n        switch (definition.typeName) {\r\n            case \"Mob\":\r\n                let mob = new Mob(definition.texture as string);\r\n                //  if animations are defined in the json replace the built-in mob animations\r\n                if (definition.sequences) {\r\n                    mob.clearAnimations();\r\n                    definition.sequences.forEach((seq) => {\r\n                        var textureName = seq.texture || definition.texture;\r\n                        var aseq = new AnimationSequence(seq.name, textureName as string, seq.frames, seq.framesize[0], seq.framesize[1]);\r\n                        mob.addAnimations(aseq);\r\n                    });\r\n                    mob.play(definition.sequences[0].name);\r\n                }\r\n                if (definition.fps) {\r\n                    mob.fps = definition.fps;\r\n                }                \r\n                (mob as any).typeName = \"Mob\";\r\n                dispObj = mob;\r\n                break;\r\n\r\n            case \"Sensor\":\r\n                dispObj = new PIXI.DisplayObject();\r\n                (dispObj as any).typeName = \"Sensor\";\r\n                break;\r\n\r\n            case \"AnimatedSprite\":\r\n                var aspr = new AnimatedSprite();\r\n                definition.sequences.forEach((seq, idx, arr) => {\r\n                    var aseq = new AnimationSequence(seq.name, seq.texture, seq.frames, seq.framesize[0], seq.framesize[1]);\r\n                    aspr.addAnimations(aseq);\r\n                });\r\n                aspr.play(definition.sequences[0].name, definition.fps);\r\n                (aspr as any).typeName = \"AnimatedSprite\";\r\n                dispObj = aspr;\r\n                break;\r\n\r\n            case \"Sprite\":\r\n                var sprTexture = TextureLoader.Get(definition.texture as string);\r\n                var spr = new PIXI.Sprite(sprTexture);\r\n                (spr as any).typeName = \"Sprite\";\r\n                dispObj = spr;\r\n                break;\r\n\r\n            default:\r\n                var factory = this.factoryList.get(definition.typeName);\r\n                if(factory)\r\n                    dispObj = factory(definition);\r\n                else\r\n                    throw \"Factory not found for typeName: \" + definition.typeName;\r\n                break;            \r\n        }\r\n        (dispObj).scale.set(definition.scale[0], definition.scale[1] * -1); //  the worldContainer has -y scale so we must flip it up again \r\n        if((dispObj as any).anchor)(dispObj as any).anchor.set(definition.anchor);\r\n        dispObj.pivot.set(definition.pivot);\r\n\r\n        if (definition.visible !== undefined) {\r\n            dispObj.visible = definition.visible;\r\n        }\r\n        dispObj.rotation = definition.rotation || 0;\r\n        if (definition.xy) {\r\n            dispObj.position.set(definition.xy[0], definition.xy[1]);\r\n        }        \r\n        if (definition.interactionType) {\r\n            (dispObj as IInteractionType).interactionType = definition.interactionType;\r\n        }\r\n        if (definition.drop) {\r\n            (dispObj as IInteractionType).drop = definition.drop;\r\n        }\r\n        if (definition.tint) {\r\n            (dispObj as any).tint = parseInt(definition.tint, 16);\r\n        }\r\n        return dispObj;\r\n    }\r\n\r\n    /**\r\n     * Creates a physics body and shape from the definition.\r\n     * @param definition\r\n     * @param dispObj the display object to retrieve the defaults from.\r\n     * @param preventSensor if true a non sensor body will be created (this is to support mobs\r\n     *                      that must have normal bodies but also an interactionType.\r\n     */\r\n    private static buildPhysicsObject(definition: IBodyDefinition, dispObj: PIXI.DisplayObject, preventSensor: boolean = false): p2.Body {\r\n        var body: p2.Body;\r\n        let w = 0, h = 0;\r\n        if (definition) {\r\n            var options: p2.BodyOptions = {\r\n                mass: definition.mass,\r\n                position: definition.xy ? definition.xy : [dispObj.x, dispObj.y],\r\n                angle: definition.angle || dispObj.rotation,\r\n                fixedRotation: definition.fixedRotation || false,\r\n                angularDamping: definition.angularDamping || 0.1,\r\n                damping: definition.damping || 0.1,\r\n            } as p2.BodyOptions;\r\n            \r\n            body = new p2.Body(options);\r\n            body.type = definition.type || p2.Body.KINEMATIC; /* DYNAMIC = 1, DYNAMIC = 1, STATIC = 2 */\r\n            var dispObjAsAny: any = dispObj as any;\r\n            var shape: p2.Shape;\r\n            switch (definition.shape) {\r\n                case \"Circle\":\r\n                    let radius = 32;\r\n                    if (definition.size) {\r\n                        if (definition.size.constructor === Array) {\r\n                            radius = definition.size[0];\r\n                        } else {\r\n                            radius = definition.size as number;\r\n                        }\r\n                    } else {\r\n                        radius = dispObjAsAny.width;\r\n                    }\r\n                    shape = new p2.Circle({ radius: radius });\r\n                    break;\r\n\r\n                case \"Platform\":\r\n                    if (definition.size) {\r\n                        w = definition.size[0];\r\n                        h = definition.size[1];\r\n                    } else {\r\n                        w = Math.abs(dispObjAsAny.width);\r\n                        h = Math.abs(dispObjAsAny.height);\r\n                    }\r\n                    shape = new p2.Box({\r\n                        width: w,\r\n                        height: h,\r\n                    });\r\n\r\n                    //  the position is centered but we need it to be left top aligned\r\n                    body.position[0] = body.position[0] + w / 2;\r\n                    body.position[1] = body.position[1] - h / 2;\r\n                    break;\r\n\r\n                case \"Box\":\r\n                    //  get the size\r\n                    if (definition.size) {\r\n                        w = definition.size[0];\r\n                        h = definition.size[1];\r\n                    } else {\r\n                        if (dispObjAsAny.width) {\r\n                            w = Math.abs(dispObjAsAny.width);\r\n                            h = Math.abs(dispObjAsAny.height);\r\n                        } else {\r\n                            //  TODO: check this - seems not to get correct bounds\r\n                            w = dispObj.scale.x * dispObj.getLocalBounds().width;\r\n                            h = dispObj.scale.y * dispObj.getLocalBounds().height;\r\n                        }\r\n                    }\r\n                    shape = new p2.Box({\r\n                        width: w,\r\n                        height: h,\r\n                    });\r\n                    break;\r\n                //  TODO: implement other shapes if needed\r\n            }\r\n\r\n            if (definition.material) {\r\n                (shape as any).materialName = definition.material;\r\n            }\r\n\r\n            if (!preventSensor && !!(dispObj as IInteractionType).interactionType) {\r\n                shape.sensor = true;\r\n                body.type = p2.Body.STATIC;\r\n                body.collisionResponse = false;\r\n                body.setDensity(0.0); //   this is to prevent body impacts on player collide (makes no sense as it is a sensor, bug maybe?)\r\n                console.log(\"created collectible sensor\", shape);\r\n            } else if ((dispObj as any).typeName === \"Sensor\") {\r\n                shape.sensor = true;\r\n                body.type = p2.Body.STATIC;\r\n                body.collisionResponse = false;\r\n                body.setDensity(0.0);\r\n            }\r\n\r\n            body.addShape(shape);\r\n        }\r\n        return body;\r\n    }\r\n}","import {PIXI} from '..';\r\n\r\n/**\r\n * Utility for loading single textures or atlas textures from PIXI.loader.resources.\r\n */\r\nexport class TextureLoader {\r\n    public static IsAtlas(texture: PIXI.Texture) {\r\n        return texture.frame.width !== texture.baseTexture.width || texture.frame.height !== texture.baseTexture.height;\r\n    }\r\n\r\n    public static Get = (fullName: string, mipmap: boolean = false, scaleMode: number = PIXI.SCALE_MODES.LINEAR): PIXI.Texture | undefined => {\r\n        const idx = fullName.indexOf('.json@');\r\n        const textureName = idx > 0 ? fullName.substr(idx + 6) : fullName;\r\n        const resourceName = idx > 0 ? fullName.substr(0, idx + 5) : fullName;\r\n        let res = TextureLoader.resourceCache[resourceName];\r\n\r\n        if (!res) {\r\n            //  try to get resource from loader\r\n            TextureLoader.resourceCache[resourceName] = PIXI.Loader.shared.resources[resourceName];\r\n            res = TextureLoader.resourceCache[resourceName];\r\n\r\n            //  get base texture & set params\r\n            const baseTexture = res.loadType === 1 ? res.spritesheet.baseTexture : res.texture.baseTexture;\r\n            baseTexture.mipmap = mipmap;\r\n            baseTexture.scaleMode = scaleMode;\r\n        }\r\n\r\n        if (!res) {\r\n            console.error(`Resource:'${fullName}' not found!`);\r\n            return undefined;\r\n        }\r\n\r\n        switch (res.loadType) {\r\n            case 1: //  atlas\r\n                return res.textures[textureName];\r\n            case 2: //  single texture\r\n                return res.texture;\r\n        }\r\n        console.error(`Resource:'${fullName}' unknown load type!`, res);\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * simple cache used to apply mipmap and scaleMode only the first time an atlas is loaded.\r\n     */\r\n    private static resourceCache: any = {};\r\n}","export const COL_GRP_PLAYER = 1;\r\nexport const COL_GRP_NPC = 2;\r\nexport const COL_GRP_SCENE = 4;\r\nexport const COL_GRP_BULLET = 8;\r\nexport const COL_GRP_GROUND = 16;","import { settings, RenderTexture, Container, Application } from 'pixi.js';\n\nvar DefaultScreenSizeCalculator = (function () {\r\n    function DefaultScreenSizeCalculator(designedWidth, designedHeight) {\r\n        this.designedWidth = designedWidth;\r\n        this.designedHeight = designedHeight;\r\n    }\r\n    DefaultScreenSizeCalculator.prototype.GetAvailableSize = function () {\r\n        return { x: window.innerWidth, y: window.innerHeight };\r\n    };\r\n    DefaultScreenSizeCalculator.prototype.GetAspectRatio = function () {\r\n        return this.designedWidth / this.designedHeight;\r\n    };\r\n    DefaultScreenSizeCalculator.prototype.CalculateSize = function (availableSize, aspect) {\r\n        var maxWidth = Math.floor(aspect * availableSize.y);\r\n        var maxHeight = Math.floor(window.innerHeight);\r\n        return { x: Math.min(maxWidth, availableSize.x), y: Math.min(maxHeight, availableSize.y) };\r\n    };\r\n    DefaultScreenSizeCalculator.prototype.CalculateScale = function (calculatedSize) {\r\n        return {\r\n            x: calculatedSize.x / this.designedWidth,\r\n            y: calculatedSize.x / this.designedWidth,\r\n        };\r\n    };\r\n    return DefaultScreenSizeCalculator;\r\n}());\n\nvar VERSION = '1.6.3';\n\nvar SceneManager = (function () {\r\n    function SceneManager(options, screenSizeCalculator) {\r\n        var _this = this;\r\n        this.currentScene = null;\r\n        this.scenes = [];\r\n        this.controllers = [];\r\n        this.animationFrameHandle = -1;\r\n        this.Destroy = function () {\r\n            cancelAnimationFrame(_this.animationFrameHandle);\r\n            if (_this.currentScene) {\r\n                _this.currentScene.pause();\r\n            }\r\n            _this.scenes.forEach(function (scene) {\r\n                _this.RemoveScene(scene);\r\n            });\r\n            _this.app.destroy(true, {\r\n                children: true,\r\n                texture: true,\r\n                baseTexture: true,\r\n            });\r\n        };\r\n        this.resizeHandler = function () {\r\n            _this.onResize(_this.screenSizeCalculator);\r\n        };\r\n        this.onRender = function (time) {\r\n            if (!_this.startTime) {\r\n                _this.startTime = Date.now();\r\n            }\r\n            _this.timeStamp = Date.now();\r\n            var dt = _this.timeStamp - _this.startTime;\r\n            if (dt > 50) {\r\n                dt = 50;\r\n            }\r\n            _this.controllers.forEach(function (ctrl) {\r\n                if (!ctrl.scope || (_this.currentScene && _this.currentScene.name === ctrl.scope)) {\r\n                    ctrl.update(dt, _this.currentScene);\r\n                }\r\n            });\r\n            if (!_this.currentScene || _this.currentScene.isPaused()) {\r\n                return;\r\n            }\r\n            _this.currentScene.onUpdate(dt, _this.timeStamp);\r\n            _this.startTime = _this.timeStamp;\r\n        };\r\n        SceneManager.logVersion();\r\n        this.masterContainer = new Container();\r\n        this.app = new Application(options);\r\n        this.app.ticker.add(this.onRender, this);\r\n        this.app.stage = this.masterContainer;\r\n        this.designWidth = options.width || window.innerWidth;\r\n        this.designHeight = options.height || window.innerHeight;\r\n        this.screenSizeCalculator = screenSizeCalculator || new DefaultScreenSizeCalculator(this.designWidth, this.designHeight);\r\n        window.removeEventListener('resize', this.resizeHandler);\r\n        window.addEventListener('resize', this.resizeHandler, true);\r\n    }\r\n    SceneManager.logVersion = function () {\r\n        if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\r\n            var fmtPurp = 'color:#fa1;background:#ff66a5;padding:5px 0;';\r\n            var fmtTxt = 'color:#fa1;background:#000;padding:5px 0;';\r\n            var fmtHearts = 'color:#f55;background:#ffc3dc;padding:5px 0;';\r\n            var args = [\r\n                \" %c  %c pixi-scenegraph: \" + VERSION + \" \\u2730  %c  %c https://github.com/enriko-riba/pixi-scenegraph#readme \\u2764\\u2764\\u2764\\t\",\r\n                fmtPurp,\r\n                fmtTxt,\r\n                fmtPurp,\r\n                fmtHearts,\r\n            ];\r\n            console.info.apply(console, args);\r\n        }\r\n        else if (window.console) {\r\n            console.info(\"pixi-scenegraph: \" + VERSION + \" \\u2730 https://github.com/enriko-riba/pixi-scenegraph#readme  \\u2764\\u2764\\u2764\");\r\n        }\r\n    };\r\n    Object.defineProperty(SceneManager.prototype, \"Renderer\", {\r\n        get: function () {\r\n            return this.app.renderer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SceneManager.prototype, \"Application\", {\r\n        get: function () {\r\n            return this.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SceneManager.prototype.AddController = function (controller) {\r\n        this.controllers.push(controller);\r\n    };\r\n    SceneManager.prototype.RemoveController = function (controllerOrId) {\r\n        var id = typeof controllerOrId !== 'string' ? controllerOrId.id : controllerOrId;\r\n        this.controllers = this.controllers.filter(function (ctrl) { return ctrl.id !== id; });\r\n    };\r\n    Object.defineProperty(SceneManager.prototype, \"CurrentScene\", {\r\n        get: function () {\r\n            return this.currentScene;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SceneManager.prototype.AddScene = function (scene) {\r\n        this.scenes.push(scene);\r\n    };\r\n    SceneManager.prototype.RemoveAllScenes = function () {\r\n        this.scenes.forEach(function (scene) {\r\n            scene.onDestroy();\r\n            scene.destroy({ children: true, texture: true, baseTexture: true });\r\n        });\r\n        this.scenes = [];\r\n        this.currentScene = null;\r\n    };\r\n    SceneManager.prototype.RemoveScene = function (scene) {\r\n        this.scenes = this.scenes.filter(function (item, index, arr) {\r\n            return item !== scene;\r\n        });\r\n        scene.onDestroy();\r\n        scene.destroy({ children: true, texture: true, baseTexture: true });\r\n    };\r\n    SceneManager.prototype.HasScene = function (name) {\r\n        var found = this.scenes.filter(function (item) { return item.Name === name; });\r\n        return found && found.length > 0;\r\n    };\r\n    SceneManager.prototype.GetScene = function (name) {\r\n        var found = this.scenes.filter(function (item) { return item.Name === name; });\r\n        if (!found || found.length === 0) {\r\n            throw Error(\"Scene: '\" + name + \"' not found\");\r\n        }\r\n        if (found.length > 1) {\r\n            throw Error(\"Multiple scenes: '\" + name + \"' found\");\r\n        }\r\n        return found[0];\r\n    };\r\n    SceneManager.prototype.ActivateScene = function (sceneOrName) {\r\n        var scene;\r\n        if (typeof sceneOrName === 'string') {\r\n            var found = this.scenes.filter(function (item) { return item.Name === sceneOrName; });\r\n            if (!found || found.length === 0) {\r\n                throw Error(\"Scene: '\" + sceneOrName + \"' not found\");\r\n            }\r\n            if (found.length > 1) {\r\n                throw Error(\"Multiple scenes: '\" + sceneOrName + \"' found\");\r\n            }\r\n            scene = found[0];\r\n        }\r\n        else {\r\n            scene = sceneOrName;\r\n        }\r\n        if (this.currentScene && this.currentScene !== scene) {\r\n            console.log('DeactivateScene ' + this.currentScene.Name);\r\n            this.currentScene.onDeactivate();\r\n        }\r\n        console.log('ActivateScene ' + scene.Name);\r\n        this.startTime = 0;\r\n        this.lastScene = (this.currentScene !== scene ? this.currentScene : this.lastScene);\r\n        this.currentScene = scene;\r\n        this.app.renderer.backgroundColor = scene.BackGroundColor;\r\n        this.resizeHandler();\r\n        scene.onActivate();\r\n        this.masterContainer.removeChildren();\r\n        this.masterContainer.addChild(this.currentScene);\r\n        if (this.masterHudOverlay) {\r\n            this.masterContainer.addChild(this.masterHudOverlay);\r\n        }\r\n        settings.RESOLUTION = window.devicePixelRatio;\r\n    };\r\n    SceneManager.prototype.ActivatePreviousScene = function () {\r\n        this.ActivateScene(this.lastScene);\r\n    };\r\n    Object.defineProperty(SceneManager.prototype, \"MasterHudOverlay\", {\r\n        get: function () {\r\n            return this.masterHudOverlay;\r\n        },\r\n        set: function (hud) {\r\n            this.masterHudOverlay = hud;\r\n            if (!!hud) {\r\n                this.masterContainer.removeChildren();\r\n                this.masterContainer.addChild(this.currentScene);\r\n                if (this.masterHudOverlay) {\r\n                    this.masterContainer.addChild(this.masterHudOverlay);\r\n                }\r\n                this.resizeHandler();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SceneManager.prototype.CaptureScene = function () {\r\n        console.log(\"Capturing scene, width: \" + this.app.renderer.width + \", height: \" + this.app.renderer.height);\r\n        var renderTexture = RenderTexture.create({ width: this.app.renderer.width, height: this.app.renderer.height });\r\n        this.app.renderer.render(this.currentScene, renderTexture);\r\n        return renderTexture;\r\n    };\r\n    SceneManager.prototype.onResize = function (screenSizeCalculator) {\r\n        var avlSize = this.screenSizeCalculator.GetAvailableSize();\r\n        var aspect = this.screenSizeCalculator.GetAspectRatio();\r\n        var size = this.screenSizeCalculator.CalculateSize(avlSize, aspect);\r\n        this.app.renderer.resize(size.x, size.y);\r\n        var scale = this.screenSizeCalculator.CalculateScale(size);\r\n        if (this.currentScene) {\r\n            this.currentScene.scale.set(scale.x, scale.y);\r\n            this.currentScene.onResize();\r\n        }\r\n        if (this.masterHudOverlay) {\r\n            this.masterHudOverlay.scale.set(scale.x, scale.y);\r\n        }\r\n    };\r\n    return SceneManager;\r\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar Scene = (function (_super) {\r\n    __extends(Scene, _super);\r\n    function Scene(name) {\r\n        var _this = _super.call(this) || this;\r\n        _this.paused = false;\r\n        _this.hudScene = null;\r\n        _this.clearValue = true;\r\n        _this.backgroundColor = 0x0;\r\n        _this.Name = name;\r\n        return _this;\r\n    }\r\n    Scene.prototype.onActivate = function () {\r\n    };\r\n    Scene.prototype.onDeactivate = function () {\r\n    };\r\n    Scene.prototype.onResize = function () {\r\n    };\r\n    Scene.prototype.onUpdate = function (dt, timestamp) {\r\n    };\r\n    Scene.prototype.onDestroy = function () {\r\n    };\r\n    Object.defineProperty(Scene.prototype, \"BackGroundColor\", {\r\n        get: function () {\r\n            return this.backgroundColor;\r\n        },\r\n        set: function (color) {\r\n            this.backgroundColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scene.prototype, \"HudOverlay\", {\r\n        get: function () {\r\n            return this.hudScene;\r\n        },\r\n        set: function (hud) {\r\n            if (this.hudScene) {\r\n                this.removeChild(this.hudScene);\r\n            }\r\n            this.hudScene = hud;\r\n            if (this.hudScene) {\r\n                var maxIndex = this.children.length;\r\n                this.addChildAt(this.hudScene, maxIndex);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Scene.prototype.addChild = function () {\r\n        var child = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            child[_i] = arguments[_i];\r\n        }\r\n        var dispObj = _super.prototype.addChild.apply(this, child);\r\n        if (this.hudScene) {\r\n            var maxIndex = this.children.length - 1;\r\n            this.setChildIndex(this.hudScene, maxIndex);\r\n        }\r\n        return dispObj;\r\n    };\r\n    Scene.prototype.addChildAt = function (child, index) {\r\n        var dispObj = _super.prototype.addChildAt.call(this, child, index);\r\n        if (this.hudScene) {\r\n            var maxIndex = this.children.length - 1;\r\n            this.setChildIndex(this.hudScene, maxIndex);\r\n        }\r\n        return dispObj;\r\n    };\r\n    Scene.prototype.pause = function () {\r\n        this.paused = true;\r\n    };\r\n    Scene.prototype.resume = function () {\r\n        this.paused = false;\r\n    };\r\n    Scene.prototype.isPaused = function () {\r\n        return this.paused;\r\n    };\r\n    Object.defineProperty(Scene.prototype, \"clear\", {\r\n        get: function () {\r\n            return this.clearValue;\r\n        },\r\n        set: function (clearFlag) {\r\n            this.clearValue = clearFlag;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Scene;\r\n}(Container));\n\nexport { DefaultScreenSizeCalculator, Scene, SceneManager, VERSION };\n","export type valueGetter<T> = () => T;\r\n\r\nexport class Dictionary<T> {\r\n    private dictValues: { [key: string]: T } = {};\r\n    private dictKeys: string[] = [];\r\n\r\n    public get(key: string): T {\r\n        return this.dictValues[key];\r\n    }\r\n\r\n    public contains(key: string): boolean {\r\n        return key in this.dictValues;\r\n    }\r\n\r\n    public remove(key: string) {\r\n        const index = this.dictKeys.indexOf(key, 0);\r\n        this.dictKeys.splice(index, 1);\r\n        delete this.dictValues[key];\r\n    }\r\n\r\n    public set(key: string, value: T) {\r\n        if (!(key in this.dictValues)) {\r\n            this.dictKeys.push(key);\r\n        }\r\n        this.dictValues[key] = value;\r\n    }\r\n\r\n    public get keys(): string[] {\r\n        return this.dictKeys;\r\n    }\r\n\r\n    public getAll(): { [key: string]: T } {\r\n        return this.dictValues;\r\n    }\r\n\r\n    public getSet(key: string, valueOrvalueGetter: T | valueGetter<T>): T {\r\n        if (!this.contains(key)) {\r\n            this.set(key, typeof valueOrvalueGetter === 'function' ? (valueOrvalueGetter as any)() : valueOrvalueGetter);\r\n        }\r\n        return this.get(key);\r\n    }\r\n\r\n    public clear() {\r\n        this.dictKeys = [];\r\n        this.dictValues = {};\r\n    }\r\n}","import { IRootObject, ILevelDefinition, ITemplate, IMapEntity, IMobEntity } from './LevelInterfaces';\r\n\r\n/**\r\n* Returns all assets referenced in the level.\r\n* @param root\r\n* @param levelId\r\n*/\r\nexport function GetLevelAssets(root: IRootObject, levelId: number): string[] {\r\n    var assets: string[] = [];\r\n\r\n    var level: ILevelDefinition = undefined;\r\n    for (var i = 0; i < root.levels.length; i++) {\r\n        if (root.levels[i].id === levelId) {\r\n            level = root.levels[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (level) {\r\n        level.parallax.forEach((iplx) => {\r\n            assets = assets.concat(iplx.textures);\r\n        });\r\n\r\n        if (level.assets && level.assets.length > 0) {\r\n            assets = assets.concat(level.assets);\r\n        }\r\n\r\n        //  merge global templates with level templates\r\n        var templates = root.templates.concat(level.map.templates);\r\n\r\n        // add all textures from templates (we don't need to have entities referencing the template if they are in a spawn)\r\n        level.map.templates.forEach((tos) => {\r\n            if (!tos.type || tos.type !== \"spawn_point\") {\r\n                let templ = tos as ITemplate;\r\n                let dispObj = templ.displayObject;\r\n                if (dispObj.texture) {\r\n                    if (typeof dispObj.texture === \"string\") {\r\n                        assets.push(dispObj.texture);\r\n                    } else {\r\n                        assets = assets.concat(dispObj.texture);\r\n                    }\r\n                }\r\n                if (dispObj.sequences) {\r\n                    dispObj.sequences.forEach((item) => {\r\n                        assets.push(item.texture);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        level.map.entities.forEach((entity: IMapEntity) => {\r\n            let defs = getEntityDefinition(templates, entity);\r\n            if (defs.doDef.texture) {\r\n                if (typeof defs.doDef.texture === \"string\") {\r\n                    assets.push(defs.doDef.texture);\r\n                } else {\r\n                    assets = assets.concat(defs.doDef.texture);\r\n                }\r\n            }\r\n            if (defs.doDef.sequences) {\r\n                defs.doDef.sequences.forEach((item) => {\r\n                    assets.push(item.texture);\r\n                });\r\n            }\r\n        });\r\n\r\n        level.map.NPC = level.map.NPC || [];\r\n        level.map.NPC.forEach((tos: IMobEntity) => {\r\n            //  check if its a template or spawn_point\r\n            if (tos.type && tos.type === \"spawn_point\") {\r\n\r\n            } else {\r\n                //  this is an entity definition\r\n                let entity: IMobEntity = tos as IMobEntity;\r\n\r\n                //  concat attack (string | string[])\r\n                if (entity.attack) {\r\n                    assets = assets.concat(entity.attack);\r\n                }\r\n\r\n                var entityTemplate = templates.filter((item) => item.name === entity.template);\r\n                if (entityTemplate && entityTemplate.length > 0) {\r\n                    var template = entityTemplate[0];\r\n                    // var temp = $.extend(true, {}, template.displayObject);\r\n                    // var displayObjectDefinition = $.extend(temp, entity);\r\n                    var displayObjectDefinition = { ...template.displayObject, ...entity };\r\n                    if (displayObjectDefinition.texture) {\r\n                        if (typeof displayObjectDefinition.texture === \"string\") {\r\n                            assets.push(displayObjectDefinition.texture);\r\n                        } else {\r\n                            assets = assets.concat(displayObjectDefinition.texture);\r\n                        }\r\n                    }\r\n\r\n                    if (displayObjectDefinition.attack) {\r\n                        assets = assets.concat(displayObjectDefinition.attack);\r\n                    }\r\n\r\n                    if (displayObjectDefinition.sequences) {\r\n                        displayObjectDefinition.sequences.forEach((item) => {\r\n                            //  add only if texture exists\r\n                            if (item.texture) {\r\n                                assets.push(item.texture);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    //  convert json atlas prefixed texture names to only json file names\r\n    assets = assets.map((name)=> {\r\n        let idx = name.indexOf('.json@');        \r\n        return idx > 0 ? name.substr(0, idx + 5) : name;\r\n    });\r\n    assets = getUniqueItems(assets);\r\n    return assets;\r\n}\r\n\r\n/**\r\n* Returns an object containing extracted display object and body definitions.\r\n* @param templates\r\n* @param entity\r\n*/\r\nexport function getEntityDefinition(templates: Array<any>, entity: IMapEntity | IMobEntity) {\r\n    let displayObjectDefinition = null;\r\n    let bodyDefinition = null;\r\n    let template = {\r\n        name: null,\r\n        displayObject: { typeName: \"Sprite\" }, //    sprite is the default if no template exists\r\n        body: null,\r\n        trigger: null,\r\n        drop: null\r\n    };\r\n    var entityTemplate = templates.filter((item) => item.name === entity.template);\r\n    if (entityTemplate && entityTemplate.length > 0) {\r\n        template = entityTemplate[0];\r\n    }\r\n    displayObjectDefinition = { ...template.displayObject, ...entity };\r\n\r\n    if (template.drop) {\r\n        displayObjectDefinition = { ...displayObjectDefinition, drop: template.drop }\r\n    }\r\n    if (template.body) {\r\n        bodyDefinition = template.body;\r\n    }\r\n\r\n    let triggerTemplate = undefined;\r\n    if (template.trigger || displayObjectDefinition.trigger) {\r\n        triggerTemplate = { ...template.trigger, ...displayObjectDefinition.trigger };\r\n    }\r\n    return {\r\n        templateName: template.name,\r\n        doDef: displayObjectDefinition,\r\n        bdDef: bodyDefinition,\r\n        trigger: triggerTemplate\r\n    };\r\n}\r\n/**\r\n * Returns a filtered array with unique only items from the input array\r\n * @param arr \r\n */\r\nexport function getUniqueItems(arr) {\r\n    var n = {}, r = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (!n[arr[i]]) {\r\n            n[arr[i]] = true;\r\n            r.push(arr[i]);\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n","import { Bullet } from \"../objects/Bullet\";\r\nimport { snd } from \"../world/SoundMan\";\r\nimport { AI } from \"./AI\";\r\nimport { BasicStaticAI } from \"./BasicStaticAI\";\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { DirectionH, AtrType } from '../enums';\r\nimport { AnimationSequence } from '../objects/AnimationSequence';\r\nimport { AnimatedSprite } from '../objects/AnimatedSprite';\r\n\r\nconst FRAME_SIZE: number = 48;\r\n\r\n\r\n\r\n/**\r\n * Represents a monster entity\r\n */\r\nexport class Mob extends AnimatedSprite {\r\n\r\n    private onDeathCallBack: () => void;\r\n    private _isDead: boolean = false;\r\n    private _attributes: number[];\r\n    private _ai: AI;\r\n    private _direction: DirectionH;\r\n    \r\n    constructor(private textureName: string) {\r\n        super();\r\n\r\n        this.addAnimations(new AnimationSequence(\"left\", this.textureName, [0, 1, 2], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"right\", this.textureName, [3, 4, 5], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"latk\", this.textureName, [6, 7, 8], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"ratk\", this.textureName, [9, 10, 11], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"lsquish\", this.textureName, [12, 13, 14, 15, 16, 17], FRAME_SIZE, FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"rsquish\", this.textureName, [18, 19, 20, 21, 22, 23], FRAME_SIZE, FRAME_SIZE));\r\n        this.play(\"left\");   \r\n        this._direction = DirectionH.Left;  \r\n    }\r\n\r\n    public isLoading: boolean = false;\r\n\r\n    public get isDead() {\r\n        return this._isDead;\r\n    }\r\n    public set isDead(value: boolean) {\r\n        if (value != this._isDead) {\r\n            this._isDead = value;\r\n            if (this._isDead && this.onDeathCallBack) {\r\n                this.onDeathCallBack();\r\n            }\r\n        }\r\n    }\r\n\r\n    public set onDeath(cb: () => void) {\r\n        this.onDeathCallBack = cb;\r\n    }\r\n    public get onDeath(): () => void {\r\n        return this.onDeathCallBack;\r\n    }\r\n\r\n\r\n    /**\r\n     * texture used for attacks emitted by the mob.\r\n     */\r\n    public atkTexture: string | string[];\r\n\r\n    /**\r\n     * Kills the mob, plays squish animation and sound. Optionaly invokes the call back on animation end.\r\n     * @param cb\r\n     */\r\n    public squish(cb?: () => void) {     \r\n        this.isDead = true;   \r\n        var aname = (this._direction == DirectionH.Left ? \"lsquish\" : \"rsquish\");\r\n        this.onComplete = cb;\r\n        this.play(aname, 12, false);\r\n        snd.mobSquish();\r\n    }\r\n\r\n    public get direction(): DirectionH {\r\n        return this._direction;\r\n    }\r\n    public set direction(dir: DirectionH) {\r\n        if (this._direction != dir) {\r\n            this._direction = dir;\r\n            if (dir === DirectionH.Left) {\r\n                this.play(\"left\");\r\n            } else {\r\n                this.play(\"right\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public set attributes(values: number[]) {\r\n        this._attributes = values;\r\n    }\r\n    public get attributes(): number[] {\r\n        return this._attributes;\r\n    }\r\n\r\n    public attack = ()=> {\r\n        var currentSeq = this.currentSequence;\r\n        var currentFps = this.fps;\r\n        snd.atkMagic1();\r\n        if (this._direction == DirectionH.Left) {\r\n            this.play(\"latk\", currentFps, false);\r\n        } else {\r\n            this.play(\"ratk\", currentFps, false);\r\n        }\r\n\r\n        this.onComplete = (seq: AnimationSequence) => {\r\n            this.onComplete = null;\r\n            this.fireBullet();\r\n            this.play(currentSeq.sequenceName, currentFps);\r\n        };\r\n    }\r\n\r\n    private fireBullet() {\r\n        if (this.atkTexture.constructor === Array) {\r\n            //  TODO: animated sprite\r\n        } else {\r\n            //  sprite\r\n            Bullet.emitBullet(this.atkTexture as string, this.position, wp2.playerBody.position, this._attributes[AtrType.Atk]);\r\n        }\r\n    }\r\n\r\n    public createAI(aiTypeName: string):void {\r\n        switch (aiTypeName.toLowerCase()) {\r\n            case \"basic_static\":\r\n                this._ai = new BasicStaticAI(this);\r\n                break;\r\n\r\n            case \"basic\":\r\n                //  TODO: implement AI logic variations \r\n                break;\r\n        }\r\n    }\r\n\r\n    public onUpdate(dt: number) {\r\n        super.onUpdate(dt);\r\n\r\n        if (!this.isDead && !this.isLoading) {\r\n            this._ai.onUpdate(dt);\r\n        }\r\n    }\r\n}","import * as p2 from \"p2\";\r\nimport { COL_GRP_PLAYER, COL_GRP_BULLET, COL_GRP_SCENE, COL_GRP_GROUND } from '../world/CollisionGroups';\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { Global, PIXI } from '..';\r\nimport { TextureLoader } from '../utility/TextureLoader';\r\n\r\n/**\r\n * Base for bullets, decals etc.\r\n */\r\nexport class Bullet extends PIXI.Sprite {\r\n    private direction: PIXI.Point = new PIXI.Point();\r\n    private ttl: number;\r\n    private startTime: number;\r\n    private isDead: boolean;\r\n    private onDeath: () => void;\r\n\r\n    public readonly interactionType: number = 666;\r\n    public body: p2.Body;\r\n\r\n    /**\r\n     * Creates a new bullet particle.\r\n     *\r\n     * @param texture\r\n     * @param velocity in pixels per second\r\n     * @param ttl time to live in seconds\r\n     * @param damage bullet hit damage\r\n     */\r\n    constructor(texture: PIXI.Texture, public velocity: number, ttl: number, public damage: number) {\r\n        super(texture);\r\n        this.ttl = ttl;\r\n        this.IsDead = false;\r\n    }\r\n\r\n    public set Direction(direction: PIXI.Point) {\r\n        //  normalize movement vector\r\n        let len = direction.x * direction.x + direction.y * direction.y;\r\n        len = 1 / Math.sqrt(len);\r\n        this.direction.set(direction.x * len, direction.y * len);\r\n    }\r\n    public get Direction() {\r\n        return this.direction;\r\n    }\r\n\r\n    public get IsDead() {\r\n        return this.isDead;\r\n    }\r\n    public set IsDead(value: boolean) {\r\n        if (value != this.isDead) {\r\n            this.isDead = value;\r\n            //console.log(\"bullet is dead: \" + value);\r\n\r\n            //  if set to alive remember start time\r\n            if (this.isDead) {\r\n                if (this.body) {\r\n                    this.body.velocity = [0, 0];\r\n                }\r\n            } else {\r\n                this.startTime = performance.now() / 1000;\r\n                if (this.body) {\r\n                    this.body.position = [this.position.x, this.position.y];\r\n                }\r\n            }\r\n\r\n            //  fire OnDeath if needed\r\n            if (this.isDead && this.onDeath) {\r\n                this.onDeath();\r\n            }\r\n\r\n            this.visible = !this.isDead;\r\n        }\r\n    }\r\n\r\n    public set OnDeath(cb: { (): void }) {\r\n        this.onDeath = cb;\r\n    }\r\n    public get OnDeath() {\r\n        return this.onDeath;\r\n    }\r\n\r\n    public onUpdate = () => {\r\n        // TTL expiry\r\n        if (!this.isDead) {\r\n            let now = performance.now() / 1000;\r\n            let ellapsed = now - this.startTime;\r\n            this.IsDead = this.ttl < ellapsed;\r\n        }\r\n    }\r\n\r\n    private static bullets: Bullet[] = [];\r\n    public static emitBullet = (textureName: string, position: PIXI.IPoint, target:any, damage: number): Bullet => {\r\n        let bullet = Bullet.findDeadBullet();\r\n        if (!bullet) {\r\n\r\n            //  create new bullet\r\n            var t = TextureLoader.Get(textureName);\r\n            bullet = new Bullet(t, 200, 5, damage);\r\n            bullet.anchor.set(0.5);\r\n            bullet.scale.set(0.5, -0.5);    //  worldcontainer is upside down\r\n            Bullet.bullets.push(bullet);\r\n            Global.worldContainer.addChild(bullet);\r\n\r\n            //-----------------------------\r\n            //  create body (sensor shape)\r\n            //-----------------------------\r\n            let shape = new p2.Circle({ radius: bullet.width / 2 });\r\n            shape.collisionGroup = COL_GRP_BULLET;\r\n            shape.collisionMask = COL_GRP_PLAYER | COL_GRP_SCENE | COL_GRP_GROUND;\r\n            shape.sensor = true;\r\n            var options: p2.BodyOptions = {\r\n                mass: 0,\r\n                position: [position.x, position.y],\r\n                angle: 0,\r\n                fixedRotation: false,\r\n                angularDamping: 0,\r\n                damping: 0\r\n            } as p2.BodyOptions;\r\n            let body = new p2.Body(options);\r\n            body.addShape(shape);\r\n            body.setDensity(0.0);\r\n            body.gravityScale = 0;\r\n            body.angularVelocity = 2;\r\n            body.collisionResponse = false;\r\n            body.type = p2.Body.DYNAMIC;\r\n            (body as any).DisplayObject = bullet;\r\n            bullet.body = body;\r\n            wp2.addBody(body);\r\n        } \r\n\r\n        bullet.position = position;\r\n        let pt = (target instanceof Float32Array) ? new PIXI.Point(target[0] - position.x, target[1] - position.y) : new PIXI.Point(target.x - position.x, target.y - position.y);\r\n        bullet.Direction = pt;\r\n        bullet.damage = damage;\r\n        bullet.IsDead = false;\r\n        bullet.body.velocity[0] = bullet.Direction.x * bullet.velocity;\r\n        bullet.body.velocity[1] = bullet.Direction.y * bullet.velocity;\r\n\r\n        return bullet;\r\n    };\r\n\r\n    public static reset(){\r\n        Bullet.bullets = [];\r\n    }\r\n\r\n    private static findDeadBullet = (): Bullet => {\r\n        for (var i = 0, len = Bullet.bullets.length; i < len; i++) {\r\n            let blt = Bullet.bullets[i];\r\n            if (blt.IsDead) {\r\n                return blt;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n}","import { Global } from '.';\r\nimport { BootScene } from './scenes/BootScene';\r\n\r\n\r\n/**\r\n *  Here we just preload fonts via google webfont.js\r\n *  after the fonts are loaded the bootstraper is taking over\r\n */\r\n\r\nconst PRELOAD_FONTS = [\r\n                        'Permanent Marker',\r\n                        'Orbitron'\r\n                    ];\r\n\r\n//------------------------\r\n// webfont loader config\r\n//------------------------\r\nconsole.log('initializing google webfont loader ...', PRELOAD_FONTS);\r\ntry {\r\n    var cfg = {\r\n        google: { families: PRELOAD_FONTS },\r\n        active: () => {\r\n            console.log('fonts preload finished!');          \r\n            const scm = Global.getScm();\r\n            const boot = new BootScene(scm);\r\n            scm.AddScene(boot);\r\n            scm.ActivateScene(boot);\r\n        }\r\n    };\r\n    (window as any).WebFontConfig = cfg;\r\n}\r\ncatch (e) {\r\n    console.log(e);\r\n}\r\n\r\n//------------------------\r\n// start webfont loader\r\n//------------------------\r\n/* jshint ignore:start */\r\n{\r\n    var src = ('https:' === document.location.protocol ? 'https' : 'http') +\r\n               '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';\r\n    var wf = document.createElement('script');\r\n    wf.src = src;\r\n    wf.type = 'text/javascript';\r\n    wf.async = true;\r\n    var s = document.getElementsByTagName('script')[0];\r\n    if(s.parentNode)s.parentNode.insertBefore(wf, s);\r\n};\r\n/* jshint ignore:end */","import {BLEND_MODES, Point, Texture} from \"pixi.js\";\nimport {PropertyNode, ValueStep} from \"./PropertyNode\";\nimport * as pixi from \"pixi.js\";\n// get Texture.from()/Texture.fromImage(), in V4 and V5 friendly methods\n/**\n * @hidden\n */\nlet TextureFromString: (s:string) => pixi.Texture;\n// to avoid Rollup transforming our import, save pixi namespace in a variable\nconst pixiNS = pixi;\nif (parseInt(/^(\\d+)\\./.exec(pixi.VERSION)[1]) < 5)\n{\n\tTextureFromString = pixiNS.Texture.fromImage;\n}\nelse\n{\n\tTextureFromString = (pixiNS as any).Texture.from;\n}\n\nexport function GetTextureFromString(s:string): Texture {\n\treturn TextureFromString(s);\n}\n\nexport interface Color {\n\tr: number,\n\tg: number,\n\tb: number,\n\ta?: number\n}\n\nexport interface EaseSegment {\n\tcp:number;\n\ts:number;\n\te:number;\n}\n\nexport type SimpleEase = (time:number) => number;\n\n/**\n * Contains helper functions for particles and emitters to use.\n */\nexport namespace ParticleUtils {\n\t/**\n\t * If errors and warnings should be logged within the library.\n\t */\n\texport let verbose = false;\n\n\texport const DEG_TO_RADS = Math.PI / 180;\n\n\t/**\n\t * Rotates a point by a given angle.\n\t * @param angle The angle to rotate by in degrees\n\t * @param p The point to rotate around 0,0.\n\t */\n\texport function rotatePoint(angle:number, p:Point)\n\t{\n\t\tif (!angle) return;\n\t\tangle *= ParticleUtils.DEG_TO_RADS;\n\t\tconst s = Math.sin(angle);\n\t\tconst c = Math.cos(angle);\n\t\tconst xnew = p.x * c - p.y * s;\n\t\tconst ynew = p.x * s + p.y * c;\n\t\tp.x = xnew;\n\t\tp.y = ynew;\n\t}\n\n\t/**\n\t * Combines separate color components (0-255) into a single uint color.\n\t * @param r The red value of the color\n\t * @param g The green value of the color\n\t * @param b The blue value of the color\n\t * @return The color in the form of 0xRRGGBB\n\t */\n\texport function combineRGBComponents(r:number, g:number, b:number/*, a*/): number\n\t{\n\t\treturn /*a << 24 |*/ r << 16 | g << 8 | b;\n\t}\n\n\t/**\n\t * Reduces the point to a length of 1.\n\t * @param point The point to normalize\n\t */\n\texport function normalize(point:Point): void\n\t{\n\t\tlet oneOverLen = 1 / ParticleUtils.length(point);\n\t\tpoint.x *= oneOverLen;\n\t\tpoint.y *= oneOverLen;\n\t}\n\n\t/**\n\t * Multiplies the x and y values of this point by a value.\n\t * @param point The point to scaleBy\n\t * @param value The value to scale by.\n\t */\n\texport function scaleBy(point:Point, value:number): void\n\t{\n\t\tpoint.x *= value;\n\t\tpoint.y *= value;\n\t}\n\n\t/**\n\t * Returns the length (or magnitude) of this point.\n\t * @param point The point to measure length\n\t * @return The length of this point.\n\t */\n\texport function length(point:Point): number\n\t{\n\t\treturn Math.sqrt(point.x * point.x + point.y * point.y);\n\t}\n\n\t/**\n\t * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\n\t * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\n\t * {r, g, b, (a)}.\n\t * @param color The input color string.\n\t * @param output An object to put the output in. If omitted, a new object is created.\n\t * @return The object with r, g, and b properties, possibly with an a property.\n\t */\n\texport function hexToRGB(color:string, output?:Color): Color\n\t{\n\t\tif (!output)\n\t\t\toutput = {} as Color;\n\t\tif (color.charAt(0) == \"#\")\n\t\t\tcolor = color.substr(1);\n\t\telse if (color.indexOf(\"0x\") === 0)\n\t\t\tcolor = color.substr(2);\n\t\tlet alpha;\n\t\tif (color.length == 8)\n\t\t{\n\t\t\talpha = color.substr(0, 2);\n\t\t\tcolor = color.substr(2);\n\t\t}\n\t\toutput.r = parseInt(color.substr(0, 2), 16);//Red\n\t\toutput.g = parseInt(color.substr(2, 2), 16);//Green\n\t\toutput.b = parseInt(color.substr(4, 2), 16);//Blue\n\t\tif (alpha)\n\t\t\toutput.a = parseInt(alpha, 16);\n\t\treturn output;\n\t}\n\n\t/**\n\t * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\n\t * by the related tool at http://www.greensock.com/customease/.\n\t * @param segments An array of segments, as created by\n\t * http://www.greensock.com/customease/.\n\t * @return A function that calculates the percentage of change at\n\t *                    a given point in time (0-1 inclusive).\n\t */\n\texport function generateEase(segments:EaseSegment[]): SimpleEase\n\t{\n\t\tconst qty = segments.length;\n\t\tconst oneOverQty = 1 / qty;\n\t\t/*\n\t\t * Calculates the percentage of change at a given point in time (0-1 inclusive).\n\t\t * @param {Number} time The time of the ease, 0-1 inclusive.\n\t\t * @return {Number} The percentage of the change, 0-1 inclusive (unless your\n\t\t *                  ease goes outside those bounds).\n\t\t */\n\t\treturn function(time:number)\n\t\t{\n\t\t\tlet t: number, s: EaseSegment;\n\t\t\tlet i = (qty * time) | 0;//do a quick floor operation\n\t\t\tt = (time - (i * oneOverQty)) * qty;\n\t\t\ts = segments[i] || segments[qty - 1];\n\t\t\treturn (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\n\t\t};\n\t}\n\n\t/**\n\t * Gets a blend mode, ensuring that it is valid.\n\t * @param name The name of the blend mode to get.\n\t * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\n\t */\n\texport function getBlendMode(name:string): number\n\t{\n\t\tif (!name) return BLEND_MODES.NORMAL;\n\t\tname = name.toUpperCase();\n\t\twhile (name.indexOf(\" \") >= 0)\n\t\t\tname = name.replace(\" \", \"_\");\n\t\treturn (BLEND_MODES as any)[name] || BLEND_MODES.NORMAL;\n\t}\n\n\t/**\n\t * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\n\t * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\n\t * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\n\t * @param list The list of data to convert.\n\t * @param [numSteps=10] The number of steps to use.\n\t * @return The blend mode as specified in the PIXI.blendModes enumeration.\n\t */\n\texport function createSteppedGradient(list:ValueStep<string>[], numSteps:number = 10) {\n\t\tif (typeof numSteps !== 'number' || numSteps <= 0)\n\t\t\tnumSteps = 10;\n\t\tlet first = new PropertyNode<Color>(ParticleUtils.hexToRGB(list[0].value), list[0].time);\n\t\tfirst.isStepped = true;\n\t\tlet currentNode = first;\n\t\tlet current = list[0];\n\t\tlet nextIndex = 1;\n\t\tlet next = list[nextIndex];\n\t\tfor (let i = 1; i < numSteps; ++i)\n\t\t{\n\t\t\tlet lerp = i / numSteps;\n\t\t\t//ensure we are on the right segment, if multiple\n\t\t\twhile (lerp > next.time)\n\t\t\t{\n\t\t\t\tcurrent = next;\n\t\t\t\tnext = list[++nextIndex];\n\t\t\t}\n\t\t\t//convert the lerp value to the segment range\n\t\t\tlerp = (lerp - current.time) / (next.time - current.time);\n\t\t\tlet curVal = ParticleUtils.hexToRGB(current.value);\n\t\t\tlet nextVal = ParticleUtils.hexToRGB(next.value);\n\t\t\tlet output:Color = {\n\t\t\t\tr: (nextVal.r - curVal.r) * lerp + curVal.r,\n\t\t\t\tg: (nextVal.g - curVal.g) * lerp + curVal.g,\n\t\t\t\tb: (nextVal.b - curVal.b) * lerp + curVal.b,\n\t\t\t};\n\t\t\tcurrentNode.next = new PropertyNode(output, i / numSteps);\n\t\t\tcurrentNode = currentNode.next;\n\t\t}\n\t\t//we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\n\t\t//the particle has died of old age\n\t\treturn first;\n\t}\n}","import {ParticleUtils, EaseSegment, SimpleEase, Color} from \"./ParticleUtils\";\nimport {BasicTweenable} from \"./EmitterConfig\";\n\nexport interface ValueStep<T> {\n\tvalue:T;\n\ttime:number;\n}\n\nexport interface ValueList<T> {\n\tlist: ValueStep<T>[],\n\tisStepped?: boolean;\n\tease?: SimpleEase|EaseSegment[];\n}\n/**\n * A single node in a PropertyList.\n */\nexport class PropertyNode<V>\n{\n\t/**\n\t * Value for the node.\n\t */\n\tpublic value: V;\n\t/**\n\t * Time value for the node. Between 0-1.\n\t */\n\tpublic time: number;\n\t/**\n\t * The next node in line.\n\t */\n\tpublic next: PropertyNode<V>;\n\t/**\n\t * If this is the first node in the list, controls if the entire list is stepped or not.\n\t */\n\tpublic isStepped: boolean;\n\tpublic ease: SimpleEase;\n\t\n\t/**\n\t * @param value The value for this node\n\t * @param time The time for this node, between 0-1\n\t * @param [ease] Custom ease for this list. Only relevant for the first node.\n\t */\n\tconstructor(value: V, time:number, ease?: SimpleEase|EaseSegment[])\n\t{\n\t\tthis.value = value;\n\t\tthis.time = time;\n\t\tthis.next = null;\n\t\tthis.isStepped = false;\n\t\tif (ease)\n\t\t{\n\t\t\tthis.ease = typeof ease == \"function\" ? ease : ParticleUtils.generateEase(ease);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.ease = null;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a list of property values from a data object {list, isStepped} with a list of objects in\n\t * the form {value, time}. Alternatively, the data object can be in the deprecated form of\n\t * {start, end}.\n\t * @param data The data for the list.\n\t * @param data.list The array of value and time objects.\n\t * @param data.isStepped If the list is stepped rather than interpolated.\n\t * @param data.ease Custom ease for this list.\n\t * @return The first node in the list\n\t */\n\tpublic static createList<T extends (string|number)>(data: ValueList<T>|BasicTweenable<T>):PropertyNode<T extends string ? Color : T>\n\t{\n\t\tif (\"list\" in data)\n\t\t{\n\t\t\tlet array = data.list;\n\t\t\tlet node, first;\n\t\t\tconst {value, time} = array[0];\n\t\t\tfirst = node = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time, data.ease);\n\t\t\t//only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\n\t\t\tif (array.length > 2 || (array.length === 2 && array[1].value !== value))\n\t\t\t{\n\t\t\t\tfor (let i = 1; i < array.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tconst {value, time} = array[i];\n\t\t\t\t\tnode.next = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time);\n\t\t\t\t\tnode = node.next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfirst.isStepped = !!data.isStepped;\n\t\t\treturn first as PropertyNode<T extends string ? Color : T>;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//Handle deprecated version here\n\t\t\tlet start = new PropertyNode(typeof data.start === 'string' ? ParticleUtils.hexToRGB(data.start) : data.start, 0);\n\t\t\t//only set up a next value if it is different from the starting value\n\t\t\tif (data.end !== data.start)\n\t\t\t\tstart.next = new PropertyNode(typeof data.end === 'string' ? ParticleUtils.hexToRGB(data.end) : data.end, 1);\n\t\t\treturn start as PropertyNode<T extends string ? Color : T>;\n\t\t}\n\t}\n}","import {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\nimport {PropertyNode} from \"./PropertyNode\";\n\n/**\n * Singly linked list container for keeping track of interpolated properties for particles.\n * Each Particle will have one of these for each interpolated property.\n */\nexport class PropertyList<V>\n{\n\t/**\n\t * The current property node in the linked list.\n\t */\n\tpublic current: PropertyNode<V>;\n\t/**\n\t * The next property node in the linked list. Stored separately for slightly less variable\n\t * access.\n\t */\n\tpublic next: PropertyNode<V>;\n\t/**\n\t * Calculates the correct value for the current interpolation value. This method is set in\n\t * the reset() method.\n\t * @param lerp The interpolation value from 0-1.\n\t * @return The interpolated value. Colors are converted to the hex value.\n\t */\n\tpublic interpolate: (lerp:number)=>number;\n\t/**\n\t * A custom easing method for this list.\n\t * @param lerp The interpolation value from 0-1.\n\t * @return The eased value, also from 0-1.\n\t */\n\tpublic ease: SimpleEase;\n\t/**\n\t * If this list manages colors, which requires a different method for interpolation.\n\t */\n\tprivate isColor: boolean;\n\t\n    /**\n     * @param isColor If this list handles color values\n     */\n\tconstructor(isColor: boolean = false)\n\t{\n\t\tthis.current = null;\n\t\tthis.next = null;\n\t\tthis.isColor = !!isColor;\n\t\tthis.interpolate = null;\n\t\tthis.ease = null;\n\t}\n\n\t/**\n\t * Resets the list for use.\n\t * @param first The first node in the list.\n\t * @param first.isStepped If the values should be stepped instead of interpolated linearly.\n\t */\n\tpublic reset(first: PropertyNode<V>)\n\t{\n\t\tthis.current = first;\n\t\tthis.next = first.next;\n\t\tconst isSimple = this.next && this.next.time >= 1;\n\t\tif (isSimple)\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorSimple : intValueSimple;\n\t\t}\n\t\telse if (first.isStepped)\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorStepped : intValueStepped;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorComplex : intValueComplex;\n\t\t}\n\t\tthis.ease = this.current.ease;\n\t}\n}\n\nfunction intValueSimple(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\n}\n\nfunction intColorSimple(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\tlet curVal = this.current.value, nextVal = this.next.value;\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueComplex(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\t//convert the lerp value to the segment range\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\n}\n\nfunction intColorComplex(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\t//convert the lerp value to the segment range\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n\tlet curVal = this.current.value, nextVal = this.next.value;\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueStepped(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (this.next && lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\treturn this.current.value;\n}\n\nfunction intColorStepped(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (this.next && lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\tlet curVal = this.current.value;\n\treturn ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\n}","import {Emitter} from \"./Emitter\";\nimport {ParticleUtils, SimpleEase, Color, GetTextureFromString} from \"./ParticleUtils\";\nimport {PropertyList} from \"./PropertyList\";\nimport {Sprite, Point, Texture} from \"pixi.js\";\n\n/**\n * An individual particle image. You shouldn't have to deal with these.\n */\nexport class Particle extends Sprite\n{\n\t/**\n\t * The emitter that controls this particle.\n\t */\n\tpublic emitter: Emitter;\n\t/**\n\t * The velocity of the particle. Speed may change, but the angle also\n\t * contained in velocity is constant.\n\t */\n\tpublic velocity: Point;\n\t/**\n\t * The maximum lifetime of this particle, in seconds.\n\t */\n\tpublic maxLife: number;\n\t/**\n\t * The current age of the particle, in seconds.\n\t */\n\tpublic age: number;\n\t/**\n\t * A simple easing function to be applied to all properties that\n\t * are being interpolated.\n\t */\n\tpublic ease: SimpleEase;\n\t/**\n\t * Extra data that the emitter passes along for custom particles.\n\t */\n\tpublic extraData: any;\n\t/**\n\t * The alpha of the particle throughout its life.\n\t */\n\tpublic alphaList: PropertyList<number>;\n\t/**\n\t * The speed of the particle throughout its life.\n\t */\n\tpublic speedList: PropertyList<number>;\n\t/**\n\t * A multiplier from 0-1 applied to the speed of the particle at all times.\n\t */\n\tpublic speedMultiplier: number;\n\t/**\n\t * Acceleration to apply to the particle.\n\t */\n\tpublic acceleration: Point;\n\t/**\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n\t * will disable the maximum speed.\n\t */\n\tpublic maxSpeed: number;\n\t/**\n\t * Speed at which the particle rotates, in radians per second.\n\t */\n\tpublic rotationSpeed: number;\n\n\t/**\n\t * Acceleration of rotation (angular acceleration) to apply to the particle.\n\t */\n\tpublic rotationAcceleration: number;\n\n\t/**\n\t * If particle rotation is locked, preventing rotation from occurring due\n\t * to directional changes.\n\t */\n\tpublic noRotation: boolean;\n\t/**\n\t * The scale of the particle throughout its life.\n\t */\n\tpublic scaleList: PropertyList<number>;\n\t/**\n\t * A multiplier from 0-1 applied to the scale of the particle at all times.\n\t */\n\tpublic scaleMultiplier: number;\n\t/**\n\t * The tint of the particle throughout its life.\n\t */\n\tpublic colorList: PropertyList<Color>;\n\t/**\n\t * A reference to init, so that subclasses can access it without the penalty of Function.call()\n\t */\n\tprotected Particle_init: typeof Particle.prototype.init;\n\t/**\n\t * A reference to update so that subclasses can access the original without the overhead\n\t * of Function.call().\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t * @return The standard interpolation multiplier (0-1) used for all relevant particle\n\t *                   properties. A value of -1 means the particle died of old age instead.\n\t */\n\tprotected Particle_update: typeof Particle.prototype.update;\n\tprotected Particle_destroy: typeof Particle.prototype.destroy;\n\tprotected Sprite_destroy: typeof Sprite.prototype.destroy;\n\t/**\n\t * If alpha should be interpolated at all.\n\t */\n\tprotected _doAlpha: boolean;\n\t/**\n\t * If scale should be interpolated at all.\n\t */\n\tprotected _doScale: boolean;\n\t/**\n\t * If speed should be interpolated at all.\n\t */\n\tprotected _doSpeed: boolean;\n\t/**\n\t * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\n\t * and _doSpeed gets priority.\n\t */\n\tprotected _doAcceleration: boolean;\n\t/**\n\t * If color should be interpolated at all.\n\t */\n\tprotected _doColor: boolean;\n\t/**\n\t * If normal movement should be handled. Subclasses wishing to override movement\n\t * can set this to false in init().\n\t */\n\tprotected _doNormalMovement: boolean;\n\t/**\n\t * One divided by the max life of the particle, saved for slightly faster math.\n\t */\n\tprivate _oneOverLife: number;\n\t/**\n\t * Reference to the next particle in the list.\n\t */\n\tpublic next: Particle;\n\n\t/**\n\t * Reference to the previous particle in the list.\n\t */\n\tpublic prev: Particle;\n\n\t/**\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\t//start off the sprite with a blank texture, since we are going to replace it\n\t\t//later when the particle is initialized.\n\t\tsuper();\n\t\tthis.emitter = emitter;\n\t\t//particles should be centered\n\t\tthis.anchor.x = this.anchor.y = 0.5;\n\t\tthis.velocity = new Point();\n\t\tthis.rotationSpeed = 0;\n\t\tthis.rotationAcceleration = 0;\n\t\tthis.maxLife = 0;\n\t\tthis.age = 0;\n\t\tthis.ease = null;\n\t\tthis.extraData = null;\n\t\tthis.alphaList = new PropertyList();\n\t\tthis.speedList = new PropertyList();\n\t\tthis.speedMultiplier = 1;\n\t\tthis.acceleration = new Point();\n\t\tthis.maxSpeed = NaN;\n\t\tthis.scaleList = new PropertyList();\n\t\tthis.scaleMultiplier = 1;\n\t\tthis.colorList = new PropertyList(true);\n\t\tthis._doAlpha = false;\n\t\tthis._doScale = false;\n\t\tthis._doSpeed = false;\n\t\tthis._doAcceleration = false;\n\t\tthis._doColor = false;\n\t\tthis._doNormalMovement = false;\n\t\tthis._oneOverLife = 0;\n\t\tthis.next = null;\n\t\tthis.prev = null;\n\n\t\t//save often used functions on the instance instead of the prototype for better speed\n\t\tthis.init = this.init;\n\t\tthis.Particle_init = Particle.prototype.init;\n\t\tthis.update = this.update;\n\t\tthis.Particle_update = Particle.prototype.update;\n\t\tthis.Sprite_destroy = super.destroy;\n\t\tthis.Particle_destroy = Particle.prototype.destroy;\n\t\tthis.applyArt = this.applyArt;\n\t\tthis.kill = this.kill;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\t//reset the age\n\t\tthis.age = 0;\n\t\t//set up the velocity based on the start speed and rotation\n\t\tthis.velocity.x = this.speedList.current.value * this.speedMultiplier;\n\t\tthis.velocity.y = 0;\n\t\tParticleUtils.rotatePoint(this.rotation, this.velocity);\n\t\tif (this.noRotation)\n\t\t{\n\t\t\tthis.rotation = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//convert rotation to Radians from Degrees\n\t\t\tthis.rotation *= ParticleUtils.DEG_TO_RADS;\n\t\t}\n\t\t//convert rotation speed to Radians from Degrees\n\t\tthis.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\n\t\tthis.rotationAcceleration *= ParticleUtils.DEG_TO_RADS;\n\n\t\t//set alpha to inital alpha\n\t\tthis.alpha = this.alphaList.current.value;\n\t\t//set scale to initial scale\n\t\tthis.scale.x = this.scale.y = this.scaleList.current.value;\n\t\t//figure out what we need to interpolate\n\t\tthis._doAlpha = !!this.alphaList.current.next;\n\t\tthis._doSpeed = !!this.speedList.current.next;\n\t\tthis._doScale = !!this.scaleList.current.next;\n\t\tthis._doColor = !!this.colorList.current.next;\n\t\tthis._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\n\t\t//_doNormalMovement can be cancelled by subclasses\n\t\tthis._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\n\t\t//save our lerp helper\n\t\tthis._oneOverLife = 1 / this.maxLife;\n\t\t//set the inital color\n\t\tlet color = this.colorList.current.value;\n\t\tthis.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\n\t\t//ensure visibility\n\t\tthis.visible = true;\n\t}\n\n\t/**\n\t * Sets the texture for the particle. This can be overridden to allow\n\t * for an animated particle.\n\t * @param art The texture to set.\n\t */\n\tpublic applyArt(art: any)\n\t{\n\t\tthis.texture = art || Texture.EMPTY;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t * @return The standard interpolation multiplier (0-1) used for all\n\t *         relevant particle properties. A value of -1 means the particle\n\t *         died of old age instead.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\t//increase age\n\t\tthis.age += delta;\n\t\t//recycle particle if it is too old\n\t\tif(this.age >= this.maxLife || this.age < 0)\n\t\t{\n\t\t\tthis.kill();\n\t\t\treturn -1;\n\t\t}\n\n\t\t//determine our interpolation value\n\t\tlet lerp = this.age * this._oneOverLife;//lifetime / maxLife;\n\t\tif (this.ease)\n\t\t{\n\t\t\tif(this.ease.length == 4)\n\t\t\t{\n\t\t\t\t//the t, b, c, d parameters that some tween libraries use\n\t\t\t\t//(time, initial value, end value, duration)\n\t\t\t\tlerp = (this.ease as any)(lerp, 0, 1, 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//the simplified version that we like that takes\n\t\t\t\t//one parameter, time from 0-1. TweenJS eases provide this usage.\n\t\t\t\tlerp = this.ease(lerp);\n\t\t\t}\n\t\t}\n\n\t\t//interpolate alpha\n\t\tif (this._doAlpha)\n\t\t\tthis.alpha = this.alphaList.interpolate(lerp);\n\t\t//interpolate scale\n\t\tif (this._doScale)\n\t\t{\n\t\t\tlet scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\n\t\t\tthis.scale.x = this.scale.y = scale;\n\t\t}\n\t\t//handle movement\n\t\tif(this._doNormalMovement)\n\t\t{\n\t\t\tlet deltaX:number;\n\t\t\tlet deltaY:number;\n\t\t\t//interpolate speed\n\t\t\tif (this._doSpeed)\n\t\t\t{\n\t\t\t\tlet speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\t\t\t\tParticleUtils.normalize(this.velocity);\n\t\t\t\tParticleUtils.scaleBy(this.velocity, speed);\n\t\t\t\tdeltaX = this.velocity.x * delta;\n\t\t\t\tdeltaY = this.velocity.y * delta;\n\t\t\t}\n\t\t\telse if(this._doAcceleration)\n\t\t\t{\n\t\t\t\tconst oldVX = this.velocity.x;\n\t\t\t\tconst oldVY = this.velocity.y;\n\t\t\t\tthis.velocity.x += this.acceleration.x * delta;\n\t\t\t\tthis.velocity.y += this.acceleration.y * delta;\n\t\t\t\tif (this.maxSpeed)\n\t\t\t\t{\n\t\t\t\t\tlet currentSpeed = ParticleUtils.length(this.velocity);\n\t\t\t\t\t//if we are going faster than we should, clamp at the max speed\n\t\t\t\t\t//DO NOT recalculate vector length\n\t\t\t\t\tif (currentSpeed > this.maxSpeed)\n\t\t\t\t\t{\n\t\t\t\t\t\tParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// calculate position delta by the midpoint between our old velocity and our new velocity\n\t\t\t\tdeltaX = (oldVX + this.velocity.x) / 2 * delta;\n\t\t\t\tdeltaY = (oldVY + this.velocity.y) / 2 * delta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdeltaX = this.velocity.x * delta;\n\t\t\t\tdeltaY = this.velocity.y * delta;\n\t\t\t}\n\t\t\t//adjust position based on velocity\n\t\t\tthis.position.x += deltaX;\n\t\t\tthis.position.y += deltaY;\n\t\t}\n\t\t//interpolate color\n\t\tif (this._doColor)\n\t\t{\n\t\t\tthis.tint = this.colorList.interpolate(lerp);\n\t\t}\n\t\t//update rotation\n\t\tif (this.rotationAcceleration !== 0)\n\t\t{\n\t\t\tconst newRotationSpeed = this.rotationSpeed + this.rotationAcceleration * delta;\n\n\t\t\tthis.rotation += (this.rotationSpeed + newRotationSpeed) / 2 * delta;\n\t\t\tthis.rotationSpeed = newRotationSpeed;\n\t\t}\n\t\telse if (this.rotationSpeed !== 0)\n\t\t{\n\t\t\tthis.rotation += this.rotationSpeed * delta;\n\t\t}\n\t\telse if(this.acceleration && !this.noRotation)\n\t\t{\n\t\t\tthis.rotation = Math.atan2(this.velocity.y, this.velocity.x);// + Math.PI / 2;\n\t\t}\n\t\treturn lerp;\n\t}\n\n\t/**\n\t * Kills the particle, removing it from the display list\n\t * and telling the emitter to recycle it.\n\t */\n\tpublic kill()\n\t{\n\t\tthis.emitter.recycle(this);\n\t}\n\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tif (this.parent)\n\t\t\tthis.parent.removeChild(this);\n\t\tthis.Sprite_destroy();\n\t\tthis.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\n\t\t\tthis.speedList = this.ease = this.next = this.prev = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time.\n\t * @param art The array of art data. For Particle, it should be an array of\n\t *            Textures. Any strings in the array will be converted to\n\t *            Textures via Texture.from().\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art:any[]): any[]\n\t{\n\t\t//convert any strings to Textures.\n\t\tlet i;\n\t\tfor(i = art.length; i >= 0; --i)\n\t\t{\n\t\t\tif(typeof art[i] == \"string\")\n\t\t\t\tart[i] = GetTextureFromString(art[i]);\n\t\t}\n\t\t//particles from different base textures will be slower in WebGL than if they\n\t\t//were from one spritesheet\n\t\tif(ParticleUtils.verbose)\n\t\t{\n\t\t\tfor(i = art.length - 1; i > 0; --i)\n\t\t\t{\n\t\t\t\tif(art[i].baseTexture != art[i - 1].baseTexture)\n\t\t\t\t{\n\t\t\t\t\tif (window.console)\n\t\t\t\t\t\tconsole.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn art;\n\t}\n\n\t/**\n\t * Parses extra emitter data to ensure it is set up for this particle class.\n\t * Particle does nothing to the extra data.\n\t * @param extraData The extra data from the particle config.\n\t * @return The parsed extra data.\n\t */\n\tpublic static parseData(extraData: any): any\n\t{\n\t\treturn extraData;\n\t}\n}\n","import {ParticleUtils, Color, SimpleEase} from \"./ParticleUtils\";\nimport {Particle} from \"./Particle\";\nimport {PropertyNode} from \"./PropertyNode\";\nimport {PolygonalChain} from \"./PolygonalChain\";\nimport {EmitterConfig, OldEmitterConfig} from \"./EmitterConfig\";\nimport {Point, Circle, Rectangle, Container, settings} from \"pixi.js\";\nimport * as pixi from \"pixi.js\";\n// get the shared ticker, in V4 and V5 friendly methods\n/**\n * @hidden\n */\nlet ticker: pixi.ticker.Ticker;\n// to avoid Rollup transforming our import, save pixi namespace in a variable\nconst pixiNS = pixi;\nif (parseInt(/^(\\d+)\\./.exec(pixi.VERSION)[1]) < 5)\n{\n\tticker = pixiNS.ticker.shared;\n}\nelse\n{\n\tticker = (pixiNS as any).Ticker.shared;\n}\n\nexport interface ParticleConstructor\n{\n\tnew (emitter:Emitter):Particle;\n}\n\n/**\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A particle emitter.\n */\nexport class Emitter\n{\n\t/**\n\t * The constructor used to create new particles. The default is\n\t * the built in particle class.\n\t */\n\tprotected _particleConstructor: typeof Particle;\n\t//properties for individual particles\n\t/**\n\t * An array of PIXI Texture objects.\n\t */\n\tpublic particleImages: any[];\n\t/**\n\t * The first node in the list of alpha values for all particles.\n\t */\n\tpublic startAlpha: PropertyNode<number>;\n\t/**\n\t * The first node in the list of speed values of all particles.\n\t */\n\tpublic startSpeed: PropertyNode<number>;\n\t/**\n\t * A minimum multiplier for the speed of a particle at all stages of its life. A value between\n\t * minimumSpeedMultiplier and 1 is randomly generated for each particle.\n\t */\n\tpublic minimumSpeedMultiplier: number;\n\t/**\n\t * Acceleration to apply to particles. Using this disables\n\t * any interpolation of particle speed. If the particles do\n\t * not have a rotation speed, then they will be rotated to\n\t * match the direction of travel.\n\t */\n\tpublic acceleration: Point;\n\t/**\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n\t * will disable the maximum speed.\n\t */\n\tpublic maxSpeed: number;\n\t/**\n\t * The first node in the list of scale values of all particles.\n\t */\n\tpublic startScale: PropertyNode<number>;\n\t/**\n\t * A minimum multiplier for the scale of a particle at all stages of its life. A value between\n\t * minimumScaleMultiplier and 1 is randomly generated for each particle.\n\t */\n\tpublic minimumScaleMultiplier: number;\n\t/**\n\t * The first node in the list of  color values of all particles, as red, green, and blue\n\t * uints from 0-255.\n\t */\n\tpublic startColor: PropertyNode<Color>;\n\t/**\n\t * The minimum lifetime for a particle, in seconds.\n\t */\n\tpublic minLifetime: number;\n\t/**\n\t * The maximum lifetime for a particle, in seconds.\n\t */\n\tpublic maxLifetime: number;\n\t/**\n\t * The minimum start rotation for a particle, in degrees. This value\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\n\t */\n\tpublic minStartRotation: number;\n\t/**\n\t * The maximum start rotation for a particle, in degrees. This value\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\n\t */\n\tpublic maxStartRotation: number;\n\t/**\n\t * If no particle rotation should occur. Starting rotation will still\n\t * affect the direction in which particles move. If the rotation speed\n\t * is set, then this will be ignored.\n\t */\n\tpublic noRotation: boolean;\n\t/**\n\t * The minimum rotation speed for a particle, in degrees per second.\n\t * This only visually spins the particle, it does not change direction\n\t * of movement.\n\t */\n\tpublic minRotationSpeed: number;\n\t/**\n\t * The maximum rotation speed for a particle, in degrees per second.\n\t * This only visually spins the particle, it does not change direction\n\t * of movement.\n\t */\n\tpublic maxRotationSpeed: number;\n\t/**\n\t* The Acceleration of rotation (angular acceleration) for a particle, in degrees per second.\n\t*/\n\tpublic rotationAcceleration: number;\n\t/**\n\t * The blend mode for all particles, as named by PIXI.blendModes.\n\t */\n\tpublic particleBlendMode: number;\n\t/**\n\t * An easing function for nonlinear interpolation of values. Accepts a single\n\t * parameter of time as a value from 0-1, inclusive. Expected outputs are values\n\t * from 0-1, inclusive.\n\t */\n\tpublic customEase: SimpleEase;\n\t/**\n\t *\tExtra data for use in custom particles. The emitter doesn't look inside, but\n\t *\tpasses it on to the particle to use in init().\n\t */\n\tpublic extraData: any;\n\t//properties for spawning particles\n\t/**\n\t * Time between particle spawns in seconds.\n\t */\n\tprotected _frequency: number;\n\t/**\n\t * Chance that a particle will be spawned on each opportunity to spawn one.\n\t * 0 is 0%, 1 is 100%.\n\t */\n\tpublic spawnChance: number;\n\t/**\n\t * Maximum number of particles to keep alive at a time. If this limit\n\t * is reached, no more particles will spawn until some have died.\n\t */\n\tpublic maxParticles: number;\n\t/**\n\t * The amount of time in seconds to emit for before setting emit to false.\n\t * A value of -1 is an unlimited amount of time.\n\t */\n\tpublic emitterLifetime: number;\n\t/**\n\t * Position at which to spawn particles, relative to the emitter's owner's origin.\n\t * For example, the flames of a rocket travelling right might have a spawnPos\n\t * of {x:-50, y:0}.\n\t * to spawn at the rear of the rocket.\n\t * To change this, use updateSpawnPos().\n\t */\n\tpublic spawnPos: Point;\n\t/**\n\t * How the particles will be spawned. Valid types are \"point\", \"rectangle\",\n\t * \"circle\", \"burst\", \"ring\".\n\t */\n\tpublic spawnType: string;\n\t/**\n\t * A reference to the emitter function specific to the spawn type.\n\t */\n\tprotected _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\n\t/**\n\t * A rectangle relative to spawnPos to spawn particles inside if the spawn type is \"rect\".\n\t */\n\tpublic spawnRect: Rectangle;\n\t/**\n\t * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is \"polygonalChain\".\n\t */\n\tpublic spawnPolygonalChain: PolygonalChain;\n\t/**\n\t * A circle relative to spawnPos to spawn particles inside if the spawn type is \"circle\".\n\t */\n\tpublic spawnCircle: Circle & {minRadius: number};\n\t/**\n\t * Number of particles to spawn time that the frequency allows for particles to spawn.\n\t */\n\tpublic particlesPerWave: number;\n\t/**\n\t * Spacing between particles in a burst. 0 gives a random angle for each particle.\n\t */\n\tpublic particleSpacing: number;\n\t/**\n\t * Angle at which to start spawning particles in a burst.\n\t */\n\tpublic angleStart: number;\n\t/**\n\t * Rotation of the emitter or emitter's owner in degrees. This is added to\n\t * the calculated spawn angle.\n\t * To change this, use rotate().\n\t */\n\tprotected rotation: number;\n\t/**\n\t * The world position of the emitter's owner, to add spawnPos to when\n\t * spawning particles. To change this, use updateOwnerPos().\n\t */\n\tprotected ownerPos: Point;\n\t/**\n\t * The origin + spawnPos in the previous update, so that the spawn position\n\t * can be interpolated to space out particles better.\n\t */\n\tprotected _prevEmitterPos: Point;\n\t/**\n\t * If _prevEmitterPos is valid, to prevent interpolation on the first update\n\t */\n\tprotected _prevPosIsValid: boolean;\n\t/**\n\t * If either ownerPos or spawnPos has changed since the previous update.\n\t */\n\tprotected _posChanged: boolean;\n\t/**\n\t * The container to add particles to.\n\t */\n\tprotected _parent: Container;\n\t/**\n\t * If particles should be added at the back of the display list instead of the front.\n\t */\n\tpublic addAtBack: boolean;\n\t/**\n\t * The current number of active particles.\n\t */\n\tpublic particleCount: number;\n\t/**\n\t * If particles should be emitted during update() calls. Setting this to false\n\t * stops new particles from being created, but allows existing ones to die out.\n\t */\n\tprotected _emit: boolean;\n\t/**\n\t * The timer for when to spawn particles in seconds, where numbers less\n\t * than 0 mean that particles should be spawned.\n\t */\n\tprotected _spawnTimer: number;\n\t/**\n\t * The life of the emitter in seconds.\n\t */\n\tprotected _emitterLife: number;\n\t/**\n\t * The particles that are active and on the display list. This is the first particle in a\n\t * linked list.\n\t */\n\tprotected _activeParticlesFirst: Particle;\n\t/**\n\t * The particles that are active and on the display list. This is the last particle in a\n\t * linked list.\n\t */\n\tprotected _activeParticlesLast: Particle;\n\t/**\n\t * The particles that are not currently being used. This is the first particle in a\n\t * linked list.\n\t */\n\tprotected _poolFirst: Particle;\n\t/**\n\t * The original config object that this emitter was initialized with.\n\t */\n\tprotected _origConfig: any;\n\t/**\n\t * The original particle image data that this emitter was initialized with.\n\t */\n\tprotected _origArt: any;\n\t/**\n\t * If the update function is called automatically from the shared ticker.\n\t * Setting this to false requires calling the update function manually.\n\t */\n\tprotected _autoUpdate: boolean;\n    /**\n\t * A number keeping index of currently applied image. Used to emit arts in order.\n\t */\n\tprotected _currentImageIndex: number = -1;\n\t/**\n\t * If the emitter should destroy itself when all particles have died out. This is set by\n\t * playOnceAndDestroy();\n\t */\n\tprotected _destroyWhenComplete: boolean;\n\t/**\n\t * A callback for when all particles have died out. This is set by\n\t * playOnceAndDestroy() or playOnce();\n\t */\n\tprotected _completeCallback: () => void;\n\n\t/**\n\t * @param particleParent The container to add the particles to.\n\t * @param particleImages A texture or array of textures to use\n\t *                       for the particles. Strings will be turned\n\t *                       into textures via Texture.fromImage().\n\t * @param config A configuration object containing settings for the emitter.\n\t * @param config.emit If config.emit is explicitly passed as false, the\n\t *                    Emitter will start disabled.\n\t * @param config.autoUpdate If config.autoUpdate is explicitly passed as\n\t *                          true, the Emitter will automatically call\n\t *                          update via the PIXI shared ticker.\n\t */\n\tconstructor(particleParent: Container, particleImages: any, config: EmitterConfig|OldEmitterConfig)\n\t{\n\t\tthis._particleConstructor = Particle;\n\t\t//properties for individual particles\n\t\tthis.particleImages = null;\n\t\tthis.startAlpha = null;\n\t\tthis.startSpeed = null;\n\t\tthis.minimumSpeedMultiplier = 1;\n\t\tthis.acceleration = null;\n\t\tthis.maxSpeed = NaN;\n\t\tthis.startScale = null;\n\t\tthis.minimumScaleMultiplier = 1;\n\t\tthis.startColor = null;\n\t\tthis.minLifetime = 0;\n\t\tthis.maxLifetime = 0;\n\t\tthis.minStartRotation = 0;\n\t\tthis.maxStartRotation = 0;\n\t\tthis.noRotation = false;\n\t\tthis.minRotationSpeed = 0;\n\t\tthis.maxRotationSpeed = 0;\n\t\tthis.particleBlendMode = 0;\n\t\tthis.customEase = null;\n\t\tthis.extraData = null;\n\t\t//properties for spawning particles\n\t\tthis._frequency = 1;\n\t\tthis.spawnChance = 1;\n\t\tthis.maxParticles = 1000;\n\t\tthis.emitterLifetime = -1;\n\t\tthis.spawnPos = null;\n\t\tthis.spawnType = null;\n\t\tthis._spawnFunc = null;\n\t\tthis.spawnRect = null;\n\t\tthis.spawnCircle = null;\n\t\tthis.spawnPolygonalChain = null;\n\t\tthis.particlesPerWave = 1;\n\t\tthis.particleSpacing = 0;\n\t\tthis.angleStart = 0;\n\t\t//emitter properties\n\t\tthis.rotation = 0;\n\t\tthis.ownerPos = null;\n\t\tthis._prevEmitterPos = null;\n\t\tthis._prevPosIsValid = false;\n\t\tthis._posChanged = false;\n\t\tthis._parent = null;\n\t\tthis.addAtBack = false;\n\t\tthis.particleCount = 0;\n\t\tthis._emit = false;\n\t\tthis._spawnTimer = 0;\n\t\tthis._emitterLife = -1;\n\t\tthis._activeParticlesFirst = null;\n\t\tthis._activeParticlesLast = null;\n\t\tthis._poolFirst = null;\n\t\tthis._origConfig = null;\n\t\tthis._origArt = null;\n\t\tthis._autoUpdate = false;\n\t\tthis._currentImageIndex = -1;\n\t\tthis._destroyWhenComplete = false;\n\t\tthis._completeCallback = null;\n\n\t\t//set the initial parent\n\t\tthis.parent = particleParent;\n\n\t\tif(particleImages && config)\n\t\t\tthis.init(particleImages, config);\n\n\t\t//save often used functions on the instance instead of the prototype for better speed\n\t\tthis.recycle = this.recycle;\n\t\tthis.update = this.update;\n\t\tthis.rotate = this.rotate;\n\t\tthis.updateSpawnPos = this.updateSpawnPos;\n\t\tthis.updateOwnerPos = this.updateOwnerPos;\n\t}\n\n\t/**\n\t * If the emitter is using particle art in order as provided in `particleImages`.\n\t * Effective only when `particleImages` has multiple art options.\n\t * This is particularly useful ensuring that each art shows up once, in case you need to emit a body in an order.\n\t * For example: dragon - [Head, body1, body2, ..., tail]\n\t */\n\tpublic get orderedArt() { return this._currentImageIndex !== -1; }\n\tpublic set orderedArt(value) {\n\t\tthis._currentImageIndex = value ? 0 : -1;\n\t}\n\n\t/**\n\t * Time between particle spawns in seconds. If this value is not a number greater than 0,\n\t * it will be set to 1 (particle per second) to prevent infinite loops.\n\t */\n\tpublic get frequency() { return this._frequency; }\n\tpublic set frequency(value)\n\t{\n\t\t//do some error checking to prevent infinite loops\n\t\tif(typeof value == \"number\" && value > 0)\n\t\t\tthis._frequency = value;\n\t\telse\n\t\t\tthis._frequency = 1;\n\t}\n\t/**\n\t * The constructor used to create new particles. The default is\n\t * the built in Particle class. Setting this will dump any active or\n\t * pooled particles, if the emitter has already been used.\n\t */\n\tpublic get particleConstructor() { return this._particleConstructor; }\n\tpublic set particleConstructor(value)\n\t{\n\t\tif(value != this._particleConstructor)\n\t\t{\n\t\t\tthis._particleConstructor = value;\n\t\t\t//clean up existing particles\n\t\t\tthis.cleanup();\n\t\t\t//scrap all the particles\n\t\t\tfor (let particle = this._poolFirst; particle; particle = particle.next)\n\t\t\t{\n\t\t\t\tparticle.destroy();\n\t\t\t}\n\t\t\tthis._poolFirst = null;\n\t\t\t//re-initialize the emitter so that the new constructor can do anything it needs to\n\t\t\tif(this._origConfig && this._origArt)\n\t\t\t\tthis.init(this._origArt, this._origConfig);\n\t\t}\n\t}\n\n\t/**\n\t* The container to add particles to. Settings this will dump any active particles.\n\t*/\n\tpublic get parent() { return this._parent; }\n\tpublic set parent(value)\n\t{\n\t\tthis.cleanup();\n\t\tthis._parent = value;\n\t}\n\n\t/**\n\t * Sets up the emitter based on the config settings.\n\t * @param art A texture or array of textures to use for the particles.\n\t * @param config A configuration object containing settings for the emitter.\n\t */\n\tpublic init(art: any, config: EmitterConfig|OldEmitterConfig)\n\t{\n\t\tif(!art || !config)\n\t\t\treturn;\n\t\t//clean up any existing particles\n\t\tthis.cleanup();\n\n\t\t//store the original config and particle images, in case we need to re-initialize\n\t\t//when the particle constructor is changed\n\t\tthis._origConfig = config;\n\t\tthis._origArt = art;\n\n\t\t//set up the array of data, also ensuring that it is an array\n\t\tart = Array.isArray(art) ? art.slice() : [art];\n\t\t//run the art through the particle class's parsing function\n\t\tconst partClass = this._particleConstructor;\n\t\tthis.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\n\t\t///////////////////////////\n\t\t// Particle Properties   //\n\t\t///////////////////////////\n\t\t//set up the alpha\n\t\tif (config.alpha)\n\t\t{\n\t\t\tthis.startAlpha = PropertyNode.createList(config.alpha);\n\t\t}\n\t\telse\n\t\t\tthis.startAlpha = new PropertyNode(1, 0);\n\t\t//set up the speed\n\t\tif (config.speed)\n\t\t{\n\t\t\tthis.startSpeed = PropertyNode.createList(config.speed);\n\t\t\tthis.minimumSpeedMultiplier = ('minimumSpeedMultiplier' in config ? config.minimumSpeedMultiplier : (config.speed as any).minimumSpeedMultiplier) || 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.minimumSpeedMultiplier = 1;\n\t\t\tthis.startSpeed = new PropertyNode(0, 0);\n\t\t}\n\t\t//set up acceleration\n\t\tlet acceleration = config.acceleration;\n\t\tif(acceleration && (acceleration.x || acceleration.y))\n\t\t{\n\t\t\t//make sure we disable speed interpolation\n\t\t\tthis.startSpeed.next = null;\n\t\t\tthis.acceleration = new Point(acceleration.x, acceleration.y);\n\t\t\tthis.maxSpeed = config.maxSpeed || NaN;\n\t\t}\n\t\telse\n\t\t\tthis.acceleration = new Point();\n\t\t//set up the scale\n\t\tif (config.scale)\n\t\t{\n\t\t\tthis.startScale = PropertyNode.createList(config.scale);\n\t\t\tthis.minimumScaleMultiplier = ('minimumScaleMultiplier' in config ? config.minimumScaleMultiplier : (config.scale as any).minimumScaleMultiplier) || 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.startScale = new PropertyNode(1, 0);\n\t\t\tthis.minimumScaleMultiplier = 1;\n\t\t}\n\t\t//set up the color\n\t\tif (config.color)\n\t\t{\n\t\t\tthis.startColor = PropertyNode.createList(config.color);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.startColor = new PropertyNode({r:0xFF, g:0xFF, b:0xFF}, 0);\n\t\t}\n\t\t//set up the start rotation\n\t\tif (config.startRotation)\n\t\t{\n\t\t\tthis.minStartRotation = config.startRotation.min;\n\t\t\tthis.maxStartRotation = config.startRotation.max;\n\t\t}\n\t\telse\n\t\t\tthis.minStartRotation = this.maxStartRotation = 0;\n\t\tif (config.noRotation &&\n\t\t\t(this.minStartRotation || this.maxStartRotation))\n\t\t{\n\t\t\tthis.noRotation = !!config.noRotation;\n\t\t}\n\t\telse\n\t\t\tthis.noRotation = false;\n\t\t//set up the rotation speed\n\t\tif (config.rotationSpeed)\n\t\t{\n\t\t\tthis.minRotationSpeed = config.rotationSpeed.min;\n\t\t\tthis.maxRotationSpeed = config.rotationSpeed.max;\n\t\t}\n\t\telse\n\t\t\tthis.minRotationSpeed = this.maxRotationSpeed = 0;\n\n\t\tthis.rotationAcceleration = config.rotationAcceleration || 0;\n\t\t//set up the lifetime\n\t\tthis.minLifetime = config.lifetime.min;\n\t\tthis.maxLifetime = config.lifetime.max;\n\t\t//get the blend mode\n\t\tthis.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\n\t\t//use the custom ease if provided\n\t\tif (config.ease)\n\t\t{\n\t\t\tthis.customEase = typeof config.ease == \"function\" ?\n\t\t\t\tconfig.ease : ParticleUtils.generateEase(config.ease);\n\t\t}\n\t\telse\n\t\t\tthis.customEase = null;\n\t\t//set up the extra data, running it through the particle class's parseData function.\n\t\tif(partClass.parseData)\n\t\t\tthis.extraData = partClass.parseData(config.extraData);\n\t\telse\n\t\t\tthis.extraData = config.extraData || null;\n\t\t//////////////////////////\n\t\t// Emitter Properties   //\n\t\t//////////////////////////\n\t\t//reset spawn type specific settings\n\t\tthis.spawnRect = this.spawnCircle = null;\n\t\tthis.particlesPerWave = 1;\n\t\tif (config.particlesPerWave && config.particlesPerWave > 1)\n\t\t\tthis.particlesPerWave = config.particlesPerWave;\n\t\tthis.particleSpacing = 0;\n\t\tthis.angleStart = 0;\n\t\t//determine the spawn function to use\n\t\tthis.parseSpawnType(config);\n\t\t//set the spawning frequency\n\t\tthis.frequency = config.frequency;\n\t\tthis.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\n\t\t//set the emitter lifetime\n\t\tthis.emitterLifetime = config.emitterLifetime || -1;\n\t\t//set the max particles\n\t\tthis.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\n\t\t//determine if we should add the particle at the back of the list or not\n\t\tthis.addAtBack = !!config.addAtBack;\n\t\t//reset the emitter position and rotation variables\n\t\tthis.rotation = 0;\n\t\tthis.ownerPos = new Point();\n\t\tthis.spawnPos = new Point(config.pos.x, config.pos.y);\n\n\t\tthis.initAdditional(art, config);\n\n\t\tthis._prevEmitterPos = this.spawnPos.clone();\n\t\t//previous emitter position is invalid and should not be used for interpolation\n\t\tthis._prevPosIsValid = false;\n\t\t//start emitting\n\t\tthis._spawnTimer = 0;\n\t\tthis.emit = config.emit === undefined ? true : !!config.emit;\n\t\tthis.autoUpdate = !!config.autoUpdate;\n\t\tthis.orderedArt = !!config.orderedArt;\n\t}\n\n\t/**\n\t * Sets up additional parameters to the emitter from config settings.\n\t * Using for parsing additional parameters on classes that extend from Emitter\n\t * @param art A texture or array of textures to use for the particles.\n\t * @param config A configuration object containing settings for the emitter.\n\t */\n\tprotected initAdditional(art: any, config: EmitterConfig|OldEmitterConfig)\n\t{\n\t}\n\n\t/**\n\t * Parsing emitter spawn type from config settings.\n\t * Place for override and add new kind of spawn type\n\t * @param config A configuration object containing settings for the emitter.\n\t */\n\tprotected parseSpawnType(config: EmitterConfig|OldEmitterConfig) {\n\t\tlet spawnCircle;\n\n\t\tswitch(config.spawnType)\n\t\t{\n\t\t\tcase \"rect\":\n\t\t\t\tthis.spawnType = \"rect\";\n\t\t\t\tthis._spawnFunc = this._spawnRect;\n\t\t\t\tlet spawnRect = config.spawnRect;\n\t\t\t\tthis.spawnRect = new Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\n\t\t\t\tbreak;\n\t\t\tcase \"circle\":\n\t\t\t\tthis.spawnType = \"circle\";\n\t\t\t\tthis._spawnFunc = this._spawnCircle;\n\t\t\t\tspawnCircle = config.spawnCircle;\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n\t\t\t\tbreak;\n\t\t\tcase \"ring\":\n\t\t\t\tthis.spawnType = \"ring\";\n\t\t\t\tthis._spawnFunc = this._spawnRing;\n\t\t\t\tspawnCircle = config.spawnCircle;\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n\t\t\t\tthis.spawnCircle.minRadius = spawnCircle.minR;\n\t\t\t\tbreak;\n\t\t\tcase \"burst\":\n\t\t\t\tthis.spawnType = \"burst\";\n\t\t\t\tthis._spawnFunc = this._spawnBurst;\n\t\t\t\tthis.particleSpacing = config.particleSpacing;\n\t\t\t\tthis.angleStart = config.angleStart ? config.angleStart : 0;\n\t\t\t\tbreak;\n\t\t\tcase \"point\":\n\t\t\t\tthis.spawnType = \"point\";\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\n\t\t\t\tbreak;\n\t\t\tcase \"polygonalChain\":\n\t\t\t\tthis.spawnType = \"polygonalChain\";\n\t\t\t\tthis._spawnFunc = this._spawnPolygonalChain;\n\t\t\t\tthis.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.spawnType = \"point\";\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Recycles an individual particle. For internal use only.\n\t * @param particle The particle to recycle.\n\t * @internal\n\t */\n\tpublic recycle(particle: Particle)\n\t{\n\t\tif(particle.next)\n\t\t\tparticle.next.prev = particle.prev;\n\t\tif(particle.prev)\n\t\t\tparticle.prev.next = particle.next;\n\t\tif(particle == this._activeParticlesLast)\n\t\t\tthis._activeParticlesLast = particle.prev;\n\t\tif(particle == this._activeParticlesFirst)\n\t\t\tthis._activeParticlesFirst = particle.next;\n\t\t//add to pool\n\t\tparticle.prev = null;\n\t\tparticle.next = this._poolFirst;\n\t\tthis._poolFirst = particle;\n\t\t//remove child from display, or make it invisible if it is in a ParticleContainer\n\t\tif(particle.parent)\n\t\t\tparticle.parent.removeChild(particle);\n\t\t//decrease count\n\t\t--this.particleCount;\n\t}\n\n\t/**\n\t * Sets the rotation of the emitter to a new value.\n\t * @param newRot The new rotation, in degrees.\n\t */\n\tpublic rotate(newRot: number)\n\t{\n\t\tif (this.rotation == newRot) return;\n\t\t//caclulate the difference in rotation for rotating spawnPos\n\t\tlet diff = newRot - this.rotation;\n\t\tthis.rotation = newRot;\n\t\t//rotate spawnPos\n\t\tParticleUtils.rotatePoint(diff, this.spawnPos);\n\t\t//mark the position as having changed\n\t\tthis._posChanged = true;\n\t}\n\n\t/**\n\t * Changes the spawn position of the emitter.\n\t * @param x The new x value of the spawn position for the emitter.\n\t * @param y The new y value of the spawn position for the emitter.\n\t */\n\tpublic updateSpawnPos(x: number, y: number)\n\t{\n\t\tthis._posChanged = true;\n\t\tthis.spawnPos.x = x;\n\t\tthis.spawnPos.y = y;\n\t}\n\n\t/**\n\t * Changes the position of the emitter's owner. You should call this if you are adding\n\t * particles to the world container that your emitter's owner is moving around in.\n\t * @param x The new x value of the emitter's owner.\n\t * @param y The new y value of the emitter's owner.\n\t */\n\tpublic updateOwnerPos(x: number, y: number)\n\t{\n\t\tthis._posChanged = true;\n\t\tthis.ownerPos.x = x;\n\t\tthis.ownerPos.y = y;\n\t}\n\n\t/**\n\t * Prevents emitter position interpolation in the next update.\n\t * This should be used if you made a major position change of your emitter's owner\n\t * that was not normal movement.\n\t */\n\tpublic resetPositionTracking()\n\t{\n\t\tthis._prevPosIsValid = false;\n\t}\n\n\t/**\n\t * If particles should be emitted during update() calls. Setting this to false\n\t * stops new particles from being created, but allows existing ones to die out.\n\t */\n\tpublic get emit() { return this._emit; };\n\tpublic set emit(value)\n\t{\n\t\tthis._emit = !!value;\n\t\tthis._emitterLife = this.emitterLifetime;\n\t}\n\n\t/**\n\t * If the update function is called automatically from the shared ticker.\n\t * Setting this to false requires calling the update function manually.\n\t */\n\tpublic get autoUpdate() { return this._autoUpdate; }\n\tpublic set autoUpdate(value)\n\t{\n\t\tif (this._autoUpdate && !value)\n\t\t{\n\t\t\tticker.remove(this.update, this);\n\t\t}\n\t\telse if (!this._autoUpdate && value)\n\t\t{\n\t\t\tticker.add(this.update, this);\n\t\t}\n\t\tthis._autoUpdate = !!value;\n\t}\n\n\t/**\n\t * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\n\t * when particle emission is complete.\n\t * @param callback Callback for when emission is complete (all particles have died off)\n\t */\n\tpublic playOnceAndDestroy(callback?: () => void)\n\t{\n\t\tthis.autoUpdate = true;\n\t\tthis.emit = true;\n\t\tthis._destroyWhenComplete = true;\n\t\tthis._completeCallback = callback;\n\t}\n\n\t/**\n\t * Starts emitting particles and optionally calls a callback when particle emission is complete.\n\t * @param callback Callback for when emission is complete (all particles have died off)\n\t */\n\tpublic playOnce(callback?: () => void)\n\t{\n\t\tthis.emit = true;\n\t\tthis._completeCallback = callback;\n\t}\n\n\t/**\n\t * Updates all particles spawned by this emitter and emits new ones.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number)\n\t{\n\t\tif (this._autoUpdate)\n\t\t{\n\t\t\tdelta = delta / settings.TARGET_FPMS / 1000;\n\t\t}\n\n\t\t//if we don't have a parent to add particles to, then don't do anything.\n\t\t//this also works as a isDestroyed check\n\t\tif (!this._parent) return;\n\t\t//update existing particles\n\t\tlet i, particle, next;\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\n\t\t{\n\t\t\tnext = particle.next;\n\t\t\tparticle.update(delta);\n\t\t}\n\t\tlet prevX, prevY;\n\t\t//if the previous position is valid, store these for later interpolation\n\t\tif(this._prevPosIsValid)\n\t\t{\n\t\t\tprevX = this._prevEmitterPos.x;\n\t\t\tprevY = this._prevEmitterPos.y;\n\t\t}\n\t\t//store current position of the emitter as local variables\n\t\tlet curX = this.ownerPos.x + this.spawnPos.x;\n\t\tlet curY = this.ownerPos.y + this.spawnPos.y;\n\t\t//spawn new particles\n\t\tif (this._emit)\n\t\t{\n\t\t\t//decrease spawn timer\n\t\t\tthis._spawnTimer -=  delta < 0 ? 0 : delta;\n\t\t\t//while _spawnTimer < 0, we have particles to spawn\n\t\t\twhile(this._spawnTimer <= 0)\n\t\t\t{\n\t\t\t\t//determine if the emitter should stop spawning\n\t\t\t\tif(this._emitterLife > 0)\n\t\t\t\t{\n\t\t\t\t\tthis._emitterLife -= this._frequency;\n\t\t\t\t\tif(this._emitterLife <= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._spawnTimer = 0;\n\t\t\t\t\t\tthis._emitterLife = 0;\n\t\t\t\t\t\tthis.emit = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//determine if we have hit the particle limit\n\t\t\t\tif(this.particleCount >= this.maxParticles)\n\t\t\t\t{\n\t\t\t\t\tthis._spawnTimer += this._frequency;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//determine the particle lifetime\n\t\t\t\tlet lifetime;\n\t\t\t\tif (this.minLifetime == this.maxLifetime)\n\t\t\t\t\tlifetime = this.minLifetime;\n\t\t\t\telse\n\t\t\t\t\tlifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\n\t\t\t\t//only make the particle if it wouldn't immediately destroy itself\n\t\t\t\tif(-this._spawnTimer < lifetime)\n\t\t\t\t{\n\t\t\t\t\t//If the position has changed and this isn't the first spawn,\n\t\t\t\t\t//interpolate the spawn position\n\t\t\t\t\tlet emitPosX, emitPosY;\n\t\t\t\t\tif (this._prevPosIsValid && this._posChanged)\n\t\t\t\t\t{\n\t\t\t\t\t\t//1 - _spawnTimer / delta, but _spawnTimer is negative\n\t\t\t\t\t\tlet lerp = 1 + this._spawnTimer / delta;\n\t\t\t\t\t\temitPosX = (curX - prevX) * lerp + prevX;\n\t\t\t\t\t\temitPosY = (curY - prevY) * lerp + prevY;\n\t\t\t\t\t}\n\t\t\t\t\telse//otherwise just set to the spawn position\n\t\t\t\t\t{\n\t\t\t\t\t\temitPosX = curX;\n\t\t\t\t\t\temitPosY = curY;\n\t\t\t\t\t}\n\t\t\t\t\t//create enough particles to fill the wave (non-burst types have a wave of 1)\n\t\t\t\t\ti = 0;\n\t\t\t\t\tfor(let len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i)\n\t\t\t\t\t{\n\t\t\t\t\t\t//see if we actually spawn one\n\t\t\t\t\t\tif (this.spawnChance < 1 && Math.random() >= this.spawnChance)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t//create particle\n\t\t\t\t\t\tlet p;\n\t\t\t\t\t\tif(this._poolFirst)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = this._poolFirst;\n\t\t\t\t\t\t\tthis._poolFirst = this._poolFirst.next;\n\t\t\t\t\t\t\tp.next = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = new this.particleConstructor(this);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//set a random texture if we have more than one\n\t\t\t\t\t\tif(this.particleImages.length > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// if using ordered art\n\t\t\t\t\t\t\tif(this._currentImageIndex !== -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// get current art index, then increment for the next particle\n\t\t\t\t\t\t\t\tp.applyArt(this.particleImages[this._currentImageIndex++]);\n\t\t\t\t\t\t\t\t// loop around if needed\n\t\t\t\t\t\t\t\tif(this._currentImageIndex < 0 || this._currentImageIndex >= this.particleImages.length)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis._currentImageIndex = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// otherwise grab a random one\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//if they are actually the same texture, a standard particle\n\t\t\t\t\t\t\t//will quit early from the texture setting in setTexture().\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//set up the start and end values\n\t\t\t\t\t\tp.alphaList.reset(this.startAlpha);\n\t\t\t\t\t\tif(this.minimumSpeedMultiplier != 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.speedList.reset(this.startSpeed);\n\t\t\t\t\t\tp.acceleration.x = this.acceleration.x;\n\t\t\t\t\t\tp.acceleration.y = this.acceleration.y;\n\t\t\t\t\t\tp.maxSpeed = this.maxSpeed;\n\t\t\t\t\t\tif(this.minimumScaleMultiplier != 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.scaleList.reset(this.startScale);\n\t\t\t\t\t\tp.colorList.reset(this.startColor);\n\t\t\t\t\t\t//randomize the rotation speed\n\t\t\t\t\t\tif(this.minRotationSpeed == this.maxRotationSpeed)\n\t\t\t\t\t\t\tp.rotationSpeed = this.minRotationSpeed;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tp.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\n\t\t\t\t\t\tp.rotationAcceleration = this.rotationAcceleration;\n\t\t\t\t\t\tp.noRotation = this.noRotation;\n\t\t\t\t\t\t//set up the lifetime\n\t\t\t\t\t\tp.maxLife = lifetime;\n\t\t\t\t\t\t//set the blend mode\n\t\t\t\t\t\tp.blendMode = this.particleBlendMode;\n\t\t\t\t\t\t//set the custom ease, if any\n\t\t\t\t\t\tp.ease = this.customEase;\n\t\t\t\t\t\t//set the extra data, if any\n\t\t\t\t\t\tp.extraData = this.extraData;\n\t\t\t\t\t\t//set additional properties to particle\n\t\t\t\t\t\tthis.applyAdditionalProperties(p);\n\t\t\t\t\t\t//call the proper function to handle rotation and position of particle\n\t\t\t\t\t\tthis._spawnFunc(p, emitPosX, emitPosY, i);\n\t\t\t\t\t\t//initialize particle\n\t\t\t\t\t\tp.init();\n\t\t\t\t\t\t//update the particle by the time passed, so the particles are spread out properly\n\t\t\t\t\t\tp.update(-this._spawnTimer);//we want a positive delta, because a negative delta messes things up\n\t\t\t\t\t\t//add the particle to the display list\n\t\t\t\t\t\tif(!p.parent)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.addAtBack)\n\t\t\t\t\t\t\t\tthis._parent.addChildAt(p, 0);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tthis._parent.addChild(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//kind of hacky, but performance friendly\n\t\t\t\t\t\t\t//shuffle children to correct place\n\t\t\t\t\t\t\tlet children = this._parent.children;\n\t\t\t\t\t\t\t//avoid using splice if possible\n\t\t\t\t\t\t\tif(children[0] == p)\n\t\t\t\t\t\t\t\tchildren.shift();\n\t\t\t\t\t\t\telse if(children[children.length-1] == p)\n\t\t\t\t\t\t\t\tchildren.pop();\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet index = children.indexOf(p);\n\t\t\t\t\t\t\t\tchildren.splice(index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this.addAtBack)\n\t\t\t\t\t\t\t\tchildren.unshift(p);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tchildren.push(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//add particle to list of active particles\n\t\t\t\t\t\tif(this._activeParticlesLast)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._activeParticlesLast.next = p;\n\t\t\t\t\t\t\tp.prev = this._activeParticlesLast;\n\t\t\t\t\t\t\tthis._activeParticlesLast = p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._activeParticlesLast = this._activeParticlesFirst = p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t++this.particleCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//increase timer and continue on to any other particles that need to be created\n\t\t\t\tthis._spawnTimer += this._frequency;\n\t\t\t}\n\t\t}\n\t\t//if the position changed before this update, then keep track of that\n\t\tif(this._posChanged)\n\t\t{\n\t\t\tthis._prevEmitterPos.x = curX;\n\t\t\tthis._prevEmitterPos.y = curY;\n\t\t\tthis._prevPosIsValid = true;\n\t\t\tthis._posChanged = false;\n\t\t}\n\n\t\t//if we are all done and should destroy ourselves, take care of that\n\t\tif (!this._emit && !this._activeParticlesFirst)\n\t\t{\n\t\t\tif (this._completeCallback)\n\t\t\t{\n\t\t\t\tconst cb = this._completeCallback;\n\t\t\t\tthis._completeCallback = null;\n\t\t\t\tcb();\n\t\t\t}\n\t\t\tif (this._destroyWhenComplete)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set additional properties to new particle.\n\t * Using on classes that extend from Emitter\n\t * @param p The particle\n\t */\n\tprotected applyAdditionalProperties(p: Particle) {\n\t}\n\n\t/**\n\t * Positions a particle for a point type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on\n\t\t//starting particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n\t\t//drop the particle at the emitter's position\n\t\tp.position.x = emitPosX;\n\t\tp.position.y = emitPosY;\n\t}\n\n\t/**\n\t * Positions a particle for a rectangle type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnRect(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n\t\t//place the particle at a random point in the rectangle\n\t\thelperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\n\t\thelperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a circle type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t//place the particle at a random radius in the circle\n\t\thelperPoint.x = Math.random() * this.spawnCircle.radius;\n\t\thelperPoint.y = 0;\n\t\t//rotate the point to a random angle in the circle\n\t\tParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\n\t\t//offset by the circle's center\n\t\thelperPoint.x += this.spawnCircle.x;\n\t\thelperPoint.y += this.spawnCircle.y;\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a ring type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnRing(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\tlet spawnCircle = this.spawnCircle;\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t//place the particle at a random radius in the ring\n\t\tif(spawnCircle.minRadius !== spawnCircle.radius)\n\t\t{\n\t\t\thelperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\n\t\t\t\t\t\t\tspawnCircle.minRadius;\n\t\t}\n\t\telse\n\t\t\thelperPoint.x = spawnCircle.radius;\n\t\thelperPoint.y = 0;\n\t\t//rotate the point to a random angle in the circle\n\t\tlet angle = Math.random() * 360;\n\t\tp.rotation += angle;\n\t\tParticleUtils.rotatePoint(angle, helperPoint);\n\t\t//offset by the circle's center\n\t\thelperPoint.x += this.spawnCircle.x;\n\t\thelperPoint.y += this.spawnCircle.y;\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for polygonal chain.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t// get random point on the polygon chain\n\t\tthis.spawnPolygonalChain.getRandomPoint(helperPoint);\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a burst type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave.\n\t */\n\tprotected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on spawn\n\t\t//angle and rotation of emitter\n\t\tif(this.particleSpacing === 0)\n\t\t\tp.rotation = Math.random() * 360;\n\t\telse\n\t\t\tp.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\n\t\t//drop the particle at the emitter's position\n\t\tp.position.x = emitPosX;\n\t\tp.position.y = emitPosY;\n\t}\n\n\t/**\n\t * Kills all active particles immediately.\n\t */\n\tpublic cleanup()\n\t{\n\t\tlet particle, next;\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\n\t\t{\n\t\t\tnext = particle.next;\n\t\t\tthis.recycle(particle);\n\t\t\tif(particle.parent)\n\t\t\t\tparticle.parent.removeChild(particle);\n\t\t}\n\t\tthis._activeParticlesFirst = this._activeParticlesLast = null;\n\t\tthis.particleCount = 0;\n\t}\n\n\t/**\n\t * Destroys the emitter and all of its particles.\n\t */\n\tpublic destroy()\n\t{\n\t\t//make sure we aren't still listening to any tickers\n\t\tthis.autoUpdate = false;\n\t\t//puts all active particles in the pool, and removes them from the particle parent\n\t\tthis.cleanup();\n\t\t//wipe the pool clean\n\t\tlet next;\n\t\tfor (let particle = this._poolFirst; particle; particle = next)\n\t\t{\n\t\t\t//store next value so we don't lose it in our destroy call\n\t\t\tnext = particle.next;\n\t\t\tparticle.destroy();\n\t\t}\n\t\tthis._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\n\t\t\tthis.startColor = this.startScale = this.startAlpha = this.startSpeed =\n\t\t\tthis.customEase = this._completeCallback = null;\n\t}\n}\n","import {Point} from \"pixi.js\";\n\nexport interface BasicPoint\n{\n\tx: number;\n\ty: number;\n}\n\nexport interface Segment\n{\n\tp1: BasicPoint;\n\tp2: BasicPoint;\n\tl: number;\n}\n\n/**\n * Chain of line segments for generating spawn positions.\n */\nexport class PolygonalChain\n{\n\t/**\n\t * List of segment objects in the chain.\n\t */\n\tprivate segments:Segment[];\n\t/**\n\t * Total length of all segments of the chain.\n\t */\n\tprivate totalLength:number;\n\t/**\n\t * Total length of segments up to and including the segment of the same index.\n\t * Used for weighted random selection of segment.\n\t */\n\tprivate countingLengths:number[];\n\t\n\t/**\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n\t */\n\tconstructor(data:BasicPoint[]|BasicPoint[][])\n\t{\n\t\tthis.segments = [];\n\t\tthis.countingLengths = [];\n\t\tthis.totalLength = 0;\n\t\tthis.init(data);\n\t}\n\t\n\t/**\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n\t */\n\tprivate init(data:BasicPoint[]|BasicPoint[][])\n\t{\n\t\t// if data is not present, set up a segment of length 0\n\t\tif (!data || !data.length)\n\t\t{\n\t\t\tthis.segments.push({p1:{x:0, y:0}, p2:{x:0, y:0}, l:0});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (Array.isArray(data[0]))\n\t\t\t{\n\t\t\t\t// list of segment chains, each defined as a list of points\n\t\t\t\tfor (let i = 0; i < data.length; ++i)\n\t\t\t\t{\n\t\t\t\t\t// loop through the chain, connecting points\n\t\t\t\t\tconst chain = data[i] as BasicPoint[];\n\t\t\t\t\tlet prevPoint = chain[0] as BasicPoint;\n\t\t\t\t\tfor (let j = 1; j < chain.length; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst second = chain[j] as BasicPoint;\n\t\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\n\t\t\t\t\t\tprevPoint = second;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlet prevPoint = data[0] as BasicPoint;\n\t\t\t\t// list of points\n\t\t\t\tfor (let i = 1; i < data.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tconst second = data[i] as BasicPoint;\n\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\n\t\t\t\t\tprevPoint = second;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// now go through our segments to calculate the lengths so that we\n\t\t// can set up a nice weighted random distribution\n\t\tfor (let i = 0; i < this.segments.length; ++i) {\n\t\t\tconst {p1, p2} = this.segments[i];\n\t\t\tconst segLength = Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n\t\t\t// save length so we can turn a random number into a 0-1 interpolation value later\n\t\t\tthis.segments[i].l = segLength;\n\t\t\tthis.totalLength += segLength;\n\t\t\t// keep track of the length so far, counting up\n\t\t\tthis.countingLengths.push(this.totalLength);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets a random point in the chain.\n\t * @param out The point to store the selected position in.\n\t */\n\tpublic getRandomPoint(out:Point)\n\t{\n\t\t// select a random spot in the length of the chain\n\t\tconst rand = Math.random() * this.totalLength;\n\t\tlet chosenSeg:Segment;\n\t\tlet lerp:number;\n\t\t// if only one segment, it wins\n\t\tif (this.segments.length === 1)\n\t\t{\n\t\t\tchosenSeg = this.segments[0];\n\t\t\tlerp = rand;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// otherwise, go through countingLengths until we have determined\n\t\t\t// which segment we chose\n\t\t\tfor (let i = 0; i < this.countingLengths.length; ++i) {\n\t\t\t\tif (rand < this.countingLengths[i])\n\t\t\t\t{\n\t\t\t\t\tchosenSeg = this.segments[i];\n\t\t\t\t\t// set lerp equal to the length into that segment (i.e. the remainder after subtracting all the segments before it)\n\t\t\t\t\tlerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// divide lerp by the segment length, to result in a 0-1 number.\n\t\tlerp /= chosenSeg.l || 1;\n\t\tconst {p1, p2} = chosenSeg;\n\t\t// now calculate the position in the segment that the lerp value represents\n\t\tout.x = p1.x + lerp * (p2.x - p1.x);\n\t\tout.y = p1.y + lerp * (p2.y - p1.y);\n\t}\n}","import {ParticleUtils} from \"./ParticleUtils\";\nimport {Particle} from \"./Particle\";\nimport {Emitter} from \"./Emitter\";\nimport {Point, Texture} from \"pixi.js\";\n\n/**\n * A helper point for math things.\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A hand picked list of Math functions (and a couple properties) that are\n * allowable. They should be used without the preceding \"Math.\"\n * @hidden\n */\nconst MATH_FUNCS =\n[\n\t\"pow\",\n\t\"sqrt\",\n\t\"abs\",\n\t\"floor\",\n\t\"round\",\n\t\"ceil\",\n\t\"E\",\n\t\"PI\",\n\t\"sin\",\n\t\"cos\",\n\t\"tan\",\n\t\"asin\",\n\t\"acos\",\n\t\"atan\",\n\t\"atan2\",\n\t\"log\"\n];\n/**\n * create an actual regular expression object from the string\n * @hidden\n */\nconst WHITELISTER = new RegExp(\n\t[\n\t\t//Allow the 4 basic operations, parentheses and all numbers/decimals, as well\n\t\t//as 'x', for the variable usage.\n\t\t\"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\n\t].concat(MATH_FUNCS).join(\"|\"),\n\t\"g\"\n);\n\n/**\n * Parses a string into a function for path following.\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\n * names, and using `new Function()` to generate a function.\n * @hidden\n * @param pathString The string to parse.\n * @return The path function - takes x, outputs y.\n */\nconst parsePath = function(pathString: string)\n{\n\tlet matches = pathString.match(WHITELISTER);\n\tfor(let i = matches.length - 1; i >= 0; --i)\n\t{\n\t\tif(MATH_FUNCS.indexOf(matches[i]) >= 0)\n\t\t\tmatches[i] = \"Math.\" + matches[i];\n\t}\n\tpathString = matches.join(\"\");\n\treturn new Function(\"x\", \"return \"+ pathString + \";\");\n};\n\n/**\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\n * \"5x + 3\".\n * To use this class, the particle config must have a \"path\" string in the\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\n * speed settings of the particle). It may have numbers, parentheses, the four basic\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\n * \"acos\", \"atan\", \"atan2\", \"log\".\n * The overall movement of the particle and the expression value become x and y positions for\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\n * the particle.\n *\n * Some example paths:\n *\n * \t\"sin(x/10) * 20\" // A sine wave path.\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\n */\nexport class PathParticle extends Particle\n{\n\t/**\n\t * The function representing the path the particle should take.\n\t */\n\tpublic path: Function;\n\t/**\n\t * The initial rotation in degrees of the particle, because the direction of the path\n\t * is based on that.\n\t */\n\tpublic initialRotation: number;\n\t/**\n\t * The initial position of the particle, as all path movement is added to that.\n\t */\n\tpublic initialPosition: Point;\n\t/**\n\t * Total single directional movement, due to speed.\n\t */\n\tpublic movement: number;\n\t\n\t/**\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\tsuper(emitter);\n\t\tthis.path = null;\n\t\tthis.initialRotation = 0;\n\t\tthis.initialPosition = new Point();\n\t\tthis.movement = 0;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\t//get initial rotation before it is converted to radians\n\t\tthis.initialRotation = this.rotation;\n\t\t//standard init\n\t\tthis.Particle_init();\n\n\t\t//set the path for the particle\n\t\tthis.path = this.extraData.path;\n\t\t//cancel the normal movement behavior\n\t\tthis._doNormalMovement = !this.path;\n\t\t//reset movement\n\t\tthis.movement = 0;\n\t\t//grab position\n\t\tthis.initialPosition.x = this.position.x;\n\t\tthis.initialPosition.y = this.position.y;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\tconst lerp = this.Particle_update(delta);\n\t\t//if the particle died during the update, then don't bother\n\t\tif(lerp >= 0 && this.path)\n\t\t{\n\t\t\t//increase linear movement based on speed\n\t\t\tconst speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\t\t\tthis.movement += speed * delta;\n\t\t\t//set up the helper point for rotation\n\t\t\thelperPoint.x = this.movement;\n\t\t\thelperPoint.y = this.path(this.movement);\n\t\t\tParticleUtils.rotatePoint(this.initialRotation, helperPoint);\n\t\t\tthis.position.x = this.initialPosition.x + helperPoint.x;\n\t\t\tthis.position.y = this.initialPosition.y + helperPoint.y;\n\t\t}\n\t\treturn lerp;\n\t}\n\t\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tthis.Particle_destroy();\n\t\tthis.path = this.initialPosition = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time. This just runs Particle.parseArt().\n\t * @param art The array of art data. For Particle, it should be an array of\n\t *            Textures. Any strings in the array will be converted to\n\t *            Textures via Texture.fromImage().\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art: (Texture|string)[]):Texture[]\n\t{\n\t\treturn Particle.parseArt(art);\n\t}\n\n\t/**\n\t * Parses extra emitter data to ensure it is set up for this particle class.\n\t * PathParticle checks for the existence of path data, and parses the path data for use\n\t * by particle instances.\n\t * @param extraData The extra data from the particle config.\n\t * @return The parsed extra data.\n\t */\n\tpublic static parseData(extraData: {path:string})\n\t{\n\t\tlet output: any = {};\n\t\tif(extraData && extraData.path)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\toutput.path = parsePath(extraData.path);\n\t\t\t}\n\t\t\tcatch(e)\n\t\t\t{\n\t\t\t\tif(ParticleUtils.verbose)\n\t\t\t\t\tconsole.error(\"PathParticle: error in parsing path expression\");\n\t\t\t\toutput.path = null;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(ParticleUtils.verbose)\n\t\t\t\tconsole.error(\"PathParticle requires a path string in extraData!\");\n\t\t\toutput.path = null;\n\t\t}\n\t\treturn output;\n\t}\n}","import {Particle} from \"./Particle\";\nimport {Emitter} from \"./Emitter\";\nimport {GetTextureFromString} from \"./ParticleUtils\";\nimport {Texture} from \"pixi.js\";\n\nexport interface ParsedAnimatedParticleArt\n{\n\ttextures: Texture[];\n\tduration: number;\n\tframerate: number;\n\tloop: boolean;\n}\n\nexport interface AnimatedParticleArt\n{\n\tframerate: \"matchLife\"|number;\n\tloop?: boolean;\n\ttextures: (string|Texture|{texture:string|Texture,count:number})[];\n}\n\n/**\n * An individual particle image with an animation. Art data passed to the emitter must be\n * formatted in a particular way for AnimatedParticle to be able to handle it:\n *\n * ```typescript\n * {\n *     //framerate is required. It is the animation speed of the particle in frames per\n *     //second.\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\n *     //particle, instead of at a constant framerate. This causes the animation to play\n *     //through one time, completing when the particle expires.\n *     framerate: 6,\n *     //loop is optional, and defaults to false.\n *     loop: true,\n *     //textures is required, and can be an array of any (non-zero) length.\n *     textures: [\n *         //each entry represents a single texture that should be used for one or more\n *         //frames. Any strings will be converted to Textures with Texture.from().\n *         //Instances of PIXI.Texture will be used directly.\n *         \"animFrame1.png\",\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\n *         //use that texture for 'count' frames sequentially.\n *         {\n *             texture: \"animFrame2.png\",\n *             count: 3\n *         },\n *         \"animFrame3.png\"\n *     ]\n * }\n * ```\n */\nexport class AnimatedParticle extends Particle\n{\n\t/**\n\t * Texture array used as each frame of animation, similarly to how MovieClip works.\n\t */\n\tprivate textures: Texture[];\n\n\t/**\n\t * Duration of the animation, in seconds.\n\t */\n\tprivate duration: number;\n\n\t/**\n\t * Animation framerate, in frames per second.\n\t */\n\tprivate framerate: number;\n\n\t/**\n\t * Animation time elapsed, in seconds.\n\t */\n\tprivate elapsed: number;\n\n\t/**\n\t * If this particle animation should loop.\n\t */\n\tprivate loop: boolean;\n\t\n\t/**\n\t * @param emitter The emitter that controls this AnimatedParticle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\tsuper(emitter);\n\n\t\tthis.textures = null;\n\t\tthis.duration = 0;\n\t\tthis.framerate = 0;\n\t\tthis.elapsed = 0;\n\t\tthis.loop = false;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\tthis.Particle_init();\n\n\t\tthis.elapsed = 0;\n\n\t\t//if the animation needs to match the particle's life, then cacluate variables\n\t\tif(this.framerate < 0)\n\t\t{\n\t\t\tthis.duration = this.maxLife;\n\t\t\tthis.framerate = this.textures.length / this.duration;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the textures for the particle.\n\t * @param art An array of PIXI.Texture objects for this animated particle.\n\t */\n\tpublic applyArt(art: ParsedAnimatedParticleArt)\n\t{\n\t\tthis.textures = art.textures;\n\t\tthis.framerate = art.framerate;\n\t\tthis.duration = art.duration;\n\t\tthis.loop = art.loop;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\tconst lerp = this.Particle_update(delta);\n\t\t//only animate the particle if it is still alive\n\t\tif(lerp >= 0)\n\t\t{\n\t\t\tthis.elapsed += delta;\n\t\t\tif(this.elapsed > this.duration)\n\t\t\t{\n\t\t\t\t//loop elapsed back around\n\t\t\t\tif(this.loop)\n\t\t\t\t\tthis.elapsed = this.elapsed % this.duration;\n\t\t\t\t//subtract a small amount to prevent attempting to go past the end of the animation\n\t\t\t\telse\n\t\t\t\t\tthis.elapsed = this.duration - 0.000001;\n\t\t\t}\n\t\t\t// add a very small number to the frame and then floor it to avoid\n\t\t\t// the frame being one short due to floating point errors.\n\t\t\tlet frame = (this.elapsed * this.framerate + 0.0000001) | 0;\n\t\t\tthis.texture = this.textures[frame] || Texture.EMPTY;\n\t\t}\n\t\treturn lerp;\n\t}\n\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tthis.Particle_destroy();\n\t\tthis.textures = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time.\n\t * @param art The array of art data, properly formatted for AnimatedParticle.\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art: AnimatedParticleArt[])\n\t{\n\t\tlet data, output: any, textures, tex, outTextures;\n\t\tlet outArr:ParsedAnimatedParticleArt[] = [];\n\t\tfor(let i = 0; i < art.length; ++i)\n\t\t{\n\t\t\tdata = art[i];\n\t\t\toutArr[i] = output = {} as ParsedAnimatedParticleArt;\n\t\t\toutput.textures = outTextures = [];\n\t\t\ttextures = data.textures;\n\t\t\tfor(let j = 0; j < textures.length; ++j)\n\t\t\t{\n\t\t\t\ttex = textures[j];\n\t\t\t\tif(typeof tex == \"string\")\n\t\t\t\t\toutTextures.push(GetTextureFromString(tex));\n\t\t\t\telse if(tex instanceof Texture)\n\t\t\t\t\toutTextures.push(tex);\n\t\t\t\t//assume an object with extra data determining duplicate frame data\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet dupe = tex.count || 1;\n\t\t\t\t\tif(typeof tex.texture == \"string\")\n\t\t\t\t\t\ttex = GetTextureFromString(tex.texture);\n\t\t\t\t\telse// if(tex.texture instanceof Texture)\n\t\t\t\t\t\ttex = tex.texture;\n\t\t\t\t\tfor(; dupe > 0; --dupe)\n\t\t\t\t\t{\n\t\t\t\t\t\toutTextures.push(tex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//use these values to signify that the animation should match the particle life time.\n\t\t\tif(data.framerate == \"matchLife\")\n\t\t\t{\n\t\t\t\t//-1 means that it should be calculated\n\t\t\t\toutput.framerate = -1;\n\t\t\t\toutput.duration = 0;\n\t\t\t\toutput.loop = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//determine if the animation should loop\n\t\t\t\toutput.loop = !!data.loop;\n\t\t\t\t//get the framerate, default to 60\n\t\t\t\toutput.framerate = data.framerate > 0 ? data.framerate : 60;\n\t\t\t\t//determine the duration\n\t\t\t\toutput.duration = outTextures.length / output.framerate;\n\t\t\t}\n\t\t}\n\n\t\treturn outArr;\n\t}\n}","import { PIXI, TextureLoader } from '..';\r\n\r\n// export enum OutlineMode {\r\n//   /**\r\n//    * The outline is backed in the buttons texture.\r\n//    * This looks excelent if the button's size matches the texture.\r\n//    */\r\n//   Texture,\r\n//   /**\r\n//    * The outline is created with the OutlineFilter.\r\n//    * Best to be used with small uniform textures (so scaling will not affect the texture).\r\n//    */\r\n//   Filter,\r\n// }\r\n\r\n/**\r\n * Basic Sprite based button. Uses different textures for pointerout, pointerover, pointerdown. Povides an `onClick` function\r\n */\r\nexport class SpriteButton extends PIXI.Sprite {\r\n    public onClick: (event: any) => void;\r\n    public mouseover: (event: any) => void;\r\n    public mouseout: (event: any) => void;\r\n\r\n    private textureUp: PIXI.Texture;\r\n    private textureHighlight: PIXI.Texture;\r\n    private textureDown: PIXI.Texture;\r\n    private isHighlightedValue: boolean = false;\r\n    private isPressedValue: boolean = false;\r\n    private isDisabledValue: boolean = false;\r\n    private isClickStartedValue: boolean = false;\r\n    private textValue: PIXI.Text;\r\n    private requestedWidth: number = 0;\r\n    private requestedHeight: number = 0;\r\n\r\n    // private outlineModeValue: OutlineMode = OutlineMode.Filter;\r\n    // private outlineColorValue: number;\r\n\r\n    constructor(texturePath: string, x: number = 0, y: number = 0, width: number = 128, height: number = 32) {\r\n        super();\r\n        this.position.set(x || 0, y || 0);\r\n        this.requestedHeight = height;\r\n        this.requestedWidth = width;\r\n\r\n        //  setup button textures\r\n        this.setTexture(texturePath);\r\n\r\n        this.buttonMode = false;\r\n        this.interactive = true;\r\n        this.cursor = 'hover';\r\n\r\n        // set the mousedown and touchstart callback...\r\n        this.on('pointerdown', this.onButtonDown);\r\n        this.on('pointerup', this.onButtonUp);\r\n        this.on('pointerupoutside', this.onButtonUpOutside);\r\n        this.on('pointerover', this.onButtonOver);\r\n        this.on('pointerout', this.onButtonOut);\r\n\r\n        this.isPressed = false;\r\n    }\r\n\r\n    // public get outlineMode() {\r\n    //   return this.outlineModeValue;\r\n    // }\r\n    // public set outlineMode(state: OutlineMode) {\r\n    //   this.outlineModeValue = state;\r\n    //   this.filters =\r\n    //     this.outlineModeValue === OutlineMode.Filter ? [new OutlineFilter(1, this.outlineColorValue, 0.5)] : null;\r\n    // }\r\n\r\n    // public get outlineColor() {\r\n    //   return this.outlineColorValue;\r\n    // }\r\n    // public set outlineColor(value: number) {\r\n    //   this.outlineColorValue = value;\r\n    //   this.filters =\r\n    //     this.outlineModeValue === OutlineMode.Filter ? [new OutlineFilter(1, this.outlineColorValue, 0.5)] : null;\r\n    // }\r\n\r\n    public get disabled() {\r\n        return this.isDisabledValue;\r\n    }\r\n    public set disabled(state: boolean) {\r\n        this.isDisabledValue = state;\r\n        this.cursor = state ? '' : 'hover';\r\n        this.applyTexture();\r\n    }\r\n\r\n    public get isPressed() {\r\n        return this.isPressedValue;\r\n    }\r\n    public set isPressed(state: boolean) {\r\n        this.isPressedValue = state;\r\n        this.applyTexture();\r\n    }\r\n\r\n    public get isHighlighted() {\r\n        return this.isHighlightedValue;\r\n    }\r\n    public set isHighlighted(state: boolean) {\r\n        this.isHighlightedValue = state;\r\n        this.applyTexture();\r\n    }\r\n\r\n    public get text() {\r\n        return this.textValue;\r\n    }\r\n    public set text(text: PIXI.Text) {\r\n        if (this.textValue) {\r\n            this.removeChild(this.textValue);\r\n        }\r\n        this.textValue = text;\r\n        if (this.textValue) {\r\n            this.textValue.anchor.set(0.5, 0.5);\r\n            const x = this.width / this.scale.x / 2;\r\n            const y = this.height / this.scale.y / 2;\r\n            this.textValue.position.set(x, y);\r\n            this.addChild(this.textValue);\r\n        }\r\n    }\r\n\r\n    public performClick(event: any) {\r\n        this.onClickHandler(event);\r\n    }\r\n\r\n    public setTexture(textureAtlasName: string) {\r\n        const spriteSheet: PIXI.Texture = TextureLoader.Get(textureAtlasName, true, PIXI.SCALE_MODES.NEAREST)!;\r\n        spriteSheet.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        const btnHeight = spriteSheet.height / 3;\r\n        const btnWidth = spriteSheet.width;\r\n        this.textureUp = new PIXI.Texture(\r\n            spriteSheet.baseTexture,\r\n            new PIXI.Rectangle(spriteSheet.frame.x, spriteSheet.frame.y, btnWidth, btnHeight),\r\n        );\r\n        this.textureHighlight = new PIXI.Texture(\r\n            spriteSheet.baseTexture,\r\n            new PIXI.Rectangle(spriteSheet.frame.x, spriteSheet.frame.y + 1 * btnHeight, btnWidth, btnHeight),\r\n        );\r\n        this.textureDown = new PIXI.Texture(\r\n            spriteSheet.baseTexture,\r\n            new PIXI.Rectangle(spriteSheet.frame.x, spriteSheet.frame.y + 2 * btnHeight, btnWidth, btnHeight),\r\n        );\r\n\r\n        //  calc the scale based on desired height/width\r\n        const scaleW = (this.requestedWidth || btnWidth) / btnWidth;\r\n        const scaleH = (this.requestedHeight || btnHeight) / btnHeight;\r\n        this.scale.set(scaleW, scaleH);\r\n\r\n        this.applyTexture();\r\n    }\r\n\r\n    private onClickHandler(event: any) {\r\n        if (!this.onClick) {\r\n            console.warn('onClick() empty, did you forget to attach a handler?');\r\n        } else {\r\n            this.onClick(event);\r\n        }\r\n    }\r\n\r\n    private onButtonDown = () => {\r\n        if (this.isDisabledValue) {\r\n            return;\r\n        }\r\n        this.isClickStartedValue = true;\r\n        this.texture = this.textureDown;\r\n    };\r\n\r\n    private onButtonUp = (event: any) => {\r\n        if (this.isDisabledValue) {\r\n            return;\r\n        }\r\n        if (this.isClickStartedValue) {\r\n            this.isClickStartedValue = false;\r\n            this.onClickHandler(event);\r\n        }\r\n        this.applyTexture();\r\n    };\r\n\r\n    private onButtonUpOutside = () => {\r\n        if (this.isDisabledValue) {\r\n            return;\r\n        }\r\n        this.applyTexture();\r\n        this.isClickStartedValue = false;\r\n    };\r\n\r\n    private onButtonOver = (event: any) => {\r\n        if (this.isDisabledValue) {\r\n            return;\r\n        }\r\n        this.texture = this.textureHighlight;\r\n        if (this.mouseover) {\r\n            this.mouseover(event);\r\n        }\r\n    };\r\n\r\n    private onButtonOut = (event: any) => {\r\n        if (this.isDisabledValue) {\r\n            return;\r\n        }\r\n        this.isClickStartedValue = false;\r\n        this.applyTexture();\r\n        if (this.mouseout) {\r\n            this.mouseout(event);\r\n        }\r\n    };\r\n\r\n    private applyTexture() {\r\n        if (this.isDisabledValue) {\r\n            this.texture = this.textureUp;\r\n            this.tint = 0x606060;\r\n        } else if (this.isHighlightedValue) {\r\n            this.texture = this.textureHighlight;\r\n            this.tint = 0x666666;\r\n        } else {\r\n            this.texture = this.isPressedValue ? this.textureDown : this.textureUp;\r\n            this.tint = 0xffffff;\r\n        }\r\n    }\r\n}","import { PIXI, TextureLoader } from '..';\r\n\r\n/**\r\n *   Represents a parallax background with textures that tile inside the viewport.\r\n */\r\nexport class Parallax extends PIXI.Container {\r\n    private viewPortSize: PIXI.Point;\r\n    private worldPosition: number;\r\n    private parallaxFactor: number;\r\n\r\n    private spriteBuffer: PIXI.Sprite[] = [];\r\n    private spriteOrderList: number[] = [];\r\n\r\n    /**\r\n     * total width of all textures\r\n     */\r\n    private totalWidth: number = 0;\r\n\r\n    /**\r\n     *   Creates a new ParalaxSprite instance.\r\n     */\r\n    constructor(size: PIXI.Point, parallaxFactor: number, textures: Array<string | PIXI.Texture>, private textureScale?: number) {\r\n        super();\r\n        this.viewPortSize = size || new PIXI.Point(100, 100);\r\n        this.parallaxFactor = parallaxFactor || 1;\r\n        this.textureScale = this.textureScale || 1;\r\n        this.setTextures(textures);\r\n        this.worldPosition = 0;\r\n        this.SetViewPortX(1);\r\n    }\r\n\r\n    public get WorldPosition() {\r\n        return this.worldPosition;\r\n    }\r\n\r\n    public SetViewPortX(newPositionX: number): void {\r\n        if (this.worldPosition !== newPositionX) {\r\n            this.recalculatePosition(newPositionX);\r\n        }\r\n    }\r\n\r\n    public get ViewPortSize(): PIXI.Point {\r\n        return this.viewPortSize;\r\n    }\r\n    public set ViewPortSize(point: PIXI.Point) {\r\n        this.viewPortSize = point;\r\n    }\r\n    public get ParallaxFactor(): number {\r\n        return this.parallaxFactor;\r\n    }\r\n    public set ParallaxFactor(factor: number) {\r\n        this.parallaxFactor = factor;\r\n    }\r\n\r\n    public setTextures(textures: Array<string | PIXI.Texture>): void {\r\n        let index = 0;\r\n        let textureIndex: number;\r\n\r\n        //  get the first texture to fetch the width\r\n        let t: PIXI.Texture = this.getTexture(textures, 0);\r\n        const width = t.width * this.textureScale!;\r\n\r\n        while (\r\n            this.spriteBuffer.length < 3 || //  at least 3 textures (for shifting right/left and central)\r\n            this.spriteBuffer.length < textures.length || //  at least as many as given in input\r\n            this.totalWidth <= this.viewPortSize.x + width //  at least to cover whole viewport size extended for one width\r\n        ) {\r\n            //  get the texture\r\n            textureIndex = index % textures.length;\r\n            t = this.getTexture(textures, textureIndex);\r\n            t.rotate = 8; //  to adjust for worldContainer y scale -1\r\n\r\n            // create a sprite\r\n            const spr = new PIXI.Sprite(t);\r\n            spr.x = this.totalWidth;\r\n            spr.scale.set(this.textureScale, this.textureScale);\r\n            spr.anchor.set(0, 0);\r\n            this.spriteBuffer.push(spr);\r\n            this.spriteOrderList.push(this.spriteBuffer.length - 1); //   will hold sprite indices from spritebuffer [0,1,2,3,4...]\r\n            this.addChild(spr);\r\n\r\n            //  update\r\n            this.totalWidth += spr.width;\r\n            //console.log(`${t.baseTexture.imageUrl} -> width: ${t.width} spr width: ${spr.width}, total width: ${this.totalWidth}`);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    private getTexture(textures: Array<string | PIXI.Texture>, textureIndex: number) {\r\n        let t: PIXI.Texture;\r\n        if (typeof textures[textureIndex] === 'string') {\r\n            t = TextureLoader.Get(textures[textureIndex] as string)!;\r\n        } else {\r\n            t = textures[textureIndex] as PIXI.Texture;\r\n        }\r\n        return t;\r\n    }\r\n\r\n    private recalculatePosition = (newPositionX: number) => {\r\n        const firstIdx = this.spriteOrderList[0];\r\n        const firstSpr: PIXI.Sprite = this.spriteBuffer[firstIdx];\r\n        const lastIdx = this.spriteOrderList[this.spriteOrderList.length - 1];\r\n        const lastSpr: PIXI.Sprite = this.spriteBuffer[lastIdx];\r\n\r\n        //  update sprite positions\r\n        const delta = (this.worldPosition - newPositionX) * this.parallaxFactor;\r\n        this.updatePositions(delta);\r\n\r\n        if (newPositionX > this.worldPosition) {\r\n            //  check for removals from left side\r\n            if (firstSpr.x + firstSpr.width < 0) {\r\n                this.spriteOrderList.push(this.spriteOrderList.shift()!); //  move first element to end\r\n                firstSpr.x = lastSpr.x + lastSpr.width;\r\n            }\r\n        } else {\r\n            //  check for removals from right side\r\n            if (lastSpr.x > this.viewPortSize.x) {\r\n                this.spriteOrderList.unshift(this.spriteOrderList.pop()!); //  move last element to start\r\n                lastSpr.x = firstSpr.x - lastSpr.width;\r\n            }\r\n        }\r\n        this.worldPosition = newPositionX;\r\n    };\r\n\r\n    private updatePositions(delta: number) {\r\n        // for(let i = 0; i< this.spriteBuffer.length; i++){\r\n        //     this.spriteBuffer[i].position.x += delta;\r\n        // }\r\n        for (const sb of this.spriteBuffer) {\r\n            sb.position.x += delta;\r\n        }\r\n    }\r\n}","import { KeyboardAction } from './KeyboardAction';\r\n\r\n/**\r\n *   Simple keyboard mapper.\r\n */\r\nexport class KeyboardMapper {\r\n    /**\r\n     *   Stores keyboard pressed state.\r\n     */\r\n    private keyboard: boolean[];\r\n\r\n    /**\r\n     *   Stores an array of KeyboardAction instances per Global.State. The 'state' indexer is a numeric value from the Global.State enum.\r\n     */\r\n    private stateActions: { [state: number]: KeyboardAction[] };\r\n\r\n    private ALT_KEY: number = 18;\r\n    private SHIFT_KEY: number = 16;\r\n    private CTRL_KEY: number = 17;\r\n\r\n    /**\r\n     *   Creates a new KeyboardMapper instance.\r\n     */\r\n    constructor() {\r\n        this.stateActions = {};\r\n        this.keyboard = [];\r\n        for (let i: number = 0; i < 256; i++) {\r\n            this.keyboard[i] = false;\r\n        }\r\n\r\n        document.addEventListener('keydown', this.keydown.bind(this), false);\r\n        document.addEventListener('keyup', this.keyup.bind(this), false);\r\n    }\r\n\r\n    /**\r\n     * Invokes needed action handlers based on the pressed keys.\r\n     * @remarks Only handlers assigned to the given state are processed\r\n     * @param currentState - the state for which hanlders are processed\r\n     */\r\n    public update(currentState: State) {\r\n        //  state specific handler\r\n        let actions: KeyboardAction[] = this.stateActions[currentState];\r\n        this.findHandlerAndInvoke(actions);\r\n\r\n        //  global handlers\r\n        actions = this.stateActions[State.GLOBAL];\r\n        this.findHandlerAndInvoke(actions);\r\n    }\r\n\r\n    /**\r\n     * Adds an action handler scoped to the given state.\r\n     * @remarks The handler is invoked only if the `state` is active (current)\r\n     */\r\n    public addKeyboardActionHandler = (action: KeyboardAction, state: State) => {\r\n        if (!this.stateActions[state]) {\r\n            this.stateActions[state] = [];\r\n        }\r\n        this.stateActions[state].push(action);\r\n    };\r\n\r\n    /** Checks if a key is pressed */\r\n    public isKeyDown(keyCode: number) {\r\n        return this.keyboard[keyCode];\r\n    }\r\n\r\n    /**\r\n     *   Searches for all keyboard handlers with matching current pressed key combinations and invokes them.\r\n     */\r\n    private findHandlerAndInvoke(actions: KeyboardAction[]) {\r\n        if (actions) {\r\n            const len = actions.length;\r\n            for (let i: number = 0; i < len; i++) {\r\n                const ka = actions[i];\r\n                if (\r\n                    ka &&\r\n                    ka.isAssigned() &&\r\n                    ka.handler &&\r\n                    this.keyboard[ka.key] &&\r\n                    this.keyboard[this.ALT_KEY] === ka.altKey &&\r\n                    this.keyboard[this.SHIFT_KEY] === ka.shiftKey &&\r\n                    this.keyboard[this.CTRL_KEY] === ka.ctrlKey\r\n                ) {\r\n                    ka.handler();\r\n                    if (ka.releaseKeyAfterInvoke) {\r\n                        this.keyboard[ka.key] = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private keydown(e: KeyboardEvent) {\r\n        this.keyboard[e.which] = true;\r\n    }\r\n\r\n    private keyup(e: KeyboardEvent) {\r\n        this.keyboard[e.which] = false;\r\n    }\r\n}\r\n\r\nexport enum State {\r\n    GLOBAL,\r\n    MENU,\r\n    IN_GAME,\r\n    CUSTOM1,\r\n    CUSTOM2,\r\n    CUSTOM3,\r\n    CUSTOM4,\r\n    CUSTOM5,\r\n}","import { PIXI, SceneManager, Scene, Global, SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT} from \"..\";\r\nimport { LoaderScene } from \"./LoaderScene\";\r\nimport { Quest } from '../QuestSystem/Quest';\r\n\r\nconst PRELOAD_BOOT_ASSETS = [\r\n    //  cursors\r\n    'assets/cur_default.png',\r\n    'assets/cur_hover.png',\r\n    'assets/cur_target.png',\r\n    'assets/levels.json',\r\n    'assets/quests.json'\r\n];\r\n\r\n/**\r\n * Preloads common assets, after preloading parses user state and starts preloading level assets.\r\n */\r\nexport class BootScene extends Scene {\r\n    private loadingMessage!: PIXI.Text;\r\n    private spinner!: PIXI.Sprite;    \r\n    \r\n    constructor(private sceneManager:SceneManager) {\r\n        super(\"Boot\");\r\n        this.BackGroundColor = 0;\r\n    }\r\n\r\n    public onUpdate = (dt: number)=>{\r\n        if (this.spinner) {\r\n            this.spinner.rotation += 0.05;\r\n        }\r\n    }\r\n\r\n    public onActivate = () => {\r\n        this.loadingMessage = new PIXI.Text(\"booting ...\", {\r\n             fontSize: \"36px\", \r\n             fontFamily: \"Permanent Marker\", \r\n             fill: 0x0ff00, \r\n             dropShadow: true, \r\n             stroke: 0x44ff44, \r\n             strokeThickness: 1 \r\n        });\r\n        this.loadingMessage.anchor.set(0.5, 0.5);\r\n        this.loadingMessage.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT - 80);\r\n        this.addChild(this.loadingMessage);\r\n\r\n        //------------------------------------------------------\r\n        //  get loading image and define callback on image load\r\n        //------------------------------------------------------\r\n        PIXI.Loader.shared.reset()\r\n        .add(\"assets/loading.png\")\r\n        .load(this.startPreloading);\r\n    };\r\n    \r\n    /**\r\n     *  Downloads common assets, JSON files etc.\r\n     */\r\n    private startPreloading = async () => {\r\n        \r\n        //   first add a loading spinner\r\n        var loadingTexture = PIXI.Texture.from(\"assets/loading.png\");\r\n        this.spinner = new PIXI.Sprite(loadingTexture);\r\n        this.spinner.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT);\r\n        this.spinner.anchor.set(0.5, 0.5);\r\n        this.spinner.scale.set(0.5);\r\n        this.addChild(this.spinner);\r\n        \r\n        console.log('initializing common assets preloading ...', PRELOAD_BOOT_ASSETS);\r\n        PIXI.Loader.shared\r\n            .add(PRELOAD_BOOT_ASSETS)\r\n            .load(this.onPreloadFinished); \r\n    }\r\n\r\n    private onPreloadFinished = async ()=>{\r\n        //  preload of common content is finished\r\n        \r\n        //  setup custom cursors\r\n        var defaultIcon = \"url('assets/cur_default.png'),auto\";\r\n        var hoverIcon = \"url('assets/cur_hover.png'),auto\";\r\n        var targetIcon = \"url('assets/cur_target.png') 24 24, auto\";\r\n        this.sceneManager.Renderer.plugins.interaction.cursorStyles.default = defaultIcon;\r\n        this.sceneManager.Renderer.plugins.interaction.cursorStyles.hover = hoverIcon;\r\n        this.sceneManager.Renderer.plugins.interaction.cursorStyles.target = targetIcon;\r\n        document.body.style.cursor = defaultIcon;\r\n\r\n        // save levels and quests\r\n        Global.LevelDefinitions = PIXI.Loader.shared.resources[\"assets/levels.json\"].data;\r\n        var questsObj = PIXI.Loader.shared.resources[\"assets/quests.json\"].data;\r\n        Global.LevelDefinitions.quests = questsObj.quests as Array<Quest>;\r\n        Global.LevelDefinitions.quests.forEach((q: Quest) => {\r\n            q.itemId = q.itemId || 0;\r\n            q.itemsNeeded = q.itemsNeeded || 0;\r\n            q.itemsCollected = 0;\r\n            q.rewardCoins = q.rewardCoins || 0;\r\n            q.rewardExp = q.rewardExp || 0;\r\n        });\r\n\r\n        const ls = new LoaderScene(this.sceneManager);\r\n        this.sceneManager.AddScene(ls);\r\n        this.sceneManager.ActivateScene(ls); \r\n    }\r\n}","import { Global, PIXI, Scene, SceneManager } from \"..\";\r\nimport { GetLevelAssets, getUniqueItems } from '../world/LevelHelper';\r\nimport { stats } from '../objects/PlayerStats';\r\nimport { SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT } from '../constants';\r\nimport { MasterHud } from '../objects/MasterHud';\r\nimport { MainScene } from './MainScene';\r\nimport { OptionsScene } from './OptionsScene';\r\nimport { CutScene } from './CutScene';\r\n\r\n\r\nexport class LoaderScene extends Scene {\r\n    private loadingMessage: PIXI.Text;\r\n    private spinner: PIXI.Sprite;\r\n\r\n    private readonly preloadAssets : string[] = [  \r\n        'assets/gui-atlas.json', \r\n        'assets/objects-atlas.json',\r\n        'assets/entities-atlas.json',\r\n        'assets/background-atlas.json',     \r\n    ];\r\n\r\n    constructor(private sceneManager:SceneManager) {\r\n        super(\"Loader\");\r\n        this.BackGroundColor = 0;\r\n        this.loadingMessage = new PIXI.Text(\"loading ...\", { \r\n            fontSize: 36, \r\n            fontFamily: \"Permanent Marker\", \r\n            fill: 0x0ff00, \r\n            dropShadow: true, \r\n            align: \"center\",\r\n            stroke: 0x44ff44, \r\n            strokeThickness: 1\r\n        });\r\n        this.loadingMessage.anchor.set(0.5, 0.5);\r\n        this.loadingMessage.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT - 80);\r\n        this.addChild(this.loadingMessage);\r\n\r\n        var loadingTexture = PIXI.Texture.from(\"assets/loading.png\");\r\n        this.spinner = new PIXI.Sprite(loadingTexture);\r\n        this.spinner.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT);\r\n        this.spinner.anchor.set(0.5, 0.5);\r\n        this.spinner.scale.set(0.5);\r\n        this.addChild(this.spinner); \r\n    }\r\n\r\n    public onUpdate = (dt: number)=>{\r\n        if (this.spinner) {\r\n            this.spinner.rotation += 0.05;\r\n        }\r\n    }\r\n\r\n    public onActivate = () => {   \r\n        console.log(`downloading level ${stats.currentGameLevel}...`);\r\n        let assets: string[] = GetLevelAssets(Global.LevelDefinitions, stats.currentGameLevel);\r\n        assets = assets.concat(this.preloadAssets, 'assets/font/orbitron.fnt', 'assets/font/orbitron_outline.fnt','assets/font/bauhaus.fnt');\r\n        assets = getUniqueItems(assets);\r\n        \r\n        PIXI.Loader.shared\r\n            .reset()\r\n            .add(assets)\r\n            .load(this.handleLevelLoading)\r\n            .on(\"progress\", this.onProgress);\r\n    };\r\n   \r\n    private handleLevelLoading = ()=> {        \r\n        if(!this.sceneManager.HasScene(\"Main\")){\r\n            console.log('adding scenes...');    \r\n            this.sceneManager.AddScene(new MainScene(this.sceneManager));\r\n            this.sceneManager.AddScene(new OptionsScene(this.sceneManager));\r\n            this.sceneManager.AddScene(new CutScene(this.sceneManager));\r\n            this.sceneManager.MasterHudOverlay = new MasterHud(this.sceneManager);;\r\n        }\r\n\r\n        try {\r\n            let mainScene = this.sceneManager.GetScene(\"Main\") as MainScene;\r\n            setTimeout(() => {\r\n                mainScene.startLevel();\r\n            }, 200);\r\n        } catch (e) {\r\n            console.log(\"exception: \", e);\r\n        }\r\n    }\r\n\r\n    \r\n    private onProgress = (loader: PIXI.Loader, resource: PIXI.LoaderResource) => {\r\n        var progress = loader.progress;\r\n        console.log(\"progress: \" + progress.toFixed(0) + \"%, asset: \" + resource.name);\r\n        this.loadingMessage.text = \"Loading \" + progress.toFixed(0) + \" %\";\r\n    };\r\n}","import { LevelLoader } from \"../world/LevelLoader\";\r\nimport { wp2 } from \"../world/WorldP2\";\r\nimport { Mob } from \"../mobs/Mob\";\r\nimport { stats } from '../objects/PlayerStats';\r\nimport { Global } from '..';\r\nimport { AnimatedSprite } from '../objects/AnimatedSprite';\r\nimport { AnimationSequence } from '../objects/AnimationSequence';\r\n\r\nexport class SpawnPoint {\r\n    private mobCount: number = 0;\r\n    private nextSpawn: number = 0;\r\n    private worldContainer: PIXI.Container;\r\n\r\n    constructor(public name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private area: number,\r\n        private maxMobCount: number,\r\n        private respawnSeconds: number,\r\n        private entity: any,\r\n        private active: boolean = true) {\r\n        this.nextSpawn = performance.now() / 1000;\r\n    }\r\n\r\n    public get IsActive() { return this.active; };\r\n    public set IsActive(value: boolean) { this.active = value; };\r\n\r\n    public onUpdate(dt: number) {\r\n        if (this.active && this.mobCount < this.maxMobCount) {\r\n\r\n            //  is it time to respawn?\r\n            var now = performance.now() / 1000;\r\n            if (this.nextSpawn <= now) {\r\n\r\n                if (!this.worldContainer) {\r\n                    this.worldContainer = (Global.getScm().GetScene(\"Main\") as any).worldContainer;\r\n                }\r\n                var mobBody = LevelLoader.createMob(stats.currentLevel.templates, this.entity);\r\n                let dispObj = (mobBody as any).DisplayObject as Mob;\r\n\r\n                let x = this.x + (Math.random() * this.area) - (this.area / 2);\r\n                let y = this.y;\r\n\r\n                mobBody.position = [x, y];\r\n                wp2.addBody(mobBody);\r\n\r\n                dispObj.position.set(x, y);\r\n                dispObj.visible = false;\r\n                dispObj.isLoading = true;\r\n                this.worldContainer.addChild(dispObj);\r\n\r\n                let loadSpr = new AnimatedSprite();\r\n                loadSpr.addAnimations(new AnimationSequence(\"load\", \"assets/entities-atlas.json@load.png\", [0, 1, 2, 3], 64, 64));\r\n                loadSpr.anchor.set(0.5);\r\n                loadSpr.position.set(x, y + 10);\r\n                loadSpr.play(\"load\", 4, true);\r\n                loadSpr.scale.set(1, -1);   //  the worldContainer has -y scale so we must flip it up again \r\n                this.worldContainer.addChild(loadSpr);\r\n\r\n                setTimeout(() => {\r\n                    this.worldContainer.removeChild(loadSpr);\r\n                    dispObj.isLoading = false;\r\n                    dispObj.visible = true;\r\n                }, 3000);\r\n\r\n                (dispObj as Mob).onDeath = () => {\r\n                    console.log(\"mob died\");\r\n                    this.mobCount--;\r\n                }\r\n\r\n                this.mobCount++;\r\n                this.nextSpawn = (performance.now() / 1000) + this.respawnSeconds;\r\n            }\r\n        }\r\n    }\r\n}","import { AI } from \"./AI\";\r\nimport { Mob } from \"./Mob\";\r\n\r\n/**\r\n * Can attack and turn towards player but invokes no other actions.\r\n */\r\nexport class BasicStaticAI extends AI {\r\n\r\n    constructor(mobEntity: Mob) {\r\n        super(mobEntity);\r\n    }\r\n\r\n    public canFire() {\r\n        let nowMilliseconds = performance.now();\r\n        let rnd = Math.random() * 2000;\r\n        let can = (this.lastFire + this.attackCD  + rnd <= nowMilliseconds);\r\n        if (can) {\r\n            let rnd = Math.random();\r\n            can = can && rnd > 0.3;\r\n            this.lastFire = performance.now(); //  set to prevent firing in next update if 'can' is false\r\n        }\r\n        return can;\r\n    };\r\n}","import * as Global from \"../global\";\r\nimport { Mob} from \"./Mob\";\r\nimport { AtrType, DirectionH } from '../enums';\r\n\r\n/**\r\n * Max distance at which the target can be acquired.\r\n */\r\nlet LOCK_DISTANCE = 800;\r\n\r\n/**\r\n * Max distance at which the target is tracked.\r\n */\r\nlet TRACK_DISTANCE = 1050;\r\n\r\n/**\r\n * Base for all mob AI. Provides low level AI functions.\r\n */\r\nexport class AI {\r\n\r\n    /**\r\n     * True if the AI has a 'target lock' on the player.\r\n     */\r\n    protected hasTarget: boolean;\r\n\r\n    /**\r\n     * Distance from player.\r\n     */\r\n    protected targetDistance: number;\r\n\r\n    protected lastFire: number = 0;//performance.now() + Math.random() * 10;    //  so that the attack is not triggered at init time\r\n\r\n    protected attackCD: number;\r\n\r\n    constructor(protected mobEntity: Mob) {\r\n        this.attackCD = mobEntity.attributes[AtrType.AtkCD];\r\n    }\r\n\r\n    private calcDistance() {\r\n        let dx = Global.position.x - this.mobEntity.x;\r\n        let dy = Global.position.y - this.mobEntity.y;\r\n        this.targetDistance = Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    private turnTowardsTarget() {\r\n        //  negative left, positive right\r\n        let dir = Global.position.x - this.mobEntity.x;\r\n\r\n        if (dir < 0 && this.mobEntity.direction != DirectionH.Left) {\r\n            this.mobEntity.direction = DirectionH.Left;\r\n        } else if (dir > 0 && this.mobEntity.direction != DirectionH.Right) {\r\n            this.mobEntity.direction = DirectionH.Right;\r\n        }\r\n    }\r\n\r\n    public canFire() {\r\n        let nowMilliseconds = performance.now();\r\n        return (this.lastFire + this.attackCD <= nowMilliseconds);\r\n    };\r\n\r\n    public onUpdate = (dt: number) => {\r\n        this.calcDistance();\r\n\r\n        //  TODO: implement visibility check\r\n        if (this.targetDistance < TRACK_DISTANCE) {\r\n            this.turnTowardsTarget();\r\n        }\r\n\r\n        if (this.targetDistance < LOCK_DISTANCE) {\r\n            this.hasTarget = true;\r\n\r\n            //  check attack CD            \r\n            if (this.canFire()) {\r\n                this.mobEntity.attack();\r\n                this.lastFire = performance.now();\r\n            }\r\n        } else {\r\n            this.hasTarget = false;\r\n        }\r\n    }\r\n}","import { PIXI, SceneManager, SpriteButton, SCENE_WIDTH } from \"..\";\r\n\r\nconst BTN_X = SCENE_WIDTH - 48;\r\nconst BTN_Y = 4;\r\nconst BTN_SCALE = 1.0;\r\n\r\n/**\r\n * Implements options and full screen togle buttons.\r\n */\r\nexport class MasterHud extends PIXI.Container {\r\n    constructor(private sceneManager:SceneManager){\r\n        super();\r\n\r\n        //----------------------------\r\n        //  full screen toggler\r\n        //----------------------------\r\n        [\"\", \"webkit\", \"moz\", \"ms\"].forEach(\r\n            prefix => document.addEventListener(prefix + \"fullscreenchange\", (event) => {\r\n                if (this.isFullScreen) {\r\n                    btnFullScreen.setTexture(\"assets/gui-atlas.json@gui_fs_exit.png\");\r\n                } else {\r\n                    btnFullScreen.setTexture(\"assets/gui-atlas.json@gui_fs_enter.png\");\r\n                }\r\n                btnFullScreen.scale.set(BTN_SCALE);\r\n            }, false)\r\n        );\r\n\r\n        //--------------------------------\r\n        //  add full screen, options and \r\n        //  back buttons\r\n        //--------------------------------       \r\n        var btnFullScreen = new SpriteButton(\"assets/gui-atlas.json@gui_fs_enter.png\", BTN_X, BTN_Y);\r\n        btnFullScreen.onClick = () => this.toggleFullScreen();\r\n        btnFullScreen.scale.set(BTN_SCALE);\r\n        this.addChild(btnFullScreen);\r\n\r\n        var btnOptions = new SpriteButton(\"assets/gui-atlas.json@gui_options.png\", BTN_X - 48, BTN_Y);\r\n        btnOptions.onClick = () => this.sceneManager.ActivateScene(\"Options\");\r\n        btnOptions.name = \"BTN_OPTIONS\";\r\n        btnOptions.scale.set(BTN_SCALE);\r\n        this.addChild(btnOptions);\r\n    }   \r\n\r\n    private get isFullScreen(): boolean {\r\n        var doc: any = document;\r\n        return !(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement);\r\n    }\r\n    private toggleFullScreen() {\r\n        var doc: any = document;\r\n        var docElm: any = document.documentElement;\r\n\r\n        var requestFullScreen = docElm.requestFullscreen || docElm.mozRequestFullScreen || docElm.webkitRequestFullScreen || docElm.msRequestFullscreen;\r\n        var exitFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;\r\n\r\n        if (!this.isFullScreen) {\r\n            requestFullScreen.call(docElm);\r\n        } else {\r\n            exitFullScreen.call(doc);\r\n        }\r\n    } \r\n}","import * as p2 from 'p2';\r\nimport { PIXI, TWEEN, SceneManager, Scene, Parallax, Global } from \"..\";\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { HeroCharacter } from '../objects/HeroCharacter';\r\nimport { StatsHud } from '../objects/StatsHud';\r\nimport { stats } from '../objects/PlayerStats';\r\nimport { Bullet } from '../objects/Bullet';\r\nimport { BURN_TOPIC, IBurnChangeEvent, GROUND_SHAKE, eventEmitter } from '../events';\r\nimport { SCENE_HEIGHT, SCENE_HALF_WIDTH, SCENE_BACKCOLOR, MSG_COIN_STYLE, MSG_WARN_STYLE, ANIMATION_FPS_SLOW } from '../constants';\r\nimport { Lava } from '../objects/Lava';\r\nimport { LevelLoader } from '../world/LevelLoader';\r\nimport { Platform } from '../objects/Platform';\r\nimport { Bumper } from '../objects/Bumper';\r\nimport { snd } from '../world/SoundMan';\r\nimport { CutScene } from './CutScene';\r\nimport { QuestManager } from '../questSystem/QuestManager';\r\nimport { StatType, DamageType } from '../enums';\r\n\r\nexport class MainScene extends Scene {\r\n    private worldContainer: PIXI.Container;\r\n    private hero: HeroCharacter;\r\n    private questMngr : QuestManager;\r\n    private hud : StatsHud;\r\n\r\n\r\n    private shakeDuration: number = 0;\r\n    private shakeEnd: number = 0;\r\n    private nextShake: number = 0;\r\n    private magnitude: number = 0;\r\n    private shakeX: number;\r\n    private shakeY: number;\r\n    private readonly SHAKE_COUNT = 15;\r\n\r\n    constructor(private sceneManager: SceneManager) {\r\n        super(\"Main\");\r\n        this.BackGroundColor = SCENE_BACKCOLOR;\r\n        this.setup();       \r\n    }\r\n\r\n    public onUpdate(dt: number, timestamp: number) {\r\n        //-------------------------------------------\r\n        //  update world & world container position\r\n        //-------------------------------------------        \r\n        wp2.update(dt);\r\n        this.worldContainer.x = (SCENE_HALF_WIDTH - this.hero.x);\r\n        this.worldContainer.y = (SCENE_HEIGHT - 70);\r\n        \r\n        TWEEN.update();\r\n\r\n        //-------------------------------------------\r\n        //  update parallax\r\n        //-------------------------------------------\r\n        stats.currentLevel.parallax.forEach(p => {\r\n            p.SetViewPortX(Global.position.x);\r\n            p.position.x = Global.position.x - SCENE_HALF_WIDTH;\r\n        });\r\n\r\n        //-------------------------------------------\r\n        //  update entities position\r\n        //-------------------------------------------\r\n        var bodies = wp2.bodies;\r\n        for (var i = 0, len = bodies.length; i < len; i++) {\r\n            let body = bodies[i] as any;\r\n            let displayObject: PIXI.DisplayObject = (body as any).DisplayObject as PIXI.DisplayObject;\r\n            if (displayObject && displayObject.visible && body.type !== p2.Body.STATIC) {\r\n                displayObject.position.set(Math.floor(body.interpolatedPosition[0]), Math.floor(body.interpolatedPosition[1]));\r\n                displayObject.rotation = body.interpolatedAngle;\r\n            }            \r\n            \r\n            if (body.Trigger && body.Trigger.type === \"distance\") {\r\n                if (this.questMngr.canActivateTrigger(body.Trigger)) {\r\n                    let x = this.hero.position.x - body.position[0];\r\n                    let y = this.hero.position.y - body.position[1];\r\n                    let distance = Math.sqrt(x * x + y * y);\r\n                    if (body.Trigger.distance >= distance) {\r\n                        this.questMngr.handleTriggerEvent(body);\r\n                    }\r\n                }\r\n            }            \r\n        }\r\n\r\n        //-------------------------------------------\r\n        //  collisions with collectible items\r\n        //-------------------------------------------\r\n        for (var i = 0, len = wp2.playerContacts.length; i < len; i++) {\r\n            let body: any = wp2.playerContacts[i];\r\n            if (body.DisplayObject && body.DisplayObject.interactionType) {\r\n                this.handleInteractiveCollision(body);\r\n            }\r\n            \r\n            if (body.Trigger && body.Trigger.type === \"collision\") {\r\n                this.questMngr.handleTriggerEvent(body);\r\n            }            \r\n        }\r\n\r\n        //-------------------------------------------\r\n        //  invoke update on each updateable\r\n        //-------------------------------------------\r\n        for (var i = 0, len = this.worldContainer.children.length; i < len; i++) {\r\n            let child: any = this.worldContainer.children[i];\r\n            if (child && child.onUpdate) {\r\n                child.onUpdate(dt);\r\n            }\r\n        };\r\n\r\n        //-------------------------------------------\r\n        //  Spawn points\r\n        //-------------------------------------------\r\n        for (var i = 0, len = stats.currentLevel.spawnPoints.length; i < len; i++) {\r\n            stats.currentLevel.spawnPoints[i].onUpdate(dt);\r\n        }\r\n\r\n        this.hud.onUpdate(dt);\r\n        stats.onUpdate(dt);\r\n\r\n        var now = performance.now();\r\n\r\n        //-------------------------------------------\r\n        //  check if player is dead\r\n        //-------------------------------------------\r\n        if (stats.getStat(StatType.HP) <= 0) {\r\n            this.IsHeroInteractive = false;\r\n            this.hero.visible = false;\r\n            var cutScene = this.sceneManager.GetScene(\"CutScene\") as CutScene;\r\n            var backGroundTexture = this.sceneManager.CaptureScene();\r\n            cutScene.SetBackGround(backGroundTexture, this.scale);\r\n            cutScene.DeathScene = true;\r\n            this.sceneManager.ActivateScene(cutScene);\r\n        }  else if (this.shakeEnd >= now) {\r\n            if (this.nextShake <= now) {\r\n                //  original start position\r\n                let x = (SCENE_HALF_WIDTH - this.hero.x);\r\n                let y = (SCENE_HEIGHT - 70);\r\n\r\n                this.shakeX = x + this.randomRange(-this.magnitude / 2, this.magnitude / 2);\r\n                this.shakeY = y + this.randomRange(-this.magnitude, this.magnitude);\r\n                //console.log(\"shake: \" + this.shakeX + \", \" + this.shakeY, this.magnitude, this.shakeEnd);\r\n\r\n                //  reduce for next shake\r\n                this.magnitude -= this.magnitude / this.SHAKE_COUNT;\r\n                this.nextShake = now + this.shakeDuration;\r\n            }\r\n\r\n            this.worldContainer.x = this.shakeX;\r\n            this.worldContainer.y = this.shakeY;\r\n        }\r\n    }\r\n\r\n    private setup() {\r\n        this.worldContainer = new PIXI.Container();\r\n        this.worldContainer.scale.y = -1;\r\n        this.addChild(this.worldContainer);\r\n        Global.worldContainer = this.worldContainer;\r\n\r\n        //-----------------------------\r\n        //  setup hero \r\n        //-----------------------------     \r\n        this.hero = new HeroCharacter(this.worldContainer);\r\n        this.hero.name = \"hero\";\r\n        this.hero.x = SCENE_HALF_WIDTH;\r\n        this.worldContainer.addChild(this.hero);\r\n        this.hero.play(\"idle\", ANIMATION_FPS_SLOW);\r\n\r\n        //--------------------------------------\r\n        //  setup hud's\r\n        //--------------------------------------\r\n        this.hud = new StatsHud();\r\n        this.HudOverlay = this.hud;\r\n\r\n        //--------------------------------------\r\n        //  register custom entity factories\r\n        //--------------------------------------\r\n        LevelLoader.registerFactory(\"Lava\", (def)=> new Lava(def.texture as string));\r\n        LevelLoader.registerFactory(\"Platform\", (def)=> {            \r\n            if (typeof def.texture === \"string\") {\r\n                return new Platform(def.tilesX || 1, 1, [def.texture]);\r\n            } else {\r\n                return new Platform(def.tilesX || 1, def.tilesY || 1, def.texture);\r\n            }\r\n        });\r\n        LevelLoader.registerFactory(\"Bumper\", (def)=> new Bumper());\r\n\r\n        this.questMngr = new QuestManager(this);\r\n        eventEmitter.on(BURN_TOPIC, (event: IBurnChangeEvent) => event.isBurning ? snd.burn():snd.burnStop() );  \r\n        eventEmitter.on(GROUND_SHAKE, this.startGroundShake);\r\n    }\r\n\r\n    public startLevel(){\r\n        this.clearLevel();\r\n\r\n        //--------------------------------------\r\n        //  test level loading\r\n        //  TODO: this should be via user save file\r\n        //--------------------------------------\r\n        stats.loadLevel();\r\n        snd.playTrack(stats.currentLevel.audioTrack || 0);\r\n        stats.currentLevel.parallax.forEach((plx, idx) => {\r\n            this.worldContainer.addChildAt(plx, idx);\r\n            plx.SetViewPortX(stats.currentLevel.start[0]);\r\n        });\r\n\r\n        //--------------------------------------\r\n        //  add all objects from level to scene\r\n        //--------------------------------------\r\n        stats.currentLevel.entities.forEach((body: any) => {\r\n            this.worldContainer.addChild(body.DisplayObject);\r\n\r\n            //  if entity is a simple sprite it has a \"fake\" body  \r\n            //  without any shapes, so no need to add it to world\r\n            if (body.shapes && body.shapes.length > 0) {\r\n                wp2.addBody(body);\r\n            }\r\n        });\r\n\r\n        //  set start for player\r\n        wp2.playerBody.position[0] = stats.currentLevel.start[0];\r\n        wp2.playerBody.position[1] = stats.currentLevel.start[1];\r\n        \r\n        this.questMngr.reset();\r\n        this.hero.visible = true;\r\n        this.IsHeroInteractive = true;\r\n        this.hud.visible = true;\r\n        this.sceneManager.ActivateScene(this);\r\n    }\r\n\r\n    /**\r\n     * Sets player interactivity.\r\n     */\r\n    public set IsHeroInteractive(value: boolean) {\r\n        if (this.hero.IsInteractive !== value) {\r\n            this.hero.IsInteractive = value;\r\n            if (!this.hero.IsInteractive) {\r\n                this.hero.play(\"idle\", ANIMATION_FPS_SLOW);\r\n                snd.idle();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts an animation tween and removes the display object & body from scene.\r\n     * @param dispObj\r\n     */\r\n    private collectObject(body): void {\r\n        var dispObj: PIXI.DisplayObject = body.DisplayObject as PIXI.DisplayObject;\r\n\r\n        var orgScaleX = dispObj.scale.x;\r\n        var upX = dispObj.position.x + 45;\r\n        var upY = dispObj.position.y + 160;\r\n\r\n        var endX = dispObj.position.x - SCENE_HALF_WIDTH;\r\n        var endY = SCENE_HEIGHT;\r\n\r\n        var moveUp = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: upX, y: upY }, 150);\r\n\r\n        var scale = new TWEEN.Tween(dispObj.scale)\r\n            .to({ x: orgScaleX + 0.5, y: orgScaleX + 0.5 }, 500)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var moveAway = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: endX, y: endY }, 2000)\r\n            .easing(TWEEN.Easing.Back.In)\r\n            .onComplete(() => this.worldContainer.removeChild(dispObj));\r\n\r\n        moveUp.chain(scale, moveAway).start();\r\n        this.removeEntity(body);\r\n    }\r\n\r\n    /**\r\n     * Handles player collision with interactive objects.\r\n     * @param body\r\n     */\r\n    private handleInteractiveCollision(body: any): void {\r\n        var dispObj: PIXI.DisplayObject = body.DisplayObject as PIXI.DisplayObject;\r\n        let interactionType: number = body.DisplayObject.interactionType;\r\n        switch (interactionType) {\r\n            case 1: //  small coin\r\n                stats.increaseStat(StatType.Coins, 1);\r\n                this.collectObject(body);\r\n                this.hud.addInfoMessage(dispObj.position, \"+1 coin\", MSG_COIN_STYLE, -100);\r\n                snd.coin();\r\n                break;\r\n\r\n            case 2: //  coin\r\n                stats.increaseStat(StatType.Coins, 10);\r\n                this.collectObject(body);\r\n                this.hud.addInfoMessage(dispObj.position, \"+10 coins\", MSG_COIN_STYLE, -100);\r\n                snd.coin();\r\n                break;\r\n\r\n            case 3: //  blue gem\r\n                stats.increaseStat(StatType.Coins, 100);\r\n                this.collectObject(body);\r\n                this.hud.addInfoMessage(dispObj.position, \"+100 coins\", MSG_COIN_STYLE, -100);\r\n                snd.gem();\r\n                break;\r\n\r\n            //------------------------------------\r\n            //  QUEST ITEMS 200-999\r\n            //------------------------------------\r\n\r\n            case 201:  //  kendo knowledge\r\n                this.hud.addInfoMessage(dispObj.position, \"Kendo knowledge acquired!\", MSG_COIN_STYLE);\r\n                this.collectObject(body);\r\n                snd.questItem();\r\n                this.questMngr.acquireItem(201);\r\n                break;\r\n\r\n            case 202:  //  KI\r\n                this.hud.addInfoMessage(dispObj.position, \"1 Ki acquired!\", MSG_COIN_STYLE);\r\n                this.collectObject(body);\r\n                snd.questItem();\r\n                this.questMngr.acquireItem(202);\r\n                //  TODO: quest manager\r\n                break;\r\n\r\n            //------------------------------------\r\n            //  OBJECTS DOING DAMAGE 1000-1999\r\n            //------------------------------------\r\n            case DamageType.LavaBorder:  //  border lava   \r\n                {\r\n                    let now = performance.now() / 1000;\r\n                    if (!stats.buffs[DamageType.LavaBorder] || stats.buffs[DamageType.LavaBorder] < now) {\r\n                        this.hud.addInfoMessage(dispObj.position, \"Burning\", MSG_WARN_STYLE, 100);\r\n                    }\r\n                    stats.buffs[DamageType.LavaBorder] = this.secondsFromNow(1);\r\n                }\r\n                break;\r\n            case DamageType.Lava:  //  lava\r\n                {\r\n                    let now = performance.now() / 1000;\r\n                    if (!stats.buffs[DamageType.Lava] || stats.buffs[DamageType.Lava] < now) {\r\n                        this.hud.addInfoMessage(dispObj.position, \"Burning\", MSG_WARN_STYLE, 100);\r\n                    }\r\n                    stats.buffs[DamageType.Lava] = this.secondsFromNow(4);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper that returns time tick value with the given seconds added.\r\n     * @param seconds\r\n     */\r\n    private secondsFromNow(seconds: number): number {\r\n        var now = performance.now() / 1000;\r\n        now += seconds;\r\n        return now;\r\n    }    \r\n\r\n    /**\r\n     * Removes an entity from the p2 world and sets its DisplayObject to null.\r\n     * If the removeDisplayObject is true the display object will be also removed from the worldContainer.\r\n     *\r\n     * @param body\r\n     * @param removeDisplayObject\r\n     */\r\n    public removeEntity(body: p2.Body, removeDisplayObject: boolean = false): void {\r\n        wp2.removeBody(body);\r\n        if (removeDisplayObject) {\r\n            this.worldContainer.removeChild((body as any).DisplayObject);\r\n        }\r\n        (body as any).DisplayObject = null;\r\n    }\r\n\r\n    private clearLevel() {\r\n        if (stats.currentLevel) {\r\n            stats.currentLevel.parallax.forEach((plx: Parallax, idx: number) => {\r\n                this.worldContainer.removeChild(plx);\r\n            });\r\n            stats.currentLevel.entities.forEach((body: any) => {\r\n                if (body !== wp2.playerBody) {\r\n                    this.worldContainer.removeChild(body.DisplayObject);\r\n                    wp2.removeBody(body);\r\n                    body.DisplayObject = null;\r\n                }\r\n            });\r\n\r\n            //  now remove all other display objects except hero\r\n            var all = this.worldContainer.children.filter((c: PIXI.DisplayObject) => c.name !== \"hero\");\r\n            all.forEach((child: any) => {\r\n                this.worldContainer.removeChild(child);\r\n            });\r\n            wp2.clearLevel();\r\n            Bullet.reset();\r\n        }\r\n    }\r\n\r\n    private randomRange(min: number, max: number) {\r\n        return min + (Math.random() * (max - min));\r\n    }\r\n\r\n    private startGroundShake = (event: {milliSeconds: number, magnitudeInPixels: number})=> {\r\n        this.shakeEnd = performance.now() + event.milliSeconds;\r\n        this.magnitude = event.magnitudeInPixels;\r\n        this.shakeDuration = event.milliSeconds / this.SHAKE_COUNT;\r\n    }\r\n}","import * as particles from \"pixi-particles\";\r\n\r\nimport { createParticleEmitter } from '../global';\r\nimport { ANIMATION_FPS_SLOW, ANIMATION_FPS_NORMAL, Global, TWEEN } from '..';\r\nimport { MOVE_TOPIC, GROUND_SHAKE, eventEmitter } from '../events';\r\nimport { MovementController, MovementState } from './MovementController';\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { stats } from './PlayerStats';\r\nimport { Mob } from '../mobs/Mob';\r\nimport { LevelLoader } from '../world/LevelLoader';\r\nimport { IInteractionType } from '../world/LevelInterfaces';\r\nimport { snd } from '../world/SoundMan';\r\nimport { Bullet } from './Bullet';\r\nimport { StatType, AtrType } from '../enums';\r\nimport { AnimatedSprite } from './AnimatedSprite';\r\nimport { TextureLoader } from '../utility/TextureLoader';\r\nimport { AnimationSequence } from './AnimationSequence';\r\n\r\nconst HERO_FRAME_SIZE: number = 64;\r\n\r\nexport class HeroCharacter extends AnimatedSprite {\r\n    private emitterPixies: particles.Emitter;\r\n    private emitterBurn: particles.Emitter;\r\n    private movementCtrl: MovementController;\r\n    private idleAnimationTimeoutHandle: any;\r\n\r\n    constructor(private container: PIXI.Container) {\r\n        super();\r\n        \r\n        this.movementCtrl = new MovementController(wp2);\r\n        wp2.on(\"playerContact\", this.onPlayerContact, this);\r\n        wp2.on(\"bulletContact\", this.onBulletContact, this);\r\n\r\n        var cfg = {     \r\n            alpha: {\r\n                start: 0.7,\r\n                end: 0\r\n            },\r\n            blendMode: \"normal\",\r\n            frequency: 0.01,\r\n            startRotation: {\r\n                min: 265,\r\n                max: 275\r\n            },\r\n            color: {\r\n                start: \"#ffffff\",\r\n                end: \"#ff5050\"\r\n            },\r\n            speed: {\r\n                start: 1,\r\n                end: 0.5,\r\n                minimumSpeedMultiplier: 1\r\n            },\r\n            scale: {\r\n                start: 0.2,\r\n                end: 0.6\r\n            },\r\n            maxParticles: 20,\r\n            lifetime: {\r\n                min: 0.25,\r\n                max: 0.75\r\n            },\r\n            spawnType: \"circle\",\r\n            spawnCircle: {\r\n                x: 0,\r\n                y: HERO_FRAME_SIZE-25,\r\n                r: 25\r\n            }\r\n        };\r\n        //    attached to hero sprite\r\n        this.emitterBurn = createParticleEmitter(this, [TextureLoader.Get(\"assets/entities-atlas.json@flame.png\")], cfg);  \r\n        //   attached to container since it must emit outside hero sprite\r\n        this.emitterPixies = createParticleEmitter(container, [TextureLoader.Get(\"assets/objects-atlas.json@star.png\")]);  \r\n\r\n        const asset = \"assets/objects-atlas.json@hero.png\";\r\n        this.addAnimations(new AnimationSequence(\"right\", asset, [18, 19, 20, 21, 22, 23], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"left\", asset, [12, 13, 14, 15, 16, 17], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpleft\", asset, [24, 25, 26, 27, 28, 29], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpright\", asset, [30, 31, 32, 33, 34, 35], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpup\", asset, [1, 3, 4, 6], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"idle\", asset, [1, 1, 0, 1, 2, 3, , 4, 5, 13, 12, 6, 7, 11, 18, 19, 0], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n\r\n        this.addAnimations(new AnimationSequence(\"jumpdownleft\", asset, [36, 37, 38], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpdownright\", asset, [39, 40, 41], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.addAnimations(new AnimationSequence(\"jumpdown\", asset, [42, 43, 44], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n        this.anchor.set(0.5, 0.58);\r\n        this.scale.y *= -1; //  the worldContainer has -y scale so we must flip it up again \r\n        eventEmitter.on(MOVE_TOPIC, this.onPlayerMove);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns if the player can interact via controls.\r\n     */\r\n    public get IsInteractive(): boolean {\r\n        return this.movementCtrl.isInteractive;\r\n    }\r\n    \r\n    /**\r\n     * Sets if the player can interact via controls.\r\n     */\r\n    public set IsInteractive(newValue: boolean) {\r\n        this.movementCtrl.isInteractive = newValue;\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * Checks movementCtrl.MovementState and updates pixi dust emitter and consumption.\r\n     * @param dt elapsed time in milliseconds\r\n     */\r\n    public onUpdate = (dt: number) => {\r\n        this.position.x = Global.position.x;\r\n        this.position.y = Global.position.y;\r\n\r\n        if (this.IsInteractive) {\r\n            this.movementCtrl.update(dt);\r\n        }\r\n\r\n        switch (this.movementCtrl.MovementState) {\r\n            case MovementState.Idle:\r\n                this.emitterPixies.emit = false;\r\n                break;\r\n            case MovementState.Left:\r\n            case MovementState.JumpLeft:\r\n                this.emitterPixies.emit = this.movementCtrl.IsRunning;\r\n                this.emitterPixies.minStartRotation = -25;\r\n                this.emitterPixies.maxStartRotation = 25;\r\n                break;\r\n            case MovementState.Right:\r\n            case MovementState.JumpRight:\r\n                this.emitterPixies.emit = this.movementCtrl.IsRunning;\r\n                this.emitterPixies.minStartRotation = 155;\r\n                this.emitterPixies.maxStartRotation = 205;\r\n                break;\r\n\r\n            case MovementState.JumpUp:\r\n                this.emitterPixies.emit = this.movementCtrl.IsRunning;\r\n                this.emitterPixies.minStartRotation = 245;\r\n                this.emitterPixies.maxStartRotation = 295;\r\n                break;\r\n        }\r\n        this.emitterPixies.update(dt * 0.001);\r\n        this.emitterPixies.updateOwnerPos(this.position.x, this.position.y);\r\n        this.emitterBurn.update(dt * 0.001);\r\n\r\n        //--------------------------\r\n        //  check if running\r\n        //--------------------------\r\n        if (this.movementCtrl.IsRunning && this.movementCtrl.MovementState !== MovementState.Idle) {\r\n            stats.increaseStat(StatType.Dust, -dt * 0.005);   //  5/sec\r\n            let angle = 8;\r\n            let degree = Math.PI * angle / 180;\r\n            this.rotation = (this.movementCtrl.MovementState === MovementState.Left) ? degree : -degree;\r\n        } else {\r\n            this.rotation = 0;\r\n        }\r\n        this.emitterBurn.emit = stats.isBurning;\r\n        super.onUpdate(dt);        \r\n    };\r\n\r\n    private onPlayerMove = (event: any) => {\r\n        var state: MovementState = event.newState as MovementState;\r\n        var fps = event.isRunning ? ANIMATION_FPS_NORMAL * 1.6 : ANIMATION_FPS_NORMAL;\r\n        switch (state) {\r\n            case MovementState.Idle:\r\n                if(this.idleAnimationTimeoutHandle) clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.idleAnimationTimeoutHandle = setTimeout(() => {\r\n                    this.play(\"idle\", ANIMATION_FPS_SLOW);\r\n                    snd.idle();\r\n                }, 300);\r\n                break;\r\n            case MovementState.Left:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"left\", fps);\r\n                snd.walk(event.isRunning);\r\n                break;\r\n            case MovementState.Right:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"right\", fps);\r\n                snd.walk(event.isRunning);\r\n                break;\r\n            case MovementState.JumpLeft:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpleft\", fps);\r\n                snd.jump();\r\n                break;\r\n            case MovementState.JumpRight:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpright\", fps);\r\n                snd.jump();\r\n                break;\r\n            case MovementState.JumpUp:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpup\", fps);\r\n                snd.jump();\r\n                break;\r\n            case MovementState.JumpDownLeft:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpdownleft\", fps, false);\r\n                snd.jumpAttack();\r\n                break;\r\n            case MovementState.JumpDownRight:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpdownright\", fps, false);\r\n                snd.jumpAttack();\r\n                break;\r\n            case MovementState.JumpDown:\r\n                clearTimeout(this.idleAnimationTimeoutHandle);\r\n                this.play(\"jumpdown\", fps, false);\r\n                snd.jumpAttack();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the player has jumped on something with a high velocity.\r\n     * Adds smoke for ground contacts and handles mob collision for npc's.\r\n     *\r\n     * @param event\r\n     */\r\n    private onPlayerContact(event: any): void {\r\n        const SND_TRESHOLD_VELOCITY: number = 400;\r\n        const SMOKE_VELOCITY: number = 450;\r\n        const ATTACK_VELOCITY: number = 505;\r\n\r\n        let body: p2.Body = event.body as p2.Body;\r\n        var mob: Mob = event.body.DisplayObject as Mob;\r\n\r\n        let verticalVelocity = Math.abs(event.velocity[1]);\r\n       \r\n        if (verticalVelocity > ATTACK_VELOCITY) {\r\n            //console.log(\"Vert velocity: \" + verticalVelocity);\r\n            //  check collision vs mobs\r\n            if (mob instanceof Mob) {\r\n                if (!mob.isLoading) {\r\n                    this.handleMobInteraction(mob, body);\r\n                }\r\n            }\r\n\r\n            var movementState = this.movementCtrl.MovementState;\r\n            if (movementState === MovementState.JumpDown || \r\n                movementState === MovementState.JumpDownLeft ||\r\n                movementState === MovementState.JumpDownRight\r\n            ) {\r\n                snd.jumpContact();\r\n                eventEmitter.emit(GROUND_SHAKE, {milliSeconds: 600, magnitudeInPixels: 9});\r\n                return;\r\n            }\r\n        } \r\n        \r\n        if (verticalVelocity > SMOKE_VELOCITY) {\r\n            console.log(\"Vert velocity: \" + verticalVelocity);\r\n            var smoke: AnimatedSprite = new AnimatedSprite();\r\n            smoke.addAnimations(new AnimationSequence(\"smoke\", \"assets/entities-atlas.json@jump_smoke.png\",\r\n                [0, 1, 2, 3, 4, 5], HERO_FRAME_SIZE, HERO_FRAME_SIZE));\r\n            smoke.anchor.set(0.5);\r\n            smoke.pivot.set(0.5);\r\n            smoke.x = this.x;\r\n            smoke.y = this.y - 25;\r\n            smoke.alpha = 0.7;\r\n            smoke.rotation = Math.random() * Math.PI;\r\n            this.container.addChild(smoke);\r\n            smoke.onComplete = () => this.container.removeChild(smoke);\r\n            smoke.play(\"smoke\", 6, false);\r\n        }\r\n        \r\n        if(verticalVelocity > SND_TRESHOLD_VELOCITY){\r\n            snd.jumpContact();\r\n            console.log(\"velocity: \" + event.velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles bullets hitting the player or obstacle.\r\n     *\r\n     * @param event\r\n     */\r\n    private onBulletContact(event: any): void {\r\n        let bullet: Bullet = event.bulletBody.DisplayObject as Bullet;\r\n        if (!bullet.IsDead) {\r\n            if (event.playerHit) {\r\n                snd.hitPain();\r\n                //this.hud.addInfoMessage(this.position, `${-bullet.damage} HP`, MSG_HP_STYLE, 50);\r\n                stats.increaseStat(StatType.HP, -bullet.damage);\r\n            } else {\r\n\r\n                //  TODO: recycle explode animations\r\n                var explode: AnimatedSprite = new AnimatedSprite();\r\n                explode.addAnimations(new AnimationSequence(\"exp\",\r\n                    \"assets/entities-atlas.json@slime_atk_exp.png\",\r\n                    [0, 1, 2, 3, 4, 5], 32, 32)\r\n                );\r\n                explode.anchor.set(0.5);\r\n                explode.pivot.set(0.5);\r\n                explode.x = bullet.x;\r\n                explode.y = bullet.y;\r\n                explode.alpha = 0.7;\r\n                explode.rotation = Math.random() * Math.PI;\r\n                this.container.addChild(explode);\r\n                explode.onComplete = () => this.container.removeChild(explode);\r\n                explode.play(\"exp\", 10, false);\r\n                snd.bulletHitWall();\r\n            }\r\n            bullet.IsDead = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles interaction with mobs (mob kill).\r\n     * @param mob\r\n     * @param body\r\n     */\r\n    private handleMobInteraction(mob: Mob, body: p2.Body) {\r\n        let dispObj = (body as any).DisplayObject as PIXI.DisplayObject;\r\n        let it = dispObj as IInteractionType;\r\n\r\n        //  generate drop\r\n        if (it.drop) {\r\n            let isDropping = Math.random() <= it.drop.chance;\r\n            if (isDropping) {\r\n                var dropItemBody = LevelLoader.createEntity(stats.currentLevel.templates, it.drop.entity);\r\n                this.addDropItem(mob, dropItemBody);\r\n            }\r\n            \r\n        }\r\n\r\n        this.removeEntity(body);\r\n        mob.squish(() => this.container.removeChild(dispObj));\r\n        \r\n\r\n        //  add exp       \r\n        var exp = mob.attributes[AtrType.HP] / 2;\r\n        stats.increaseStat(StatType.TotalExp, exp);\r\n    }\r\n\r\n    /**\r\n     * Adds an drop item to the scene with a tween animation.\r\n     * @param dispObj\r\n     */\r\n    private addDropItem(mob: Mob, itemBody: p2.Body): void {\r\n        let dispObj = (itemBody as any).DisplayObject as PIXI.DisplayObject;\r\n        dispObj.x = mob.x;\r\n        dispObj.y = mob.y + 40;\r\n        this.container.addChild(dispObj);\r\n\r\n        //  tween from mob position to random position near hero\r\n        var upX = dispObj.position.x + 75;\r\n        var upY = dispObj.position.y + 200;\r\n        var moveUp = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: upX, y: upY }, 400)\r\n            .onComplete(() => {\r\n                itemBody.position = [dispObj.position.x, dispObj.position.y];\r\n                wp2.addBody(itemBody);\r\n            });\r\n\r\n\r\n        var orgScaleX = dispObj.scale.x;\r\n        var orgScaleY = dispObj.scale.y;\r\n        var scale = new TWEEN.Tween(dispObj.scale)\r\n            .to({ x: orgScaleX + 0.3, y: orgScaleX + 0.3 }, 350)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var endX = this.x;\r\n        var endY = this.y + 8;\r\n        var moveAway = new TWEEN.Tween(dispObj.position)\r\n            .to({ x: endX, y: endY }, 350)\r\n            .easing(TWEEN.Easing.Back.In)\r\n            .onUpdate((pos: PIXI.Point) => {\r\n                itemBody.position = [dispObj.position.x, dispObj.position.y];\r\n            })\r\n            .onComplete(() => dispObj.scale.set(orgScaleX, orgScaleY));\r\n\r\n        moveUp.chain(scale, moveAway).start();\r\n    }\r\n\r\n    /**\r\n     * Removes an entity from the p2 world and sets its DisplayObject to null.\r\n     * If the removeDisplayObject is true the display object will be also removed from the worldContainer\r\n     *\r\n     * @param body\r\n     * @param removeDisplayObject\r\n     */\r\n    public removeEntity(body: p2.Body, removeDisplayObject: boolean = false): void {\r\n        wp2.removeBody(body);\r\n        if (removeDisplayObject) {\r\n            this.container.removeChild((body as any).DisplayObject);\r\n        }\r\n        (body as any).DisplayObject = null;\r\n    }\r\n}","import { KeyboardMapper } from '..';\r\nimport { WorldP2 } from '../world/WorldP2';\r\nimport { stats } from './PlayerStats';\r\nimport { eventEmitter, MOVE_TOPIC } from '../events';\r\nimport { StatType } from '../enums';\r\n\r\nexport class MovementController {\r\n    private readonly VELOCITY = 150;\r\n    private readonly JUMP_FORCE = 17000;\r\n    private readonly JUMP_ATTACK_FORCE = -17000;\r\n\r\n    private readonly JUMP_COOLDOWN = 500;\r\n    private readonly JUMP_ATTACK_COOLDOWN = 1000;\r\n    private readonly JUMP_ATTACK_FREEZE = 800;\r\n\r\n\r\n    private nextJumpAllowed: number = 0;\r\n    private nextJumpDownAllowed: number = 0;\r\n\r\n    private world: WorldP2;\r\n    private movementState: MovementState = -1;\r\n    private kbd = new KeyboardMapper();\r\n\r\n    private isRunning = false;\r\n    private isJumping = false;\r\n    private newState: MovementState = MovementState.Idle;\r\n\r\n    private _isInteractive: boolean = true;\r\n    \r\n    constructor(world: WorldP2) {\r\n        this.world = world;\r\n    }\r\n\r\n    /**\r\n     * Returns if the player can interact via controls.\r\n     */\r\n    public get isInteractive(): boolean {\r\n        return this._isInteractive;\r\n    }\r\n\r\n    /**\r\n     * Sets if the player can interact via controls.\r\n     */\r\n    public set isInteractive(newValue: boolean) {\r\n        this._isInteractive = newValue;\r\n        if (!this._isInteractive) {\r\n            this.isRunning = false;\r\n            this.movementState = MovementState.Idle;\r\n        }\r\n    }\r\n\r\n    public get IsJumping(): boolean {\r\n        return this.isJumping;\r\n    }\r\n\r\n    public get CanJump(): boolean {\r\n        return !this.isJumping && this.nextJumpAllowed < performance.now();\r\n    }\r\n\r\n    public get IsRunning(): boolean {\r\n        return this.isRunning;\r\n    }\r\n\r\n    public get MovementState(): MovementState {\r\n        return this.movementState;\r\n    }\r\n\r\n    public StartJump(direction: MovementState.JumpLeft | MovementState.JumpRight | MovementState.JumpUp): void {\r\n        var forceVector: [number, number];\r\n\r\n        if (direction === MovementState.JumpUp) {\r\n            forceVector = [0, this.JUMP_FORCE];\r\n        } else if (direction === MovementState.JumpLeft) {\r\n            forceVector = [-this.JUMP_FORCE * 0.10, this.JUMP_FORCE];\r\n        } else if (direction === MovementState.JumpRight) {\r\n            forceVector = [this.JUMP_FORCE * 0.10, this.JUMP_FORCE];\r\n        }\r\n        this.world.playerBody.applyImpulse(forceVector);\r\n        this.world.clearContactsForBody(this.world.playerBody);\r\n        this.nextJumpAllowed = performance.now() + this.JUMP_COOLDOWN;\r\n    }\r\n\r\n    public StartJumpDown(): void {\r\n        switch (this.movementState) {\r\n            case MovementState.Left:\r\n            case MovementState.JumpLeft:\r\n                this.newState = MovementState.JumpDownLeft;\r\n                break;\r\n\r\n            case MovementState.Right:\r\n            case MovementState.JumpRight:\r\n                this.newState = MovementState.JumpDownRight;\r\n                break;\r\n\r\n            default:\r\n                this.newState = MovementState.JumpDown;\r\n                break;\r\n        }\r\n        console.log(\"state change: \" + MovementState[this.movementState] + \" -> \" + MovementState[this.newState]);\r\n        \r\n        var forceVector: [number, number] = [0, this.JUMP_ATTACK_FORCE];\r\n        this.world.playerBody.setZeroForce();\r\n        this.world.playerBody.applyImpulse(forceVector);\r\n        this.nextJumpDownAllowed = performance.now() + this.JUMP_ATTACK_COOLDOWN;\r\n        \r\n        this.isInteractive = false;\r\n        setTimeout(() => this.isInteractive = true, this.JUMP_ATTACK_FREEZE);\r\n        \r\n        eventEmitter.emit(MOVE_TOPIC, {\r\n            newState: this.newState,\r\n            oldState: this.movementState,\r\n            isJumping: true,\r\n            isRunning: false // makes no difference during jumps\r\n        });\r\n        this.movementState = this.newState;\r\n    }\r\n\r\n    public update(dt: number): void {\r\n\r\n        const KEY_A: number = 65;\r\n        const KEY_D: number = 68;\r\n        const KEY_W: number = 87;\r\n        const KEY_S: number = 83;\r\n\r\n        const KEY_SHIFT: number = 16;\r\n        const KEY_LEFT: number = 37;\r\n        const KEY_RIGHT: number = 39;\r\n        const KEY_UP: number = 38;\r\n        const KEY_DOWN: number = 40;\r\n        const SPACE: number = 32;\r\n\r\n        this.newState = MovementState.Idle;\r\n\r\n        var isMovingVerticaly = Math.abs(this.world.playerBody.velocity[1]) > 0.01;\r\n        if (isMovingVerticaly) {\r\n            let hasOnlySensorContacts = this.world.playerContacts.every((body) => body.shapes[0].sensor);\r\n            this.isJumping = hasOnlySensorContacts;\r\n        } else {\r\n            this.isJumping = false;\r\n        }\r\n\r\n        //  calculate the horizontal velocity\r\n        var v: number = this.calcMovementVelocity();\r\n\r\n        //  no movement (except jump down) while jumping\r\n        if (this.isJumping && this._isInteractive) {\r\n            if ((this.kbd.isKeyDown(KEY_S) || this.kbd.isKeyDown(KEY_DOWN)) && stats.HasJumpAtack && this.nextJumpDownAllowed < performance.now()) {\r\n                this.StartJumpDown();\r\n            }\r\n            this.world.playerBody.velocity[0] += v;\r\n            return;\r\n\r\n        } else {\r\n            //  calculate the horizontal velocity\r\n            this.world.playerBody.velocity[0] = v;\r\n        }\r\n\r\n\r\n        var canRun = stats.getStat(StatType.Dust) > 1;\r\n        var newIsRunning: boolean = this.kbd.isKeyDown(KEY_SHIFT) && canRun && this._isInteractive;\r\n\r\n        if (this.kbd.isKeyDown(KEY_A) || this.kbd.isKeyDown(KEY_LEFT) ) {\r\n            this.newState = MovementState.Left;\r\n        } else if (this.kbd.isKeyDown(KEY_D) || this.kbd.isKeyDown(KEY_RIGHT)) {\r\n            this.newState = MovementState.Right;\r\n        }\r\n\r\n        //  check if jump is pressed\r\n        if ((this.kbd.isKeyDown(KEY_W) || this.kbd.isKeyDown(KEY_UP) || this.kbd.isKeyDown(SPACE)) && this.CanJump) {\r\n            if (this.movementState === MovementState.Left) {\r\n                this.newState = MovementState.JumpLeft;\r\n            } else if (this.movementState === MovementState.Right) {\r\n                this.newState = MovementState.JumpRight;\r\n            } else if (this.movementState === MovementState.Idle) {\r\n                this.newState = MovementState.JumpUp;\r\n                newIsRunning = false;\r\n            }\r\n        }\r\n\r\n        //  has state changed\r\n        if (this.newState !== this.movementState || newIsRunning !== this.IsRunning) {\r\n            var isCurrentJumping = false;\r\n            switch (this.newState) {\r\n                case MovementState.JumpLeft:\r\n                    this.StartJump(MovementState.JumpLeft);\r\n                    isCurrentJumping = true;\r\n                    break;\r\n                case MovementState.JumpRight:\r\n                    this.StartJump(MovementState.JumpRight);\r\n                    isCurrentJumping = true;\r\n                    break;\r\n                case MovementState.JumpUp:\r\n                    this.StartJump(MovementState.JumpUp);\r\n                    isCurrentJumping = true;\r\n                    break;\r\n            }\r\n            eventEmitter.emit(MOVE_TOPIC, {\r\n                newState: this.newState,\r\n                oldState: this.movementState,\r\n                isJumping: isCurrentJumping,\r\n                isRunning: newIsRunning \r\n            });\r\n        }\r\n\r\n        //  update new states\r\n        this.movementState = this.newState;\r\n        this.isRunning = newIsRunning;\r\n    }\r\n\r\n    private calcMovementVelocity(): number {\r\n        var direction: number = 0;\r\n        if (this.movementState === MovementState.Left || this.movementState === MovementState.JumpLeft) {\r\n            direction = -1;\r\n        } else if (this.movementState === MovementState.Right || this.movementState === MovementState.JumpRight) {\r\n            direction = 1;\r\n        }\r\n\r\n        if (this.IsJumping) {\r\n            //  allow for some minimal horizontal movement (this is to prevent getting stuck in air if between two bodies with friction and no contacts)\r\n            return direction * 0.2;\r\n        } else {\r\n            var velocity: number = direction * this.VELOCITY * (this.IsRunning ? 2 : 1.0);\r\n            return velocity;\r\n        }\r\n    }\r\n}\r\n\r\nexport enum MovementState {\r\n    Left,\r\n    Right,\r\n    Idle,\r\n\r\n    JumpLeft,\r\n    JumpRight,\r\n    JumpUp,\r\n\r\n    JumpDownLeft,\r\n    JumpDownRight,\r\n    JumpDown,\r\n}","import * as particles from \"pixi-particles\";\r\nimport { PIXI, TWEEN, Global, TextureLoader, createParticleEmitter } from '..';\r\nimport { stats } from './PlayerStats';\r\nimport { eventEmitter, STATCHANGE_TOPIC, DAMAGE_TOPIC, IStatChangeEvent, IDpsChangeEvent } from '../events';\r\nimport { SCENE_HALF_WIDTH, SCENE_HEIGHT, SCENE_HALF_HEIGHT, MSG_HP_STYLE, QUEST_ITEM_STYLE, SCENE_WIDTH, QUEST_STYLE, GUI_FONT, MSG_EXP_STYLE } from '../constants';\r\nimport { StatType } from '../enums';\r\n\r\nexport class StatsHud extends PIXI.Container {\r\n    private txtHP: PIXI.BitmapText;\r\n    private txtDust: PIXI.BitmapText;\r\n    private txtCoins: PIXI.BitmapText;\r\n    private txtExp: PIXI.BitmapText;\r\n    private txtLevel: PIXI.BitmapText;\r\n    private expPreFiller: PIXI.Sprite;\r\n    private expFiller: PIXI.Sprite;\r\n    private fillLen: number;\r\n\r\n    private emitter: particles.Emitter;\r\n\r\n    private statContainer: PIXI.Sprite;\r\n    \r\n    private questPanel: PIXI.Sprite;\r\n    private txtQuestMessage: PIXI.BitmapText;\r\n\r\n    private questMsgEndTime = 0;\r\n    private onCompleteCB?: () => void;\r\n\r\n    private txtPlayerPosition: PIXI.BitmapText;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setup();\r\n    }\r\n\r\n    private setup() {\r\n        //  TODO: remove or make a hud for player position\r\n        this.txtPlayerPosition = new PIXI.BitmapText(\"0\", QUEST_STYLE);\r\n        this.txtPlayerPosition.position = new PIXI.Point(SCENE_WIDTH, SCENE_HEIGHT);\r\n        (this.txtPlayerPosition.anchor as any).set(1, 1);\r\n        this.addChild(this.txtPlayerPosition);\r\n\r\n        \r\n        //  top left stat container panel\r\n        this.statContainer = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@panel_stats.png\", true));\r\n        this.statContainer.position.set(4);\r\n        this.statContainer.name = \"TriggerMessage\";\r\n        this.statContainer.anchor.set(0);\r\n        this.addChild(this.statContainer);\r\n        \r\n        this.questPanel = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@panel.png\"));\r\n        this.questPanel.anchor.set(0);\r\n        this.questPanel.position.set(4, 88);\r\n        this.addChild(this.questPanel);\r\n\r\n        this.txtQuestMessage = new PIXI.BitmapText(\"\", QUEST_STYLE);\r\n        this.txtQuestMessage.position.set(14);\r\n        (this.txtQuestMessage.anchor as any).set(0);\r\n        this.questPanel.addChild(this.txtQuestMessage);\r\n\r\n        let txtPanelStyle: PIXI.IBitmapTextStyle = {font:{name: 'Orbitron', size: 26}, tint: 0xfeff00};\r\n        let y: number = this.statContainer.height/2;\r\n        //  HP\r\n        {\r\n            this.txtHP = new PIXI.BitmapText(\"0\", txtPanelStyle);\r\n            (this.txtHP.anchor as any).set(0, 0.5);\r\n            this.txtHP.position = new PIXI.Point(84, this.statContainer.height/2);\r\n            this.statContainer.addChild(this.txtHP);\r\n\r\n            let spr = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@heart.png\"));\r\n            spr.anchor.set(0.5);\r\n            spr.position.set(45, this.statContainer.height/2);\r\n            this.statContainer.addChild(spr);\r\n        }\r\n\r\n        //  pixi dust\r\n        {\r\n            this.txtDust = new PIXI.BitmapText(\"0\", txtPanelStyle);            \r\n            (this.txtDust.anchor as any).set(0, 0.5);\r\n            this.txtDust.position = new PIXI.Point(334, this.statContainer.height/2);\r\n            this.statContainer.addChild(this.txtDust);\r\n\r\n            this.emitter = createParticleEmitter(this.statContainer, [TextureLoader.Get(\"assets/objects-atlas.json@star.png\")]);\r\n            this.emitter.updateOwnerPos(292, 64);\r\n            this.emitter.maxLifetime = 0.6;\r\n            this.emitter.maxParticles = 50;\r\n            this.emitter.emit = true;\r\n        }\r\n\r\n        //  coins\r\n        {\r\n            this.txtCoins = new PIXI.BitmapText(\"0\", txtPanelStyle);\r\n            (this.txtCoins.anchor as any).set(0, 0.5);\r\n            this.txtCoins.position = new PIXI.Point(586, this.statContainer.height/2);\r\n            this.statContainer.addChild(this.txtCoins);\r\n\r\n            let spr = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@coin.png\"));\r\n            spr.anchor.set(0.5);\r\n            spr.position.set(544, this.statContainer.height/2);\r\n            this.statContainer.addChild(spr);\r\n        }\r\n\r\n        //  Exp\r\n        {\r\n            let pnl = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@exp_panel.png\"));\r\n            \r\n            pnl.position.set(0, SCENE_HEIGHT - pnl.height);\r\n            this.addChild(pnl);\r\n\r\n            //  pre filler rect\r\n            this.expPreFiller = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@exp_prefill.png\"));\r\n            this.expPreFiller.position.set(3, 3);\r\n            pnl.addChild(this.expPreFiller);\r\n\r\n            //  filler rect\r\n            this.expFiller = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@exp_fill.png\"));\r\n            this.expFiller.position.set(3, 3);\r\n            pnl.addChild(this.expFiller);\r\n            this.fillLen = pnl.width - 6; // 3 pixels for left/right border;\r\n\r\n            let txtExpStyle = {font:{name: 'Bauhaus', size: 18}}\r\n            this.txtExp = new PIXI.BitmapText(\"0 / 1000\", txtExpStyle);\r\n            this.txtExp.pivot.set(0.5);\r\n            (this.txtExp.anchor as any).set(0.5);\r\n            this.txtExp.position = new PIXI.Point(pnl.width / 2, pnl.height / 2);\r\n            this.txtExp.tint = 0xfeff44;\r\n            pnl.addChild(this.txtExp);\r\n\r\n            //  character level\r\n            this.txtLevel = new PIXI.BitmapText(`Level ${stats.characterLevel}`, txtExpStyle);\r\n            this.txtLevel.position.set(pnl.x + pnl.width + 4, pnl.y);\r\n            this.txtLevel.tint = 0xfeff44;\r\n            this.addChild(this.txtLevel);\r\n        }\r\n\r\n        eventEmitter.on(STATCHANGE_TOPIC, this.handleStatChange);\r\n        eventEmitter.on(DAMAGE_TOPIC, this.handleDpsChange);\r\n    }\r\n\r\n    public onUpdate(dt: number) {\r\n        this.emitter.update(dt * 0.001);\r\n\r\n        // if (this.txtQuestMessage.visible && this.questMsgEndTime < performance.now()) {\r\n        //     this.txtQuestMessage.visible = false;\r\n        //     if (this.onCompleteCB) {\r\n        //         this.onCompleteCB();\r\n        //     }\r\n        // }\r\n\r\n        if (this.questPanel.visible && this.questMsgEndTime < performance.now()) {\r\n            this.questPanel.visible = false;\r\n            if (this.onCompleteCB) {\r\n                this.onCompleteCB();\r\n            }\r\n        }\r\n\r\n        this.txtPlayerPosition.text = `${Global.position.x.toFixed(0)}, ${Global.position.y.toFixed(0)}`;\r\n    }\r\n\r\n    /**\r\n     * Starts an animation tween with informational text moving upwards from the given position.\r\n     * @param position the start position of the message\r\n     * @param message the message to be added\r\n     * @param style optional PIXI.ITextStyle\r\n     */\r\n    public addInfoMessage(position: PIXI.Point | { x: number, y: number }, message: string, style?: PIXI.IBitmapTextStyle, offsetX?: number): void {\r\n        var stl = {...{font:'Orbitron', size: 24, tint: 0xffffff}, ...style};\r\n        var txtInfo = new PIXI.BitmapText(message, stl);\r\n        offsetX = offsetX || 0;\r\n        txtInfo.position.set(SCENE_HALF_WIDTH + offsetX, SCENE_HEIGHT - position.y - 70);\r\n        txtInfo.scale.set(1, 1);\r\n        this.addChild(txtInfo);\r\n\r\n        var dy = (position.y > SCENE_HALF_HEIGHT) ? 250 : -250;\r\n        var upY = SCENE_HEIGHT - position.y + dy;\r\n        var moveUp = new TWEEN.Tween(txtInfo.position)\r\n            .to({ y: upY }, 2000);\r\n        moveUp.start();\r\n\r\n        var scale = new TWEEN.Tween(txtInfo.scale)\r\n            .to({ x: 1.6, y: 1.6 }, 2200)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fade = new TWEEN.Tween(txtInfo)\r\n            .to({ alpha: 0 }, 3000)\r\n            .onComplete(() => this.removeChild(txtInfo));\r\n        scale.chain(fade).start();\r\n    }\r\n\r\n    /**\r\n     * Adds text message about acquired quest items.\r\n     * @param message the message to be added\r\n     * @param style optional PIXI.ITextStyle\r\n     */\r\n    public addQuestItemMessage(message: string): void {\r\n        var txtInfo = new PIXI.BitmapText(message, QUEST_ITEM_STYLE);\r\n        (txtInfo.anchor as any).set(0.5);\r\n        txtInfo.position.set(SCENE_HALF_WIDTH, 150);\r\n        this.addChild(txtInfo);\r\n        var scale = new TWEEN.Tween(txtInfo.scale)\r\n            .to({ x: 1.8, y: 1.8 }, 2200)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fade = new TWEEN.Tween(txtInfo)\r\n            .to({ alpha: 0 }, 3000)\r\n            .onComplete(() => this.removeChild(txtInfo));\r\n        scale.chain(fade).start();\r\n    }\r\n\r\n    /**\r\n     * Displays the quest message in the quest rectangle.\r\n     * @param msg\r\n     * @param ttlMilis\r\n     */\r\n    public setQuestMessage(msg: string, ttlMilis: number = 8000, onCompleteCB: () => void = null) {\r\n        this.txtQuestMessage.text = msg;\r\n        this.questPanel.visible = true;\r\n        //this.txtQuestMessage.visible = true;\r\n        this.questMsgEndTime = performance.now() + ttlMilis;\r\n        this.onCompleteCB = onCompleteCB;\r\n    }\r\n\r\n    /**\r\n     * Starts an animation tween with level up message.\r\n     * @param message the message to be added\r\n     */\r\n    private addLvlUpMessage(message: string): void {\r\n        var stl: PIXI.ITextStyle = {\r\n            align: \"center\",\r\n            padding: 0,\r\n            fontSize: \"64px\",\r\n            fontFamily: GUI_FONT,\r\n            fill: 0x335533,\r\n            strokeThickness: 6,\r\n            stroke: 0xccccff\r\n        };\r\n\r\n        var txtInfo = new PIXI.Text(message, stl);\r\n        txtInfo.scale.set(1);\r\n        txtInfo.anchor.set(0.5);\r\n        txtInfo.position.set(SCENE_HALF_WIDTH, SCENE_HEIGHT - Global.position.y - 70);\r\n        this.addChild(txtInfo);\r\n\r\n        var dy = (Global.position.y > SCENE_HALF_HEIGHT) ? 450 : -450;\r\n        var upY = SCENE_HEIGHT - Global.position.y + dy;\r\n        var moveUp = new TWEEN.Tween(txtInfo.position)\r\n            .to({ y: upY }, 2000);\r\n        moveUp.start();\r\n\r\n        var scale = new TWEEN.Tween(txtInfo.scale)\r\n            .to({ x: 1.6, y: 1.6 }, 1500)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fade = new TWEEN.Tween(txtInfo)\r\n            .to({ alpha: 0.4 }, 6000)\r\n            .onComplete(() => this.removeChild(txtInfo));\r\n        scale.chain(fade).start();\r\n    }    \r\n\r\n    private handleDpsChange = (event: IDpsChangeEvent) => {\r\n        this.addInfoMessage(Global.position, `${event.Amount} HP`, MSG_HP_STYLE, 50);\r\n    };\r\n\r\n    private handleStatChange = (event: IStatChangeEvent) => {\r\n        switch (event.Type) {\r\n            case StatType.Coins:\r\n                this.txtCoins.text = event.NewValue.toString();\r\n                break;\r\n            case StatType.Dust:\r\n                this.txtDust.text = `${event.NewValue.toFixed(0)} / ${event.Stats[StatType.MaxDust].toFixed(0)}`;\r\n                break;\r\n            case StatType.MaxDust:\r\n                this.txtDust.text = `${Math.floor(event.Stats[StatType.Dust])} / ${event.NewValue.toFixed(0)}`;\r\n                break;\r\n            case StatType.HP:\r\n                this.txtHP.text = `${Math.round(event.NewValue)} / ${event.Stats[StatType.MaxHP]}`;\r\n                break;\r\n            case StatType.MaxHP:\r\n                this.txtHP.text = `${Math.round(event.Stats[StatType.HP])} / ${event.NewValue}`;\r\n                break;\r\n            case StatType.TotalExp:\r\n                let exp = event.NewValue - event.OldValue;\r\n                if (exp != 0)\r\n                    this.addInfoMessage({ x: 0, y: 90 }, `+${exp} exp`, MSG_EXP_STYLE, -50);\r\n                this.renderExp(event);\r\n                break;\r\n            case StatType.CharacterLevel:\r\n                this.handleLevelUp(event);\r\n                break;\r\n\r\n            // case StatType.AttributePoints:\r\n            //     this.characterMngr.visible = event.NewValue > 0;\r\n            //     this.txtAtrPts.visible = event.NewValue > 0;\r\n            //     //this.txtAtrPts.text = \"points available\";\r\n            //     break;\r\n        }\r\n    }\r\n\r\n    private handleLevelUp = (event: IStatChangeEvent) => {\r\n        this.txtExp.text = `${Math.round(event.Stats[StatType.LevelExp])} / ${event.Stats[StatType.LevelMaxExp]}`;\r\n        this.expFiller.width = 1;\r\n        this.addLvlUpMessage(\"Level \" + event.NewValue);\r\n        this.txtLevel.text = `Level ${stats.characterLevel}`;\r\n    };\r\n\r\n    private renderExp(event: IStatChangeEvent) {\r\n        this.txtExp.text = `${Math.round(event.Stats[StatType.LevelExp])} / ${event.Stats[StatType.LevelMaxExp]}`;\r\n        this.txtLevel.text = `Level ${stats.characterLevel}`;\r\n\r\n        var pct = Math.min(event.Stats[StatType.LevelExp] / event.Stats[StatType.LevelMaxExp], 1.0);\r\n\r\n        //  special case during level up\r\n        if (pct === 0) {\r\n            this.expFiller.width = 1;\r\n            this.expPreFiller.position.x = 1 + this.expFiller.x;\r\n            return;\r\n        }\r\n\r\n        this.expPreFiller.position.x = this.expFiller.width + this.expFiller.x;\r\n        var targetWidth = (this.fillLen * pct) | 0;\r\n\r\n        var diff = targetWidth - this.expFiller.width;\r\n\r\n        //  tween pre-fill width\r\n        this.expPreFiller.width = 1;\r\n        var preFillTween = new TWEEN.Tween(this.expPreFiller)\r\n            .to({ width: diff }, 1500)\r\n            .easing(TWEEN.Easing.Linear.None);\r\n\r\n        var fillTween = new TWEEN.Tween(this.expFiller)\r\n            .to({ width: targetWidth }, 2000)\r\n            .easing(TWEEN.Easing.Bounce.Out);\r\n        preFillTween.chain(fillTween).start();\r\n    }\r\n}","import { AnimatedSprite } from './AnimatedSprite';\r\nimport { AnimationSequence } from './AnimationSequence';\r\n\r\nexport class Lava extends AnimatedSprite {\r\n    private readonly FRAME_SIZE_X: number = 64;\r\n    private readonly FRAME_SIZE_Y: number = 128;\r\n\r\n    constructor(textureName: string) {\r\n        super();\r\n        this.addAnimations(new AnimationSequence(\"lava\", textureName, [0, 1, 2, 3], this.FRAME_SIZE_X, this.FRAME_SIZE_Y));\r\n        this.play(\"lava\", 3);\r\n    }\r\n}","import { PIXI, TextureLoader } from '..';\r\n\r\nexport class Platform extends PIXI.Container {\r\n\r\n    /**\r\n     * \r\n     * @param tilesX number of horizontal mid tiles. Note: this is the number of mid tiles - the actual width is tilesX + 2\r\n     * @param tilesY number of vertical tiles\r\n     * @param textures array of textures in specific order: top mid, top left, top right, bottom mid, bottom left, bottom right.\r\n     */\r\n    constructor(tilesX: number = 1, tilesY: number = 1, textures:string[]) {\r\n        super();\r\n        this.scale.y *= -1; //  the worldContainer has -y scale so we must flip it up again\r\n        var textureNameTopLeft: string,\r\n            textureNameTopRight: string,\r\n            textureNameBtmMid: string,\r\n            textureNameBtmLeft: string,\r\n            textureNameBtmRight: string;\r\n\r\n        //  this one must exist\r\n        var textureNameTopMid: string = textures[0];\r\n        if (tilesX > 1 || textures.length > 1) {\r\n            textureNameTopLeft = textures[1];\r\n            textureNameTopRight = textures[2];\r\n        }\r\n        if (tilesY > 1) {\r\n            textureNameBtmMid = textures[3];\r\n            textureNameBtmLeft = textures[4];\r\n            textureNameBtmRight = textures[5];\r\n        }\r\n        var spr: PIXI.Sprite;\r\n        var x = 0;\r\n\r\n        //--------------------------\r\n        //  left border\r\n        //--------------------------\r\n        if (textureNameTopLeft) {\r\n            //texture = PIXI.loader.resources[textureNameTopLeft].texture;\r\n            texture = TextureLoader.Get(textureNameTopLeft);\r\n            spr = new PIXI.Sprite(texture);\r\n            spr.position.set(x+1, 0);\r\n            x += texture.width;\r\n            this.addChild(spr);\r\n        }\r\n\r\n        //--------------------------\r\n        //  mid tiles\r\n        //--------------------------\r\n        //var texture = PIXI.loader.resources[textureNameTopMid].texture;\r\n        var texture = TextureLoader.Get(textureNameTopMid);\r\n        if (tilesX > 1) {\r\n            let w = texture.width * tilesX;\r\n            let h = texture.height;\r\n            spr = new PIXI.TilingSprite(texture, w, h);\r\n            spr.position.set(x, 0);\r\n            x += w;\r\n        } else {\r\n            spr = new PIXI.Sprite(texture);\r\n            spr.position.set(x, 0);\r\n            x += spr.width;\r\n        }\r\n        this.addChild(spr);\r\n\r\n        //--------------------------\r\n        //  right border\r\n        //--------------------------\r\n        if (textureNameTopRight) {\r\n            //texture = PIXI.loader.resources[textureNameTopRight].texture;\r\n            texture = TextureLoader.Get(textureNameTopRight);\r\n            spr = new PIXI.Sprite(texture);\r\n            spr.position.set(x -1, 0);\r\n            x += spr.width;\r\n            this.addChild(spr);\r\n        }\r\n\r\n        //--------------------------\r\n        //  fill downwards\r\n        //--------------------------\r\n        let xTiles = tilesX + 2;\r\n        if (tilesY > 1) {\r\n            for (var x = 0; x < xTiles; x++) {\r\n                var name: string;\r\n                if (x === 0) {\r\n                    name = textureNameBtmLeft;\r\n\r\n\r\n                } else if (x === xTiles - 1) {\r\n                    name = textureNameBtmRight;\r\n                } else {\r\n                    name = textureNameBtmMid;\r\n                }\r\n\r\n                for (var y = 1; y < tilesY; y++) {                    \r\n                    //texture = PIXI.loader.resources[name].texture;\r\n                    texture = TextureLoader.Get(name);\r\n                    spr = new PIXI.Sprite(texture);\r\n                    spr.position.set(x * spr.width, y * spr.height);\r\n                    this.addChild(spr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { PIXI, TextureLoader } from '..';\r\n\r\nconst TEXTURE_BUMPER = \"assets/objects-atlas.json@bumper_01.png\";\r\nconst TEXTURE_ROTOR =  \"assets/objects-atlas.json@bumper_rotor_01.png\";\r\nconst ROTATION = Math.PI / 8;\r\n\r\nexport class Bumper extends PIXI.Sprite {\r\n    private rotor: PIXI.Sprite;\r\n\r\n    constructor() {\r\n        super(TextureLoader.Get(TEXTURE_BUMPER)/*PIXI.loader.resources[TEXTURE_BUMPER].texture*/);\r\n        this.rotor = new PIXI.Sprite(TextureLoader.Get(TEXTURE_ROTOR)/*PIXI.loader.resources[TEXTURE_ROTOR].texture*/);\r\n        this.rotor.anchor.set(0.5);\r\n        this.rotor.pivot.set(0.5);\r\n        this.addChild(this.rotor);\r\n        this.anchor.set(0.5);\r\n    }\r\n\r\n    public onUpdate = (dt: number) => {\r\n        var rot = this.rotor.rotation - (ROTATION * dt / 1000);\r\n        this.rotor.rotation = rot % Math.PI;\r\n    };\r\n}","import {PIXI} from \"..\";\r\nimport * as Global from \"../global\";\r\nimport { QuestState } from \"./QuestState\";\r\nimport { Quest } from \"./Quest\";\r\nimport { ITriggerDefinition } from \"../world/LevelInterfaces\";\r\nimport { MainScene } from \"../Scenes/MainScene\";\r\nimport { CutScene } from \"../Scenes/CutScene\";\r\nimport { stats } from \"../objects/PlayerStats\";\r\nimport { StatsHud } from \"../objects/StatsHud\";\r\nimport { wp2 } from '../world/WorldP2';\r\nimport { snd } from '../world/SoundMan';\r\nimport { StatType } from '../enums';\r\n\r\n/**\r\n * Contains quest related logic, checks and helpers.\r\n */\r\nexport class QuestManager {\r\n    private questState: Array<QuestState> = [];\r\n    private hud: StatsHud;\r\n\r\n    constructor(private gameScene: MainScene) {\r\n        this.hud = this.gameScene.HudOverlay as StatsHud;\r\n    }\r\n\r\n    /**\r\n     * Resets state of all quests.\r\n     */\r\n    public reset() {\r\n        this.questState.forEach((qs, index) => {\r\n            if (qs != QuestState.None) {\r\n                var quest = this.findQuest(index);\r\n                quest.itemsCollected  = 0;\r\n            }\r\n        });\r\n        this.questState = [];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param itemId\r\n     */\r\n    public acquireItem(itemId: number) {\r\n        //  find if there is an unfinished quest depending on that item\r\n        let quest = this.findQuestWithItem(itemId);\r\n        if (quest) {\r\n            quest.itemsCollected++;\r\n            this.hud.addQuestItemMessage(`collected ${quest.itemsCollected} / ${quest.itemsNeeded}`);\r\n            if (quest.itemsCollected >= quest.itemsNeeded) {\r\n                this.setQuestState(quest.id, QuestState.Completed);\r\n                if (quest.completedMsg) {\r\n                    this.hud.setQuestMessage(quest.completedMsg);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a trigger can be activated. \r\n     * @param trigger\r\n     */\r\n    public canActivateTrigger(trigger: ITriggerDefinition): boolean {\r\n        if (!trigger || !trigger.questId) {\r\n            return false;\r\n        }\r\n\r\n        //  check if trigger depends on quest \r\n        if (Array.isArray(trigger.dependsOn)) {\r\n            for (var i = 0; i < trigger.dependsOn.length; i++) {\r\n                let dependency = trigger.dependsOn[i];\r\n                let state = this.questState[dependency];\r\n                if (!state || state != QuestState.Rewarded)\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        let TEN_SECONDS = 10000;\r\n        let nextAllowedTime = (trigger.lastActive || -TEN_SECONDS) + TEN_SECONDS;\r\n        return nextAllowedTime < performance.now();\r\n    }\r\n\r\n    /**\r\n     * Handles level events triggers.\r\n     * @param body\r\n     */\r\n    public handleTriggerEvent(body: any): void {\r\n        let scm = Global.getScm();\r\n        var trigger: ITriggerDefinition = body.Trigger;\r\n\r\n        //  note: trigger can have a predefined state (so we skip previous states)\r\n        let state = Math.max(this.getQuestState(trigger.questId), trigger.state || 0);\r\n\r\n        // react only if trigger has quest id and last active is older than 10 seconds \r\n        if (this.canActivateTrigger(trigger)) {\r\n            trigger.lastActive = performance.now();\r\n\r\n            let quest: Quest = this.findQuest(trigger.questId);\r\n\r\n            switch (trigger.questId) {\r\n                case 1: //   intro\r\n                    if (state === QuestState.None) {\r\n\r\n                        this.setQuestState(trigger.questId, QuestState.Completed);\r\n                        this.gameScene.IsHeroInteractive = false;\r\n\r\n                        this.hud.setQuestMessage(quest.welcomeMsg, 2000, () => {\r\n                            this.hud.setQuestMessage(quest.completedMsg, 2000, () => {\r\n                                this.gameScene.IsHeroInteractive = true;\r\n                                this.setQuestState(trigger.questId, QuestState.Finished);\r\n                                this.giveRewards(quest);\r\n\r\n                                this.setQuestState(trigger.questId + 1, QuestState.InProgress);\r\n                                quest = this.findQuest(trigger.questId + 1);\r\n                                this.hud.setQuestMessage(quest.welcomeMsg, 4000);\r\n                            });\r\n                        });\r\n                    }\r\n                    break;\r\n\r\n                case 2: //  intro - jump on box task\r\n                    if (this.getQuestState(1) > QuestState.Finished) {\r\n                        if (state === QuestState.InProgress) {\r\n                            this.setQuestState(trigger.questId, QuestState.Completed);\r\n                            //this.gameScene.IsHeroInteractive = false;\r\n                            this.hud.setQuestMessage(quest.completedMsg, 4000, () => {\r\n                                this.gameScene.IsHeroInteractive = true;\r\n                                this.setQuestState(trigger.questId, QuestState.Finished);\r\n                                this.giveRewards(quest);\r\n\r\n                                //  start quest 3\r\n                                quest = this.findQuest(trigger.questId + 1);\r\n                                this.setQuestState(trigger.questId + 1, QuestState.InProgress);\r\n                                this.hud.setQuestMessage(quest.welcomeMsg);\r\n                            });\r\n                        } else if (state >= QuestState.Finished) {\r\n                            quest = this.findQuest(trigger.questId + 1);\r\n                            this.hud.setQuestMessage(quest.welcomeMsg, 4000);\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 3: //  intro - exit sign                                           \r\n                    if (state === QuestState.InProgress) {\r\n                        this.setQuestState(trigger.questId, QuestState.Finished);\r\n                        this.giveRewards(quest);\r\n                        this.gameScene.IsHeroInteractive = false;\r\n                        this.hud.setQuestMessage(quest.completedMsg, 4000, () => {\r\n                            Global.getScm().ActivateScene(\"Loader\");\r\n                        });\r\n                        stats.saveUserState(true);\r\n                        snd.win();\r\n                    }\r\n                    break;\r\n\r\n                case 201:   //  Kendo knowledge\r\n                    this.genericQuestHandler(quest, state, body, [\r\n                        () => {\r\n                            let item = Global.worldContainer.getChildByName(\"quest_item_201\");\r\n                            item.visible = true;\r\n                            var lock: any = this.findBodyByName(\"lock\");\r\n                            this.gameScene.removeEntity(lock, true);\r\n                        },\r\n                        () => { },\r\n                        () => {\r\n                            this.setQuestState(trigger.questId, QuestState.Finished);\r\n                            this.giveRewards(quest);\r\n                            this.gameScene.IsHeroInteractive = false;\r\n\r\n                            stats.saveUserState(true);\r\n\r\n                            snd.win();\r\n                            this.hud.visible = false;\r\n                            var cs = scm.GetScene(\"CutScene\") as CutScene;\r\n                            cs.SetText(quest.finishedMsg);\r\n                            var rt = scm.CaptureScene();\r\n                            cs.SetBackGround(rt, this.gameScene.scale);\r\n                            scm.ActivateScene(cs);\r\n                        }\r\n                    ]);\r\n                    break;\r\n\r\n                case 203:   //  hanshi Kendo master dojo: collect 10 ki\r\n                    this.genericQuestHandler(quest, state, body, [\r\n                        () => { stats.HasJumpAtack = true; },\r\n                        () => { },\r\n                        () => { },\r\n                        () => { }\r\n                    ]);\r\n                    break;\r\n\r\n                default:\r\n                    this.genericQuestHandler(quest, state, body);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param quest \r\n     * @param state \r\n     * @param body the physics sensor or trigger that causes this quest\r\n     * @param actions array of actions (one optional action for each state)\r\n     */\r\n    private genericQuestHandler(quest: Quest, state: QuestState, body, actions?: Array<() => void>) {\r\n        let trigger: ITriggerDefinition = body.Trigger;\r\n        switch (state) {\r\n            case QuestState.None:\r\n                this.setQuestState(quest.id, QuestState.InProgress);\r\n                this.hud.setQuestMessage(quest.welcomeMsg);\r\n                break;\r\n            case QuestState.InProgress:\r\n                this.hud.setQuestMessage(quest.objectiveMsg);\r\n                break;\r\n            case QuestState.Completed:\r\n                if (quest.itemId && quest.itemsCollected >= quest.itemsNeeded) { //  if the acquireItem has set quest to completed move to next stated\r\n                    this.setQuestState(quest.id, QuestState.Finished);\r\n                    trigger.lastActive = 0;\r\n                } else {\r\n                    this.hud.setQuestMessage(quest.completedMsg);\r\n                }\r\n                break;\r\n            case QuestState.Finished:\r\n                this.hud.setQuestMessage(quest.finishedMsg);\r\n                this.giveRewards(quest);\r\n                this.gameScene.removeEntity(body, true); // remove the sensor from physics and the displayobject from scene\r\n                break;\r\n        }\r\n        if (actions && actions[state]) {\r\n            actions[state]();\r\n        }\r\n    }\r\n\r\n    private giveRewards(quest: Quest) {\r\n        snd.questItem();\r\n        if (quest.rewardExp) {\r\n            stats.increaseStat(StatType.TotalExp, quest.rewardExp);\r\n            // let pt = new PIXI.Point(Global.position.x, Global.position.y + 50);\r\n            // this.hud.addInfoMessage(pt, `+${quest.rewardExp} exp`, MSG_EXP_STYLE);\r\n        }\r\n        if (quest.rewardCoins) {\r\n            stats.increaseStat(StatType.Coins, quest.rewardCoins);\r\n            // let pt = new PIXI.Point(Global.position.x + 50, Global.position.y + 100);\r\n            // this.hud.addInfoMessage(pt, `+${quest.rewardCoins} coins`);\r\n        }\r\n        this.setQuestState(quest.id, QuestState.Rewarded);\r\n    }\r\n\r\n    private findQuest(questId: number): Quest {\r\n        var quests = Global.LevelDefinitions.quests.filter((q) => {\r\n            return q.id === questId;\r\n        });\r\n        var quest: Quest = quests[0];\r\n        return quest;\r\n    }\r\n\r\n    private findQuestWithItem(itemId: number): Quest {\r\n        var quests = Global.LevelDefinitions.quests.filter((q: Quest) => {\r\n            if (q.itemId === itemId) {\r\n                let state = this.getQuestState(q.id);\r\n                return state < QuestState.Completed && state > QuestState.None;\r\n            }\r\n            return false;\r\n        });\r\n        if (quests.length > 0) {\r\n            return quests[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Sets the quest state.\r\n    */\r\n    private setQuestState(questId: number, state: QuestState) {\r\n        this.questState[questId] = state;\r\n    }\r\n\r\n    /**\r\n     * Gets the quest state.\r\n     */\r\n    private getQuestState(questId: number): QuestState {\r\n        return this.questState[questId] || QuestState.None;\r\n    }\r\n\r\n    /**\r\n     * Finds a body with the given display objects name.\r\n     * @param name\r\n     */\r\n    private findBodyByName(name: string): p2.Body {\r\n        var foundBody = undefined;\r\n        wp2.bodies.forEach((body: any) => {\r\n            var dispObj = body.DisplayObject as PIXI.DisplayObject;\r\n            if (dispObj && dispObj.name === name) {\r\n                foundBody = body;\r\n            }\r\n        });\r\n        return foundBody;\r\n    }\r\n}\r\n\r\n","\r\nexport enum QuestState {\r\n    None,\r\n\r\n    /**\r\n     *  Quest has been started.\r\n     */\r\n    InProgress,\r\n\r\n    /**\r\n     *  Quest items/conditions have been completed.\r\n     */\r\n    Completed,\r\n\r\n    /**\r\n     *  Quest has been finished.\r\n     */\r\n    Finished,\r\n\r\n    /**\r\n     *  Quest has been finished and reward awarded.\r\n     */\r\n    Rewarded,\r\n}","import { PIXI, Scene, SpriteButton, SceneManager } from \"..\";\r\nimport { SCENE_HALF_WIDTH, TEXT_STYLE, SCENE_BACKCOLOR, BTN_WIDTH, SCENE_HEIGHT, BTN_HEIGHT, BTN_STYLE } from '../constants';\r\n\r\n/**\r\n *   Main options GUI.\r\n */\r\nexport class OptionsScene extends Scene {\r\n\r\n    private currentMusicTrack: number = 0; \r\n    \r\n\r\n    /**\r\n     *   Creates a new scene instance.\r\n     */\r\n    constructor(private sceneManager:SceneManager) {\r\n        super(\"Options\");\r\n        this.BackGroundColor = SCENE_BACKCOLOR;\r\n        this.setup();\r\n    }\r\n\r\n    public onActivate =()=>{\r\n        var btnOptions = this.sceneManager.MasterHudOverlay.children.find((obj)=> obj.name == \"BTN_OPTIONS\");\r\n        btnOptions!.visible = false;\r\n    }\r\n    public onDeactivate =()=>{\r\n        var btnOptions = this.sceneManager.MasterHudOverlay.children.find((obj)=> obj.name == \"BTN_OPTIONS\");\r\n        btnOptions!.visible = true;\r\n    }\r\n    private setup = () => {\r\n        var title = new PIXI.BitmapText(\"Options\", TEXT_STYLE);\r\n        this.addChild(title);\r\n        (title.anchor as any).set(0.5);\r\n        title.x = SCENE_HALF_WIDTH;\r\n        title.y = 20;\r\n\r\n        let OFFSET = BTN_WIDTH / 3;\r\n        let y = SCENE_HEIGHT - BTN_HEIGHT - OFFSET;\r\n\r\n        //--------------------\r\n        //  back to game\r\n        //--------------------\r\n        var btnBack = new SpriteButton(\"assets/gui-atlas.json@gui_button1.png\", OFFSET, y, BTN_WIDTH, BTN_HEIGHT);\r\n        btnBack.text = new PIXI.Text(\"Back to game\", BTN_STYLE);\r\n        btnBack.onClick = () => {\r\n            //this.resetSounds();\r\n            this.sceneManager.ActivatePreviousScene();\r\n        };\r\n        this.addChild(btnBack);\r\n    }\r\n}","import { PIXI, Scene, SpriteButton, SceneManager, SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT, SCENE_HEIGHT, BTN_WIDTH, SCENE_WIDTH, BTN_HEIGHT, BTN_STYLE, TextureLoader } from '..';\r\nimport { snd } from \"../world/SoundMan\";\r\nimport { QUEST_STYLE } from '../constants';\r\n\r\nexport class CutScene extends Scene {\r\n    private callout: PIXI.Sprite;\r\n    private textMessage: PIXI.BitmapText;\r\n    private backSprite: PIXI.Sprite;\r\n    private deathScene: boolean = false;\r\n    private corpse: PIXI.Sprite;\r\n    private btnContinue: SpriteButton;\r\n\r\n    private corpseBlurFilter: PIXI.filters.BlurFilter;\r\n\r\n    constructor(private sceneManager: SceneManager) {\r\n        super(\"CutScene\");\r\n        this.BackGroundColor = 0x1099bb;\r\n\r\n        this.corpse = new PIXI.Sprite(TextureLoader.Get(\"assets/objects-atlas.json@hero-dead.png\"));\r\n        this.corpse.anchor.set(0.5);\r\n        this.corpse.pivot.set(0.5);\r\n        this.corpse.position.set(SCENE_HALF_WIDTH, SCENE_HALF_HEIGHT);\r\n        this.addChild(this.corpse);\r\n\r\n        this.corpseBlurFilter = new PIXI.filters.BlurFilter();\r\n        this.corpse.filters = [this.corpseBlurFilter];\r\n\r\n\r\n        this.callout = new PIXI.Sprite(TextureLoader.Get(\"assets/gui-atlas.json@rect.png\"));\r\n        this.callout.anchor.set(0.5);\r\n        this.callout.position.set(SCENE_HALF_WIDTH, SCENE_HEIGHT / 5);\r\n        this.addChild(this.callout);\r\n\r\n        this.textMessage = new PIXI.BitmapText(\"\", QUEST_STYLE);\r\n        (this.textMessage.anchor as any).set(0.5);\r\n        this.textMessage.position.set(0, 0);\r\n        this.callout.addChild(this.textMessage);\r\n\r\n        //--------------------------------\r\n        //  btn for next level\r\n        //--------------------------------\r\n        this.btnContinue = new SpriteButton(  \"assets/gui-atlas.json@gui_button1.png\",\r\n                                        (SCENE_WIDTH - BTN_WIDTH) / 2,\r\n                                        this.callout.height + BTN_HEIGHT,\r\n                                        BTN_WIDTH, \r\n                                        BTN_HEIGHT);\r\n        this.btnContinue.text = new PIXI.Text(\"Continue\", BTN_STYLE);\r\n        this.btnContinue.onClick = () => {            \r\n            this.sceneManager.ActivateScene(\"Loader\");\r\n        };\r\n        this.addChild(this.btnContinue);\r\n    }\r\n\r\n    public onActivate = () => {\r\n        this.btnContinue.visible = !this.deathScene;\r\n        this.callout.visible = !this.deathScene;\r\n        this.corpse.visible = this.deathScene;\r\n        this.corpse.scale.set(0.1);\r\n        this.btnContinue.text.text = this.deathScene ? \"Retry\" : \"Continue\";\r\n\r\n        if (this.deathScene) {\r\n            var deathTrackId = snd.getTrack(\"Carrousel\");\r\n            snd.playTrack(deathTrackId);\r\n        }\r\n    }\r\n\r\n    public onUpdate(dt: number) {\r\n        if (this.deathScene) {\r\n            if (this.corpse.scale.x < 2.5) {\r\n                this.corpse.rotation += 0.03;\r\n                var scale = this.corpse.scale.x + 0.01;\r\n                this.corpse.scale.set(scale);\r\n            } else {\r\n                //  death msg & retry btn\r\n                this.deathScene = false;\r\n                this.textMessage.text = this.deathMessages[0 | (Math.random() * this.deathMessages.length)];\r\n                this.callout.visible = true;\r\n                this.btnContinue.visible = true;\r\n            }\r\n        } else {\r\n            this.corpse.rotation += 0.005;           \r\n        }\r\n\r\n        var blr = Math.max(5, this.corpseBlurFilter.blur + 0.00004);\r\n        this.corpseBlurFilter.blur = blr;\r\n    }\r\n\r\n    /**\r\n     * If true the player death scene is played.\r\n     */\r\n    public get DeathScene() {\r\n        return this.deathScene;\r\n    }\r\n    public set DeathScene(value: boolean) {\r\n        this.deathScene = value;\r\n        if (this.deathScene) {\r\n            this.corpseBlurFilter.blur = 0;\r\n            var clm = new PIXI.filters.ColorMatrixFilter();\r\n            clm.sepia(false);\r\n            this.backSprite.filters = [clm];\r\n        } else {\r\n            this.backSprite.filters = null;\r\n        }\r\n    }\r\n\r\n\r\n    public SetBackGround(texture: PIXI.RenderTexture, scale) {\r\n        if (!this.backSprite) {\r\n            this.backSprite = new PIXI.Sprite(texture);\r\n            this.addChildAt(this.backSprite, 0);\r\n        } else {\r\n            this.backSprite.texture = texture;\r\n        }\r\n        this.backSprite.scale.set(1 / scale.x, 1 / scale.y);  //  rescale to fit full scene\r\n    }\r\n\r\n    public SetText(text: string) {\r\n        this.textMessage.text = text;       \r\n    }\r\n\r\n    private deathMessages: string[] = [\r\n        \"Life sucks and you just died!\",\r\n        \"You decided to check the afterlife.\\nGuess what? You are dead!\",\r\n        \"Owned!\\nMore luck next time.\",\r\n        \"You have died!\\nRest in peace.\",\r\n        \"Your quest has failed.\\nMay you find more peace in\\nthat world than you found in this one.\",\r\n        \"Here's a picture of your corpse.\\nNot pretty!\",\r\n        \"Yep, you're dead.\\nMaybe you should consider\\nplaying a Barbie game!\",\r\n        \"Died...\"\r\n    ];\r\n}"],"sourceRoot":""}