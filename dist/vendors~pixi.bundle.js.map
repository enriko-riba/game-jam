{"version":3,"sources":["webpack:///../src/AdjustmentFilter.js","webpack:///../src/KawaseBlurFilter.js","webpack:///../src/ExtractBrightnessFilter.js","webpack:///../src/AdvancedBloomFilter.js","webpack:///../src/AsciiFilter.js","webpack:///../src/BevelFilter.js","webpack:///../src/BloomFilter.js","webpack:///../src/BulgePinchFilter.js","webpack:///../src/ColorMapFilter.js","webpack:///../src/ColorReplaceFilter.js","webpack:///../src/ConvolutionFilter.js","webpack:///../src/CrossHatchFilter.js","webpack:///../src/CRTFilter.js","webpack:///../src/DotFilter.js","webpack:///../src/DropShadowFilter.js","webpack:///../src/EmbossFilter.js","webpack:///../src/GlitchFilter.js","webpack:///../src/GlowFilter.js","webpack:///../src/GodrayFilter.js","webpack:///../src/MotionBlurFilter.js","webpack:///../src/MultiColorReplaceFilter.js","webpack:///../src/OldFilmFilter.js","webpack:///../src/OutlineFilter.js","webpack:///../src/PixelateFilter.js","webpack:///../src/RadialBlurFilter.js","webpack:///../src/ReflectionFilter.js","webpack:///../src/RGBSplitFilter.js","webpack:///../src/ShockwaveFilter.js","webpack:///../src/SimpleLightmapFilter.js","webpack:///../src/TiltShiftAxisFilter.js","webpack:///../src/TiltShiftXFilter.js","webpack:///../src/TiltShiftYFilter.js","webpack:///../src/TiltShiftFilter.js","webpack:///../src/TwistFilter.js","webpack:///../src/ZoomBlurFilter.js"],"names":["AdjustmentFilter","options","super","Object","assign","this","gamma","saturation","contrast","brightness","red","green","blue","alpha","apply","filterManager","input","output","clear","uniforms","Math","max","applyFilter","blur","quality","clamp","uOffset","Float32Array","_pixelSize","pixelSize","_clamp","_kernels","Array","isArray","kernels","_blur","const","offset","uvX","x","_frame","width","uvY","y","height","_quality","tmp","renderTarget","getFilterTexture","source","target","last","i","returnFilterTexture","_generateKernels","let","k","step","push","value","length","round","ExtractBrightnessFilter","threshold","bloomScale","resolution","RESOLUTION","_extractFilter","_blurFilter","currentState","brightTarget","bloomTarget","bloomTexture","_resolution","AsciiFilter","size","lightColor","shadowColor","rotation","thickness","lightAlpha","shadowAlpha","_updateTransform","transformX","_thickness","cos","_angle","transformY","sin","kernelSize","blurX","blurY","blurXFilter","blurYFilter","blendMode","SCREEN","defaultFilter","BulgePinchFilter","center","radius","strength","dimensions","filterFrame","colorMap","nearest","mix","_size","_sliceSize","_slicePixelSize","_sliceInnerSize","_scaleMode","_nearest","_mix","colorSize","_colorMap","from","baseTexture","scaleMode","mipmap","NEAREST","LINEAR","texture","_glTextures","_updateID","emit","updateColorMap","destroy","destroyBase","originalColor","newColor","epsilon","arr","_originalColor","_newColor","ConvolutionFilter","matrix","texelSize","undefined","forEach","v","CrossHatchFilter","CRTFilter","time","seed","curvature","lineWidth","lineContrast","verticalLine","noise","noiseSize","vignetting","vignettingAlpha","vignettingBlur","DotFilter","scale","angle","constructor","console","warn","arguments","distance","color","shadowOnly","_tintFilter","Filter","shift","_updatePadding","padding","_updateShift","set","_distance","EmbossFilter","slices","direction","fillMode","average","minSize","sampleSize","_canvas","document","createElement","_slices","aspect","_randomizeSizes","_sizes","min","count","rest","averageWidth","w","random","ratio","sqrt","shuffle","rand","temp","_randomizeOffsets","_offsets","refresh","redraw","ctx","getContext","clearRect","floor","fillStyle","fillRect","update","displacementMap","sizes","len","offsets","slicesWidth","slicesOffset","_direction","radians","sinDir","cosDir","TRANSPARENT","ORIGINAL","LOOP","CLAMP","MIRROR","outerStrength","innerStrength","replace","toFixed","glowColor","perlin","gain","lacunarity","parallel","_angleLight","light","velocity","uVelocity","_velocity","velocityChanged","uKernelSize","copy","replacements","maxColors","_maxColors","_replacements","originalColors","targetColors","originals","targets","colorCount","pair","targetColor","OldFilmFilter","sepia","scratch","scratchDensity","scratchWidth","samples","OutlineFilter","MAX_SAMPLES","MIN_SAMPLES","angleStep","PI","outlineColor","PixelateFilter","RadialBlurFilter","uRadian","uCenter","uRadius","Infinity","ReflectionFilter","amplitude","waveLength","mirror","boundary","RGBSplitFilter","ShockwaveFilter","wavelength","speed","ambientColor","uLightmap","_color","gradientBlur","start","end","window","innerHeight","delta","texSize","innerWidth","updateDelta","TiltShiftXFilter","dx","dy","d","TiltShiftYFilter","TiltShiftFilter","tiltShiftXFilter","tiltShiftYFilter","TwistFilter","ZoomBlurFilter","innerRadius","uStrength","uInnerRadius"],"mappings":"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","file":"vendors~pixi.bundle.js","sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './adjustment.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift. This is a faster\n * and much simpler to use than {@link http://pixijs.download/release/docs/PIXI.filters.ColorMatrixFilter.html ColorMatrixFilter}\n * because it does not use a matrix.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/adjustment.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-adjustment|@pixi/filter-adjustment}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of the filter.\n * @param {number} [options.gamma=1] - The amount of luminance\n * @param {number} [options.saturation=1] - The amount of color saturation\n * @param {number} [options.contrast=1] - The amount of contrast\n * @param {number} [options.brightness=1] - The overall brightness\n * @param {number} [options.red=1] - The multipled red channel\n * @param {number} [options.green=1] - The multipled green channel\n * @param {number} [options.blue=1] - The multipled blue channel\n * @param {number} [options.alpha=1] - The overall alpha amount\n */\nclass AdjustmentFilter extends Filter {\n    constructor(options) {\n        super(vertex, fragment);\n\n        Object.assign(this, {\n            /**\n             * The amount of luminance\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            gamma: 1,\n\n            /**\n             * The amount of saturation\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            saturation: 1,\n\n            /**\n             * The amount of contrast\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            contrast: 1,\n\n            /**\n             * The amount of brightness\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            brightness: 1,\n\n            /**\n             * The amount of red channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            red: 1,\n\n            /**\n             * The amount of green channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            green: 1,\n\n            /**\n             * The amount of blue channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            blue: 1,\n\n            /**\n             * The amount of alpha channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            alpha: 1,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.gamma = Math.max(this.gamma, 0.0001);\n        this.uniforms.saturation = this.saturation;\n        this.uniforms.contrast = this.contrast;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.red = this.red;\n        this.uniforms.green = this.green;\n        this.uniforms.blue = this.blue;\n        this.uniforms.alpha = this.alpha;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n}\n\nexport { AdjustmentFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './kawase-blur.frag';\nimport fragmentClamp from './kawase-blur-clamp.frag';\nimport {Filter} from '@pixi/core';\nimport {Point} from '@pixi/math';\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-kawase-blur|@pixi/filter-kawase-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n *        value is an Array, setting kernels.\n * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n *        from fullscreen filters or bleeding to the edge of filterArea.\n */\nclass KawaseBlurFilter extends Filter {\n    constructor(blur = 4, quality = 3, clamp = false) {\n        super(vertex, clamp ? fragmentClamp : fragment);\n        this.uniforms.uOffset = new Float32Array(2);\n\n        this._pixelSize = new Point();\n        this.pixelSize = 1;\n        this._clamp = clamp;\n        this._kernels = null;\n\n        // if `blur` is array , as kernels\n        if (Array.isArray(blur)) {\n            this.kernels = blur;\n        }\n        else {\n            this._blur = blur;\n            this.quality = quality;\n        }\n    }\n\n    /**\n     * Overrides apply\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        const uvX = this.pixelSize.x / input._frame.width;\n        const uvY = this.pixelSize.y / input._frame.height;\n        let offset;\n\n        if (this._quality === 1 || this._blur === 0) {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else {\n            const renderTarget = filterManager.getFilterTexture();\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++) {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, source, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n\n    /**\n     * Auto generate kernels by blur & quality\n     * @private\n     */\n    _generateKernels() {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels = [ blur ];\n\n        if (blur > 0) {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++) {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n    }\n\n    /**\n     * The kernel size of the blur filter, for advanced usage.\n     *\n     * @member {number[]}\n     * @default [0]\n     */\n    get kernels() {\n        return this._kernels;\n    }\n    set kernels(value) {\n        if (Array.isArray(value) && value.length > 0) {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max.apply(Math, value);\n        }\n        else {\n            // if value is invalid , set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n     * Get the if the filter is clampped.\n     *\n     * @readonly\n     * @member {boolean}\n     * @default false\n     */\n    get clamp() {\n        return this._clamp;\n    }\n\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [1, 1]\n     */\n    set pixelSize(value) {\n        if (typeof value === 'number') {\n            this._pixelSize.x = value;\n            this._pixelSize.y = value;\n        }\n        else if (Array.isArray(value)) {\n            this._pixelSize.x = value[0];\n            this._pixelSize.y = value[1];\n        }\n        else if (value instanceof Point) {\n            this._pixelSize.x = value.x;\n            this._pixelSize.y = value.y;\n        }\n        else {\n            // if value is invalid , set default value\n            this._pixelSize.x = 1;\n            this._pixelSize.y = 1;\n        }\n    }\n    get pixelSize() {\n        return this._pixelSize;\n    }\n\n    /**\n     * The quality of the filter, integer greater than `1`.\n     *\n     * @member {number}\n     * @default 3\n     */\n    get quality() {\n        return this._quality;\n    }\n    set quality(value) {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n     * The amount of blur, value greater than `0`.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get blur() {\n        return this._blur;\n    }\n    set blur(value) {\n        this._blur = value;\n        this._generateKernels();\n    }\n}\n\nexport { KawaseBlurFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './extract-brightness.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * Internal filter for AdvancedBloomFilter to get brightness.\n * @class\n * @private\n * @param {number} [threshold=0.5] Defines how bright a color needs to be extracted.\n */\nexport class ExtractBrightnessFilter extends Filter {\n\n    constructor(threshold = 0.5) {\n        super(vertex, fragment);\n\n        this.threshold = threshold;\n    }\n\n    /**\n     * Defines how bright a color needs to be extracted.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get threshold() {\n        return this.uniforms.threshold;\n    }\n    set threshold(value) {\n        this.uniforms.threshold = value;\n    }\n}\n\n","import {ExtractBrightnessFilter} from './ExtractBrightnessFilter';\nimport {KawaseBlurFilter} from '@pixi/filter-kawase-blur';\nimport {vertex} from '@tools/fragments';\nimport fragment from './advanced-bloom.frag';\nimport {Filter} from '@pixi/core';\nimport {settings} from '@pixi/settings';\n\n/**\n * The AdvancedBloomFilter applies a Bloom Effect to an object. Unlike the normal BloomFilter\n * this had some advanced controls for adjusting the look of the bloom. Note: this filter\n * is slower than normal BloomFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/advanced-bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-advanced-bloom|@pixi/filter-advanced-bloom}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of advanced bloom filter.\n *                        When options is a number , it will be `options.threshold`.\n * @param {number} [options.threshold=0.5] - Defines how bright a color needs to be to affect bloom.\n * @param {number} [options.bloomScale=1.0] - To adjust the strength of the bloom. Higher values is more intense brightness.\n * @param {number} [options.brightness=1.0] - The brightness, lower value is more subtle brightness, higher value is blown-out.\n * @param {number} [options.blur=8] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=4] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nclass AdvancedBloomFilter extends Filter {\n\n    constructor(options) {\n\n        super(vertex, fragment);\n\n        if (typeof options === 'number') {\n            options = { threshold: options };\n        }\n\n        options = Object.assign({\n            threshold: 0.5,\n            bloomScale: 1.0,\n            brightness: 1.0,\n            kernels: null,\n            blur: 8,\n            quality: 4,\n            pixelSize: 1,\n            resolution: settings.RESOLUTION,\n        }, options);\n\n        /**\n         * To adjust the strength of the bloom. Higher values is more intense brightness.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.bloomScale = options.bloomScale;\n\n        /**\n         * The brightness, lower value is more subtle brightness, higher value is blown-out.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.brightness = options.brightness;\n\n        const { kernels, blur, quality, pixelSize, resolution } = options;\n\n        this._extractFilter = new ExtractBrightnessFilter(options.threshold);\n        this._extractFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear, currentState) {\n\n        const brightTarget = filterManager.getFilterTexture();\n\n        this._extractFilter.apply(filterManager, input, brightTarget, true, currentState);\n\n        const bloomTarget = filterManager.getFilterTexture();\n\n        this._blurFilter.apply(filterManager, brightTarget, bloomTarget, true, currentState);\n\n        this.uniforms.bloomScale = this.bloomScale;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.bloomTexture = bloomTarget;\n\n        filterManager.applyFilter(this, input, output, clear);\n\n        filterManager.returnFilterTexture(bloomTarget);\n        filterManager.returnFilterTexture(brightTarget);\n    }\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     */\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(value) {\n        this._resolution = value;\n\n        if (this._extractFilter) {\n            this._extractFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Defines how bright a color needs to be to affect bloom.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get threshold() {\n        return this._extractFilter.threshold;\n    }\n    set threshold(value) {\n        this._extractFilter.threshold = value;\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get kernels() {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value) {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * Sets the strength of the Blur properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this._blurFilter.blur;\n    }\n    set blur(value) {\n        this._blurFilter.blur = value;\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality() {\n        return this._blurFilter.quality;\n    }\n    set quality(value) {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize() {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value) {\n        this._blurFilter.pixelSize = value;\n    }\n}\n\nexport { AdvancedBloomFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './ascii.frag';\nimport {Filter} from '@pixi/core';\n\n// TODO (cengler) - The Y is flipped in this shader for some reason.\n\n/**\n * @author Vico @vicocotea\n * original shader : https://www.shadertoy.com/view/lssGDj by @movAX13h\n */\n\n/**\n * An ASCII filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/ascii.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-ascii|@pixi/filter-ascii}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [size=8] Size of the font\n */\nclass AsciiFilter extends Filter {\n\n    constructor(size = 8) {\n        super(vertex, fragment);\n        this.size = size;\n    }\n\n    /**\n     * The pixel size used by the filter.\n     *\n     * @member {number}\n     */\n    get size() {\n        return this.uniforms.pixelSize;\n    }\n    set size(value) {\n        this.uniforms.pixelSize = value;\n    }\n}\n\nexport { AsciiFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './bevel.frag';\nimport {Filter} from '@pixi/core';\nimport {DEG_TO_RAD} from '@pixi/math';\nimport {rgb2hex, hex2rgb} from '@pixi/utils';\n\n/**\n * Bevel Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bevel.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bevel|@pixi/filter-bevel}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] - The optional parameters of the filter.\n * @param {number} [options.rotation = 45] - The angle of the light in degrees.\n * @param {number} [options.thickness = 2] - The tickness of the bevel.\n * @param {number} [options.lightColor = 0xffffff] - Color of the light.\n * @param {number} [options.lightAlpha = 0.7] - Alpha of the light.\n * @param {number} [options.shadowColor = 0x000000] - Color of the shadow.\n * @param {number} [options.shadowAlpha = 0.7] - Alpha of the shadow.\n */\nclass BevelFilter extends Filter {\n    constructor(options = {}) {\n        super(vertex, fragment);\n\n        this.uniforms.lightColor = new Float32Array(3);\n        this.uniforms.shadowColor = new Float32Array(3);\n\n        options = Object.assign({\n            rotation: 45,\n            thickness: 2,\n            lightColor: 0xffffff,\n            lightAlpha: 0.7,\n            shadowColor: 0x000000,\n            shadowAlpha: 0.7,\n        }, options);\n\n        /**\n         * The angle of the light in degrees.\n         * @member {number}\n         * @default 45\n         */\n        this.rotation = options.rotation;\n\n        /**\n         * The tickness of the bevel.\n         * @member {number}\n         * @default 2\n         */\n        this.thickness = options.thickness;\n\n        /**\n         * Color of the light.\n         * @member {number}\n         * @default 0xffffff\n         */\n        this.lightColor = options.lightColor;\n\n        /**\n         * Alpha of the light.\n         * @member {number}\n         * @default 0.7\n         */\n        this.lightAlpha = options.lightAlpha;\n\n        /**\n         * Color of the shadow.\n         * @member {number}\n         * @default 0x000000\n         */\n        this.shadowColor = options.shadowColor;\n\n        /**\n         * Alpha of the shadow.\n         * @member {number}\n         * @default 0.7\n         */\n        this.shadowAlpha = options.shadowAlpha;\n\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    _updateTransform() {\n        this.uniforms.transformX = this._thickness * Math.cos(this._angle);\n        this.uniforms.transformY = this._thickness * Math.sin(this._angle);\n    }\n\n    get rotation() {\n        return this._angle / DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this._angle = value * DEG_TO_RAD;\n        this._updateTransform();\n    }\n\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        this._thickness = value;\n        this._updateTransform();\n    }\n\n    get lightColor() {\n        return rgb2hex(this.uniforms.lightColor);\n    }\n    set lightColor(value) {\n        hex2rgb(value, this.uniforms.lightColor);\n    }\n\n    get lightAlpha() {\n        return this.uniforms.lightAlpha;\n    }\n    set lightAlpha(value) {\n        this.uniforms.lightAlpha = value;\n    }\n\n    get shadowColor() {\n        return rgb2hex(this.uniforms.shadowColor);\n    }\n    set shadowColor(value) {\n        hex2rgb(value, this.uniforms.shadowColor);\n    }\n\n    get shadowAlpha() {\n        return this.uniforms.shadowAlpha;\n    }\n    set shadowAlpha(value) {\n        this.uniforms.shadowAlpha = value;\n    }\n}\n\nexport { BevelFilter };\n","import {Filter} from '@pixi/core';\nimport {BLEND_MODES} from '@pixi/constants';\nimport {AlphaFilter} from '@pixi/filter-alpha';\nimport {BlurFilterPass} from '@pixi/filter-blur';\nimport {settings} from '@pixi/settings';\nimport {Point} from '@pixi/math';\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bloom|@pixi/filter-bloom}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|PIXI.Point|number[]} [blur=2] Sets the strength of both the blurX and blurY properties simultaneously\n * @param {number} [quality=4] The quality of the blurX & blurY filter.\n * @param {number} [resolution=PIXI.settings.RESOLUTION] The resolution of the blurX & blurY filter.\n * @param {number} [kernelSize=5] The kernelSize of the blurX & blurY filter.Options: 5, 7, 9, 11, 13, 15.\n */\nclass BloomFilter extends Filter {\n\n    constructor(blur = 2, quality = 4, resolution = settings.RESOLUTION, kernelSize = 5) {\n        super();\n\n        let blurX;\n        let blurY;\n\n        if (typeof blur === 'number') {\n            blurX = blur;\n            blurY = blur;\n        }\n        else if (blur instanceof Point) {\n            blurX = blur.x;\n            blurY = blur.y;\n        }\n        else if (Array.isArray(blur)) {\n            blurX = blur[0];\n            blurY = blur[1];\n        }\n\n        this.blurXFilter = new BlurFilterPass(true, blurX, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, blurY, quality, resolution, kernelSize);\n        this.blurYFilter.blendMode = BLEND_MODES.SCREEN;\n        this.defaultFilter = new AlphaFilter();\n    }\n\n    apply(filterManager, input, output) {\n        const renderTarget = filterManager.getFilterTexture(true);\n\n        //TODO - copyTexSubImage2D could be used here?\n        this.defaultFilter.apply(filterManager, input, output);\n\n        this.blurXFilter.apply(filterManager, input, renderTarget);\n        this.blurYFilter.apply(filterManager, renderTarget, output);\n\n        filterManager.returnFilterTexture(renderTarget);\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this.blurXFilter.blur;\n    }\n    set blur(value) {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX() {\n        return this.blurXFilter.blur;\n    }\n    set blurX(value) {\n        this.blurXFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY() {\n        return this.blurYFilter.blur;\n    }\n    set blurY(value) {\n        this.blurYFilter.blur = value;\n    }\n}\n\nexport { BloomFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './bulgePinch.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * @author Julien CLEREL @JuloxRox\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * Bulges or pinches the image in a circle.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bulge-pinch.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bulge-pinch|@pixi/filter-bulge-pinch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.Point|Array<number>} [center=[0,0]] The x and y coordinates of the center of the circle of effect.\n * @param {number} [radius=100] The radius of the circle of effect.\n * @param {number} [strength=1] -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n */\nclass BulgePinchFilter extends Filter {\n\n    constructor(center, radius, strength) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n        this.center = center || [0.5, 0.5];\n        this.radius = (typeof radius === 'number') ? radius : 100; // allow 0 to be passed\n        this.strength = (typeof strength === 'number') ? strength : 1; // allow 0 to be passed\n    }\n\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The radius of the circle of effect.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     *\n     * @member {number}\n     */\n    get strength() {\n        return this.uniforms.strength;\n    }\n    set strength(value) {\n        this.uniforms.strength = value;\n    }\n\n    /**\n     * The x and y coordinates of the center of the circle of effect.\n     *\n     * @member {PIXI.Point}\n     */\n    get center() {\n        return this.uniforms.center;\n    }\n    set center(value) {\n        this.uniforms.center = value;\n    }\n}\n\nexport { BulgePinchFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './color-map.frag';\nimport {Filter, Texture} from '@pixi/core';\nimport {SCALE_MODES} from '@pixi/constants';\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-map.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-map|@pixi/filter-color-map}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The colorMap texture of the filter.\n * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n */\nclass ColorMapFilter extends Filter {\n\n    constructor(colorMap, nearest = false, mix = 1) {\n        super(vertex, fragment);\n\n        this._size = 0;\n        this._sliceSize = 0;\n        this._slicePixelSize = 0;\n        this._sliceInnerSize = 0;\n\n        this._scaleMode = null;\n        this._nearest = false;\n        this.nearest = nearest;\n\n        /**\n         * The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n         * @member {number}\n         */\n        this.mix = mix;\n\n        this.colorMap = colorMap;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms._mix = this.mix;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * the size of one color slice\n     * @member {number}\n     * @readonly\n     */\n    get colorSize() {\n        return this._size;\n    }\n\n    /**\n     * the colorMap texture\n     * @member {PIXI.Texture}\n     */\n    get colorMap() {\n        return this._colorMap;\n    }\n    set colorMap(colorMap) {\n        if (!(colorMap instanceof Texture)) {\n            colorMap = Texture.from(colorMap);\n        }\n        if (colorMap && colorMap.baseTexture) {\n            colorMap.baseTexture.scaleMode = this._scaleMode;\n            colorMap.baseTexture.mipmap = false;\n\n            this._size = colorMap.height;\n            this._sliceSize = 1 / this._size;\n            this._slicePixelSize = this._sliceSize / this._size;\n            this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n            this.uniforms._size = this._size;\n            this.uniforms._sliceSize = this._sliceSize;\n            this.uniforms._slicePixelSize = this._slicePixelSize;\n            this.uniforms._sliceInnerSize = this._sliceInnerSize;\n\n            this.uniforms.colorMap = colorMap;\n        }\n\n        this._colorMap = colorMap;\n    }\n\n    /**\n     * Whether use NEAREST for colorMap texture.\n     * @member {boolean}\n     */\n    get nearest() {\n        return this._nearest;\n    }\n    set nearest(nearest) {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? SCALE_MODES.NEAREST : SCALE_MODES.LINEAR;\n\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture.baseTexture._glTextures = {};\n\n            texture.baseTexture.scaleMode = this._scaleMode;\n            texture.baseTexture.mipmap = false;\n\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n        }\n    }\n\n    /**\n     * If the colorMap is based on canvas , and the content of canvas has changed,\n     *   then call `updateColorMap` for update texture.\n     */\n    updateColorMap() {\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n\n            this.colorMap = texture;\n        }\n    }\n\n    /**\n     * Destroys this filter\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture of colorMap as well\n     */\n    destroy(destroyBase) {\n        if (this._colorMap) {\n            this._colorMap.destroy(destroyBase);\n        }\n        super.destroy();\n    }\n}\n\nexport { ColorMapFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './colorReplace.frag';\nimport {Filter} from '@pixi/core';\nimport {hex2rgb, rgb2hex} from '@pixi/utils';\n\n/**\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-replace.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-replace|@pixi/filter-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|Array<number>} [originalColor=0xFF0000] The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n * @param {number|Array<number>} [newColor=0x000000] The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n * @param {number} [epsilon=0.4] Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.filters = [new ColorReplaceFilter(\n *   [1, 0, 0],\n *   [0, 0, 1],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(\n *   [220/255.0, 220/255.0, 220/255.0],\n *   [225/255.0, 200/255.0, 215/255.0],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(0xdcdcdc, 0xe1c8d7, 0.001)];\n *\n */\nclass ColorReplaceFilter extends Filter {\n\n    constructor(originalColor = 0xFF0000, newColor = 0x000000, epsilon = 0.4) {\n        super(vertex, fragment);\n        this.uniforms.originalColor = new Float32Array(3);\n        this.uniforms.newColor = new Float32Array(3);\n        this.originalColor = originalColor;\n        this.newColor = newColor;\n        this.epsilon = epsilon;\n    }\n\n    /**\n     * The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n     * @member {number|Array<number>}\n     * @default 0xFF0000\n     */\n    set originalColor(value) {\n        let arr = this.uniforms.originalColor;\n        if (typeof value === 'number') {\n            hex2rgb(value, arr);\n            this._originalColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._originalColor = rgb2hex(arr);\n        }\n    }\n    get originalColor() {\n        return this._originalColor;\n    }\n\n    /**\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>}\n     * @default 0x000000\n     */\n    set newColor(value) {\n        let arr = this.uniforms.newColor;\n        if (typeof value === 'number') {\n            hex2rgb(value, arr);\n            this._newColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._newColor = rgb2hex(arr);\n        }\n    }\n    get newColor() {\n        return this._newColor;\n    }\n\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @member {number}\n     * @default 0.4\n     */\n    set epsilon(value) {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon() {\n        return this.uniforms.epsilon;\n    }\n}\n\nexport { ColorReplaceFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './convolution.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/convolution.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-convolution|@pixi/filter-convolution}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param [matrix=[0,0,0,0,0,0,0,0,0]] {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param [width=200] {number} Width of the object you are transforming\n * @param [height=200] {number} Height of the object you are transforming\n */\nclass ConvolutionFilter extends Filter {\n\n    constructor(matrix, width = 200, height = 200) {\n        super(vertex, fragment);\n        this.uniforms.texelSize = new Float32Array(2);\n        this.uniforms.matrix = new Float32Array(9);\n        if (matrix !== undefined) {\n            this.matrix = matrix;\n        }\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {Array<number>}\n     */\n    get matrix() {\n        return this.uniforms.matrix;\n    }\n    set matrix(matrix) {\n        matrix.forEach((v, i) => this.uniforms.matrix[i] = v);\n    }\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     */\n    get width() {\n        return 1/this.uniforms.texelSize[0];\n    }\n    set width(value) {\n        this.uniforms.texelSize[0] = 1/value;\n    }\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     */\n    get height() {\n        return 1/this.uniforms.texelSize[1];\n    }\n    set height(value) {\n        this.uniforms.texelSize[1] = 1/value;\n    }\n}\n\nexport { ConvolutionFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './crosshatch.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * A Cross Hatch effect filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/cross-hatch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-cross-hatch|@pixi/filter-cross-hatch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass CrossHatchFilter extends Filter {\n    constructor() {\n        super(vertex, fragment);\n    }\n}\n\nexport { CrossHatchFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './crt.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The CRTFilter applies a CRT effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/crt.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-crt|@pixi/filter-crt}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object} [options] - The optional parameters of CRT effect\n * @param {number} [options.curvature=1.0] - Bent of interlaced lines, higher value means more bend\n * @param {number} [options.lineWidth=1.0] - Width of the interlaced lines\n * @param {number} [options.lineContrast=0.25] - Contrast of interlaced lines\n * @param {number} [options.verticalLine=false] - `true` is vertical lines, `false` is horizontal\n * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n * @param {number} [options.seed=0] - A seed value to apply to the random noise generation\n * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n *        values produces a smaller vignette\n * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n * @param {number} [options.time=0] - For animating interlaced lines\n */\nclass CRTFilter extends Filter {\n    constructor(options) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        /**\n         * For animating interlaced lines\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.time = 0;\n\n        /**\n         * A seed value to apply to the random noise generation\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.seed = 0;\n\n        Object.assign(this, {\n            curvature: 1.0,\n            lineWidth: 1.0,\n            lineContrast: 0.25,\n            verticalLine: false,\n            noise: 0.0,\n            noiseSize: 1.0,\n            seed: 0.0,\n            vignetting: 0.3,\n            vignettingAlpha: 1.0,\n            vignettingBlur: 0.3,\n            time: 0.0,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Bent of interlaced lines, higher value means more bend\n     *\n     * @member {number}\n     * @default 1\n     */\n    set curvature(value) {\n        this.uniforms.curvature = value;\n    }\n    get curvature() {\n        return this.uniforms.curvature;\n    }\n\n    /**\n     * Width of interlaced lines\n     *\n     * @member {number}\n     * @default 1\n     */\n    set lineWidth(value) {\n        this.uniforms.lineWidth = value;\n    }\n    get lineWidth() {\n        return this.uniforms.lineWidth;\n    }\n\n    /**\n     * Contrast of interlaced lines\n     *\n     * @member {number}\n     * @default 0.25\n     */\n    set lineContrast(value) {\n        this.uniforms.lineContrast = value;\n    }\n    get lineContrast() {\n        return this.uniforms.lineContrast;\n    }\n\n    /**\n     * `true` for vertical lines, `false` for horizontal lines\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set verticalLine(value) {\n        this.uniforms.verticalLine = value;\n    }\n    get verticalLine() {\n        return this.uniforms.verticalLine;\n    }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noise(value) {\n        this.uniforms.noise = value;\n    }\n    get noise() {\n        return this.uniforms.noise;\n    }\n\n    /**\n     * The size of the noise particles\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noiseSize(value) {\n        this.uniforms.noiseSize = value;\n    }\n    get noiseSize() {\n        return this.uniforms.noiseSize;\n    }\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignetting(value) {\n        this.uniforms.vignetting = value;\n    }\n    get vignetting() {\n        return this.uniforms.vignetting;\n    }\n\n    /**\n     * Amount of opacity of vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingAlpha(value) {\n        this.uniforms.vignettingAlpha = value;\n    }\n    get vignettingAlpha() {\n        return this.uniforms.vignettingAlpha;\n    }\n\n    /**\n     * Blur intensity of the vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingBlur(value) {\n        this.uniforms.vignettingBlur = value;\n    }\n    get vignettingBlur() {\n        return this.uniforms.vignettingBlur;\n    }\n}\n\nexport { CRTFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './dot.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js\n */\n\n/**\n * This filter applies a dotscreen effect making display objects appear to be made out of\n * black and white halftone dots like an old printer.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/dot.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-dot|@pixi/filter-dot}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [scale=1] The scale of the effect.\n * @param {number} [angle=5] The radius of the effect.\n */\nclass DotFilter extends Filter {\n\n    constructor(scale = 1, angle = 5) {\n        super(vertex, fragment);\n        this.scale = scale;\n        this.angle = angle;\n    }\n\n    /**\n     * The scale of the effect.\n     * @member {number}\n     * @default 1\n     */\n    get scale() {\n        return this.uniforms.scale;\n    }\n    set scale(value) {\n        this.uniforms.scale = value;\n    }\n\n    /**\n     * The radius of the effect.\n     * @member {number}\n     * @default 5\n     */\n    get angle() {\n        return this.uniforms.angle;\n    }\n    set angle(value) {\n        this.uniforms.angle = value;\n    }\n}\n\nexport { DotFilter };\n","import {KawaseBlurFilter} from '@pixi/filter-kawase-blur';\nimport {vertex} from '@tools/fragments';\nimport fragment from './dropshadow.frag';\nimport {Filter} from '@pixi/core';\nimport {settings} from '@pixi/settings';\nimport {DEG_TO_RAD, Point} from '@pixi/math';\nimport {rgb2hex, hex2rgb} from '@pixi/utils';\n\n/**\n * Drop shadow filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/drop-shadow.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-drop-shadow|@pixi/filter-drop-shadow}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] Filter options\n * @param {number} [options.rotation=45] The angle of the shadow in degrees.\n * @param {number} [options.distance=5] Distance of shadow\n * @param {number} [options.color=0x000000] Color of the shadow\n * @param {number} [options.alpha=0.5] Alpha of the shadow\n * @param {number} [options.shadowOnly=false] Whether render shadow only\n * @param {number} [options.blur=2] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=3] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nclass DropShadowFilter extends Filter {\n    constructor(options) {\n\n        // Fallback support for ctor: (rotation, distance, blur, color, alpha)\n        if (options && options.constructor !== Object) {\n            // eslint-disable-next-line no-console\n            console.warn('DropShadowFilter now uses options instead of (rotation, distance, blur, color, alpha)');\n            options = { rotation: options };\n            if (arguments[1] !== undefined) {\n                options.distance = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.blur = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.color = arguments[3];\n            }\n            if (arguments[4] !== undefined) {\n                options.alpha = arguments[4];\n            }\n        }\n\n        options = Object.assign({\n            rotation: 45,\n            distance: 5,\n            color: 0x000000,\n            alpha: 0.5,\n            shadowOnly: false,\n            kernels: null,\n            blur: 2,\n            quality: 3,\n            pixelSize: 1,\n            resolution: settings.RESOLUTION,\n        }, options);\n\n        super();\n\n        const { kernels, blur, quality, pixelSize, resolution } = options;\n\n        this._tintFilter = new Filter(vertex, fragment);\n        this._tintFilter.uniforms.color = new Float32Array(4);\n        this._tintFilter.uniforms.shift = new Point();\n        this._tintFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n\n        const { shadowOnly, rotation, distance, alpha, color } = options;\n\n        this.shadowOnly = shadowOnly;\n        this.rotation = rotation;\n        this.distance = distance;\n        this.alpha = alpha;\n        this.color = color;\n\n        this._updatePadding();\n    }\n\n    apply(filterManager, input, output, clear) {\n        const target = filterManager.getFilterTexture();\n\n        this._tintFilter.apply(filterManager, input, target, true);\n        this._blurFilter.apply(filterManager, target, output, clear);\n\n        if (this.shadowOnly !== true) {\n            filterManager.applyFilter(this, input, output, false);\n        }\n\n        filterManager.returnFilterTexture(target);\n    }\n\n    /**\n     * Recalculate the proper padding amount.\n     * @private\n     */\n    _updatePadding() {\n        this.padding = this.distance + (this.blur * 2);\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    _updateShift() {\n        this._tintFilter.uniforms.shift.set(\n            this.distance * Math.cos(this.angle),\n            this.distance * Math.sin(this.angle)\n        );\n    }\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     * @default PIXI.settings.RESOLUTION\n     */\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(value) {\n        this._resolution = value;\n\n        if (this._tintFilter) {\n            this._tintFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Distance offset of the shadow\n     * @member {number}\n     * @default 5\n     */\n    get distance() {\n        return this._distance;\n    }\n    set distance(value) {\n        this._distance = value;\n        this._updatePadding();\n        this._updateShift();\n    }\n\n    /**\n     * The angle of the shadow in degrees\n     * @member {number}\n     * @default 2\n     */\n    get rotation() {\n        return this.angle / DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this.angle = value * DEG_TO_RAD;\n        this._updateShift();\n    }\n\n    /**\n     * The alpha of the shadow\n     * @member {number}\n     * @default 1\n     */\n    get alpha() {\n        return this._tintFilter.uniforms.alpha;\n    }\n    set alpha(value) {\n        this._tintFilter.uniforms.alpha = value;\n    }\n\n    /**\n     * The color of the shadow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return rgb2hex(this._tintFilter.uniforms.color);\n    }\n    set color(value) {\n        hex2rgb(value, this._tintFilter.uniforms.color);\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number[]}\n     */\n    get kernels() {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value) {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * The blur of the shadow\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this._blurFilter.blur;\n    }\n    set blur(value) {\n        this._blurFilter.blur = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality() {\n        return this._blurFilter.quality;\n    }\n    set quality(value) {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize() {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value) {\n        this._blurFilter.pixelSize = value;\n    }\n}\n\nexport { DropShadowFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './emboss.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/emboss.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-emboss|@pixi/filter-emboss}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [strength=5] Strength of the emboss.\n */\nclass EmbossFilter extends Filter {\n    constructor(strength = 5){\n        super(vertex, fragment);\n        this.strength = strength;\n    }\n\n    /**\n     * Strength of emboss.\n     *\n     * @member {number}\n     */\n    get strength() {\n        return this.uniforms.strength;\n    }\n    set strength(value) {\n        this.uniforms.strength = value;\n    }\n}\n\nexport { EmbossFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './glitch.frag';\nimport {Filter, Texture} from '@pixi/core';\nimport {SCALE_MODES} from '@pixi/constants';\nimport {DEG_TO_RAD} from '@pixi/math';\n\n/**\n * The GlitchFilter applies a glitch effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glitch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-glitch|@pixi/filter-glitch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] - The more optional parameters of the filter.\n * @param {number} [options.slices=5] - The maximum number of slices.\n * @param {number} [options.offset=100] - The maximum offset amount of slices.\n * @param {number} [options.direction=0] - The angle in degree of the offset of slices.\n * @param {number} [options.fillMode=0] - The fill mode of the space after the offset. Acceptable values:\n *  - `0` {@link PIXI.filters.GlitchFilter.TRANSPARENT TRANSPARENT}\n *  - `1` {@link PIXI.filters.GlitchFilter.ORIGINAL ORIGINAL}\n *  - `2` {@link PIXI.filters.GlitchFilter.LOOP LOOP}\n *  - `3` {@link PIXI.filters.GlitchFilter.CLAMP CLAMP}\n *  - `4` {@link PIXI.filters.GlitchFilter.MIRROR MIRROR}\n * @param {number} [options.seed=0] - A seed value for randomizing glitch effect.\n * @param {number} [options.average=false] - `true` will divide the bands roughly based on equal amounts\n *                 where as setting to `false` will vary the band sizes dramatically (more random looking).\n * @param {number} [options.minSize=8] - Minimum size of individual slice. Segment of total `sampleSize`\n * @param {number} [options.sampleSize=512] - The resolution of the displacement map texture.\n * @param {number} [options.red=[0,0]] - Red channel offset\n * @param {number} [options.green=[0,0]] - Green channel offset.\n * @param {number} [options.blue=[0,0]] - Blue channel offset.\n */\nclass GlitchFilter extends Filter {\n\n    constructor(options = {}) {\n\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        options = Object.assign({\n            slices: 5,\n            offset: 100,\n            direction: 0,\n            fillMode: 0,\n            average: false,\n            seed: 0,\n            red: [0, 0],\n            green: [0, 0],\n            blue: [0, 0],\n            minSize: 8,\n            sampleSize: 512,\n        }, options);\n\n        this.direction = options.direction;\n        this.red = options.red;\n        this.green = options.green;\n        this.blue = options.blue;\n\n        /**\n         * The maximum offset value for each of the slices.\n         *\n         * @member {number}\n         */\n        this.offset = options.offset;\n\n        /**\n         * The fill mode of the space after the offset.\n         *\n         * @member {number}\n         */\n        this.fillMode = options.fillMode;\n\n        /**\n         * `true` will divide the bands roughly based on equal amounts\n         * where as setting to `false` will vary the band sizes dramatically (more random looking).\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.average = options.average;\n\n        /**\n         * A seed value for randomizing color offset. Animating\n         * this value to `Math.random()` produces a twitching effect.\n         *\n         * @member {number}\n         */\n        this.seed = options.seed;\n\n        /**\n         * Minimum size of slices as a portion of the `sampleSize`\n         *\n         * @member {number}\n         */\n        this.minSize = options.minSize;\n\n        /**\n         * Height of the displacement map canvas.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.sampleSize = options.sampleSize;\n\n        /**\n         * Internally generated canvas.\n         *\n         * @member {HTMLCanvasElement} _canvas\n         * @private\n         */\n        this._canvas = document.createElement('canvas');\n        this._canvas.width = 4;\n        this._canvas.height = this.sampleSize;\n\n        /**\n         * The displacement map is used to generate the bands.\n         * If using your own texture, `slices` will be ignored.\n         *\n         * @member {PIXI.Texture}\n         * @readonly\n         */\n        this.texture = Texture.from(this._canvas, { scaleMode: SCALE_MODES.NEAREST });\n\n        /**\n         * Internal number of slices\n         * @member {number}\n         * @private\n         */\n        this._slices = 0;\n\n        // Set slices\n        this.slices = options.slices;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n\n        const width = input.filterFrame.width;\n        const height = input.filterFrame.height;\n\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.offset = this.offset;\n        this.uniforms.fillMode = this.fillMode;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Randomize the slices size (heights).\n     *\n     * @private\n     */\n    _randomizeSizes() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n        const size = this.sampleSize;\n        const min = Math.min(this.minSize / size, 0.9 / this._slices);\n\n        if (this.average) {\n            const count = this._slices;\n            let rest = 1;\n\n            for (let i = 0; i < last; i++) {\n                const averageWidth = rest / (count - i);\n                const w =  Math.max(averageWidth * (1 - Math.random() * 0.6), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n        else {\n            let rest = 1;\n            const ratio = Math.sqrt(1 / this._slices);\n\n            for (let i = 0; i < last; i++) {\n                const w = Math.max(ratio * rest * Math.random(), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n\n        this.shuffle();\n    }\n\n    /**\n     * Shuffle the sizes of the slices, advanced usage.\n     */\n    shuffle() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n\n        // shuffle\n        for (let i = last; i > 0; i--) {\n            const rand = (Math.random() * i) >> 0;\n            const temp = arr[i];\n\n            arr[i] = arr[rand];\n            arr[rand] = temp;\n        }\n    }\n\n    /**\n     * Randomize the values for offset from -1 to 1\n     *\n     * @private\n     */\n    _randomizeOffsets() {\n        for (let i = 0 ; i < this._slices; i++) {\n            this._offsets[i] = Math.random() * (Math.random() < 0.5 ? -1 : 1);\n        }\n    }\n\n    /**\n     * Regenerating random size, offsets for slices.\n     */\n    refresh() {\n        this._randomizeSizes();\n        this._randomizeOffsets();\n        this.redraw();\n    }\n\n    /**\n     * Redraw displacement bitmap texture, advanced usage.\n     */\n    redraw() {\n        const size = this.sampleSize;\n        const texture = this.texture;\n        const ctx = this._canvas.getContext('2d');\n        ctx.clearRect(0, 0, 8, size);\n\n        let offset;\n        let y = 0;\n\n        for (let i = 0 ; i < this._slices; i++) {\n            offset = Math.floor(this._offsets[i] * 256);\n            const height = this._sizes[i] * size;\n            const red = offset > 0 ? offset : 0;\n            const green = offset < 0 ? -offset : 0;\n            ctx.fillStyle = 'rgba(' + red + ', ' + green + ', 0, 1)';\n            ctx.fillRect(0, y >> 0, size, height + 1 >> 0);\n            y += height;\n        }\n\n        texture.baseTexture.update();\n        this.uniforms.displacementMap = texture;\n    }\n\n    /**\n     * Manually custom slices size (height) of displacement bitmap\n     *\n     * @member {number[]}\n     */\n    set sizes(sizes) {\n        const len = Math.min(this._slices, sizes.length);\n\n        for (let i = 0; i < len; i++){\n            this._sizes[i] = sizes[i];\n        }\n    }\n    get sizes() {\n        return this._sizes;\n    }\n\n    /**\n     * Manually set custom slices offset of displacement bitmap, this is\n     * a collection of values from -1 to 1. To change the max offset value\n     * set `offset`.\n     *\n     * @member {number[]}\n     */\n    set offsets(offsets) {\n        const len = Math.min(this._slices, offsets.length);\n\n        for (let i = 0; i < len; i++){\n            this._offsets[i] = offsets[i];\n        }\n    }\n    get offsets() {\n        return this._offsets;\n    }\n\n    /**\n     * The count of slices.\n     * @member {number}\n     * @default 5\n     */\n    get slices() {\n        return this._slices;\n    }\n    set slices(value) {\n        if (this._slices === value) {\n            return;\n        }\n        this._slices = value;\n        this.uniforms.slices = value;\n        this._sizes = this.uniforms.slicesWidth = new Float32Array(value);\n        this._offsets = this.uniforms.slicesOffset = new Float32Array(value);\n        this.refresh();\n    }\n\n    /**\n     * The angle in degree of the offset of slices.\n     * @member {number}\n     * @default 0\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(value) {\n        if (this._direction === value) {\n            return;\n        }\n        this._direction = value;\n\n        const radians = value * DEG_TO_RAD;\n\n        this.uniforms.sinDir = Math.sin(radians);\n        this.uniforms.cosDir = Math.cos(radians);\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n\n    /**\n     * Removes all references\n     */\n    destroy() {\n        this.texture.destroy(true);\n        this.texture = null;\n        this._canvas = null;\n        this.red = null;\n        this.green = null;\n        this.blue = null;\n        this._sizes = null;\n        this._offsets = null;\n    }\n}\n\n/**\n * Fill mode as transparent\n *\n * @constant\n * @static\n * @member {int} TRANSPARENT\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.TRANSPARENT = 0;\n\n/**\n * Fill mode as original\n *\n * @constant\n * @static\n * @member {int} ORIGINAL\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.ORIGINAL = 1;\n\n/**\n * Fill mode as loop\n *\n * @constant\n * @static\n * @member {int} LOOP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.LOOP = 2;\n\n/**\n * Fill mode as clamp\n *\n * @constant\n * @static\n * @member {int} CLAMP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.CLAMP = 3;\n\n/**\n * Fill mode as mirror\n *\n * @constant\n * @static\n * @member {int} MIRROR\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.MIRROR = 4;\n\nexport { GlitchFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './glow.frag';\nimport {Filter} from '@pixi/core';\nimport {rgb2hex, hex2rgb} from '@pixi/utils';\n\n/**\n * GlowFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\n * http://codepen.io/mishaa/pen/raKzrm<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glow.png)\n *\n * @class\n *\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-glow|@pixi/filter-glow}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [distance=10] The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n * @param {number} [outerStrength=4] The strength of the glow outward from the edge of the sprite.\n * @param {number} [innerStrength=0] The strength of the glow inward from the edge of the sprite.\n * @param {number} [color=0xffffff] The color of the glow.\n * @param {number} [quality=0.1] A number between 0 and 1 that describes the quality of the glow.\n *\n * @example\n *  someSprite.filters = [\n *      new GlowFilter(15, 2, 1, 0xFF0000, 0.5)\n *  ];\n */\nclass GlowFilter extends Filter {\n\n    constructor(distance = 10, outerStrength = 4, innerStrength = 0, color = 0xffffff, quality = 0.1) {\n        super(vertex, fragment\n            .replace(/%QUALITY_DIST%/gi, '' + (1 / quality / distance).toFixed(7))\n            .replace(/%DIST%/gi, '' + distance.toFixed(7)));\n\n        this.uniforms.glowColor = new Float32Array([0, 0, 0, 1]);\n        this.distance = distance;\n        this.color = color;\n        this.outerStrength = outerStrength;\n        this.innerStrength = innerStrength;\n    }\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get color() {\n        return rgb2hex(this.uniforms.glowColor);\n    }\n    set color(value) {\n        hex2rgb(value, this.uniforms.glowColor);\n    }\n\n    /**\n     * The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n     * @member {number}\n     * @default 10\n     */\n    get distance() {\n        return this.uniforms.distance;\n    }\n    set distance(value) {\n        this.uniforms.distance = value;\n    }\n\n    /**\n     * The strength of the glow outward from the edge of the sprite.\n     * @member {number}\n     * @default 4\n     */\n    get outerStrength() {\n        return this.uniforms.outerStrength;\n    }\n    set outerStrength(value) {\n        this.uniforms.outerStrength = value;\n    }\n\n    /**\n     * The strength of the glow inward from the edge of the sprite.\n     * @member {number}\n     * @default 0\n     */\n    get innerStrength() {\n        return this.uniforms.innerStrength;\n    }\n    set innerStrength(value) {\n        this.uniforms.innerStrength = value;\n    }\n}\n\nexport { GlowFilter };\n","import {vertex} from '@tools/fragments';\nimport perlin from './perlin.frag';\nimport fragment from './gorday.frag';\nimport {Filter} from '@pixi/core';\nimport {Point, DEG_TO_RAD} from '@pixi/math';\n\n/**\n * GordayFilter, {@link https://codepen.io/alaingalvan originally} by Alain Galvan\n *\n *\n *\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/godray.gif)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-godray|@pixi/filter-godray}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @example\n *  displayObject.filters = [new GodrayFilter()];\n * @param {object} [options] Filter options\n * @param {number} [options.angle=30] Angle/Light-source of the rays.\n * @param {number} [options.gain=0.5] General intensity of the effect.\n * @param {number} [options.lacunrity=2.5] The density of the fractal noise.\n * @param {boolean} [options.parallel=true] `true` to use `angle`, `false` to use `center`\n * @param {number} [options.time=0] The current time position.\n * @param {PIXI.Point|number[]} [options.center=[0,0]] Focal point for non-parallel rays,\n *        to use this `parallel` must be set to `false`.\n */\nclass GodrayFilter extends Filter {\n\n    constructor(options) {\n        super(vertex, fragment.replace('${perlin}', perlin));\n\n        this.uniforms.dimensions = new Float32Array(2);\n\n        // Fallback support for ctor: (angle, gain, lacunarity, time)\n        if (typeof options === 'number') {\n            // eslint-disable-next-line no-console\n            console.warn('GodrayFilter now uses options instead of (angle, gain, lacunarity, time)');\n            options = { angle: options };\n            if (arguments[1] !== undefined) {\n                options.gain = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.lacunarity = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.time = arguments[3];\n            }\n        }\n\n        options = Object.assign({\n            angle: 30,\n            gain: 0.5,\n            lacunarity: 2.5,\n            time: 0,\n            parallel: true,\n            center: [0, 0],\n        }, options);\n\n        this._angleLight = new Point();\n        this.angle = options.angle;\n        this.gain = options.gain;\n        this.lacunarity = options.lacunarity;\n\n        /**\n         * `true` if light rays are parallel (uses angle),\n         * `false` to use the focal `center` point\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.parallel = options.parallel;\n\n        /**\n         * The position of the emitting point for light rays\n         * only used if `parallel` is set to `false`.\n         *\n         * @member {PIXI.Point|number[]}\n         * @default [0, 0]\n         */\n        this.center = options.center;\n\n        /**\n         * The current time.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.time = options.time;\n    }\n\n    /**\n     * Applies the filter.\n     * @private\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output, clear) {\n        const {width, height} = input.filterFrame;\n\n        this.uniforms.light = this.parallel ? this._angleLight : this.center;\n\n        this.uniforms.parallel = this.parallel;\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n        this.uniforms.time = this.time;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The angle/light-source of the rays in degrees. For instance, a value of 0 is vertical rays,\n     *     values of 90 or -90 produce horizontal rays.\n     * @member {number}\n     * @default 30\n     */\n    get angle() {\n        return this._angle;\n    }\n    set angle(value) {\n        this._angle = value;\n\n        const radians = value * DEG_TO_RAD;\n\n        this._angleLight.x = Math.cos(radians);\n        this._angleLight.y = Math.sin(radians);\n    }\n\n    /**\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\n     * where a value closer to 0 will produce a subtler effect.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get gain() {\n        return this.uniforms.gain;\n    }\n    set gain(value) {\n        this.uniforms.gain = value;\n    }\n\n    /**\n     * The density of the fractal noise. A higher amount produces more rays and a smaller amound\n     * produces fewer waves.\n     *\n     * @member {number}\n     * @default 2.5\n     */\n    get lacunarity() {\n        return this.uniforms.lacunarity;\n    }\n    set lacunarity(value) {\n        this.uniforms.lacunarity = value;\n    }\n}\n\nexport { GodrayFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './motion-blur.frag';\nimport {Filter} from '@pixi/core';\nimport {ObservablePoint, Point} from '@pixi/math';\n\n/**\n * The MotionBlurFilter applies a Motion blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/motion-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-motion-blur|@pixi/filter-motion-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.ObservablePoint|PIXI.Point|number[]} [velocity=[0, 0]] Sets the velocity of the motion for blur effect.\n * @param {number} [kernelSize=5] - The kernelSize of the blur filter. Must be odd number >= 5\n * @param {number} [offset=0] - The offset of the blur filter.\n */\nclass MotionBlurFilter extends Filter {\n    constructor(velocity = [0, 0], kernelSize = 5, offset = 0) {\n        super(vertex, fragment);\n        this.uniforms.uVelocity = new Float32Array(2);\n        this._velocity = new ObservablePoint(this.velocityChanged, this);\n        this.velocity = velocity;\n\n        /**\n         * The kernelSize of the blur, higher values are slower but look better.\n         * Use odd value greater than 5.\n         * @member {number}\n         * @default 5\n         */\n        this.kernelSize = kernelSize;\n        this.offset = offset;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        const {x, y} = this.velocity;\n\n        this.uniforms.uKernelSize = (x !== 0 || y !== 0) ? this.kernelSize : 0;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the velocity of the motion for blur effect.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    set velocity(value) {\n        if (Array.isArray(value)) {\n            this._velocity.set(value[0], value[1]);\n        }\n        else if (value instanceof Point || value instanceof ObservablePoint) {\n            this._velocity.copy(value);\n        }\n    }\n\n    get velocity() {\n        return this._velocity;\n    }\n\n    /**\n     * Handle velocity changed\n     * @private\n     */\n    velocityChanged() {\n        this.uniforms.uVelocity[0] = this._velocity.x;\n        this.uniforms.uVelocity[1] = this._velocity.y;\n    }\n\n    /**\n     * The offset of the blur filter.\n     *\n     * @member {number}\n     * @default 0\n     */\n    set offset(value) {\n        this.uniforms.uOffset = value;\n    }\n\n    get offset() {\n        return this.uniforms.uOffset;\n    }\n}\n\nexport { MotionBlurFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './multi-color-replace.frag';\nimport {Filter} from '@pixi/core';\nimport {hex2rgb, rgb2hex} from '@pixi/utils';\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/multi-color-replace.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-multi-color-replace|@pixi/filter-multi-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair (an array length is 2).\n *                       In the pair, the first value is original color , the second value is target color.\n * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n *                                  (lower = more exact, higher = more inclusive)\n * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n *                               fragment is only compiled once, this cannot be changed after construction.\n *                               If omitted, the default value is the length of `replacements`.\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    0.001\n *  )];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    0.001\n *  )];\n *\n */\nclass MultiColorReplaceFilter extends Filter {\n    constructor(replacements, epsilon = 0.05, maxColors = null) {\n        maxColors = maxColors || replacements.length;\n\n        super(vertex, fragment.replace(/%maxColors%/g, maxColors));\n\n        this.epsilon = epsilon;\n        this._maxColors = maxColors;\n        this._replacements = null;\n        this.uniforms.originalColors = new Float32Array(maxColors * 3);\n        this.uniforms.targetColors = new Float32Array(maxColors * 3);\n        this.replacements = replacements;\n    }\n\n    /**\n     * The source and target colors for replacement. See constructor for information on the format.\n     *\n     * @member {Array<Array>}\n     */\n    set replacements(replacements) {\n        const originals = this.uniforms.originalColors;\n        const targets = this.uniforms.targetColors;\n        const colorCount = replacements.length;\n\n        if (colorCount > this._maxColors) {\n            throw `Length of replacements (${colorCount}) exceeds the maximum colors length (${this._maxColors})`;\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        for (let i = 0; i < colorCount; i++) {\n            const pair = replacements[i];\n\n            // for original colors\n            let color = pair[0];\n            if (typeof color === 'number') {\n                color = hex2rgb(color);\n            }\n            else {\n                pair[0] = rgb2hex(color);\n            }\n\n            originals[i * 3] = color[0];\n            originals[(i * 3) + 1] = color[1];\n            originals[(i * 3) + 2] = color[2];\n\n            // for target colors\n            let targetColor = pair[1];\n            if (typeof targetColor === 'number') {\n                targetColor = hex2rgb(targetColor);\n            }\n            else {\n                pair[1] = rgb2hex(targetColor);\n            }\n\n            targets[i * 3] = targetColor[0];\n            targets[(i * 3) + 1] = targetColor[1];\n            targets[(i * 3) + 2] = targetColor[2];\n        }\n\n        this._replacements = replacements;\n    }\n    get replacements() {\n        return this._replacements;\n    }\n\n    /**\n     * Should be called after changing any of the contents of the replacements.\n     * This is a convenience method for resetting the `replacements`.\n     */\n    refresh() {\n        this.replacements = this._replacements;\n    }\n\n    /**\n     * The maximum number of color replacements supported by this filter. Can be changed\n     * _only_ during construction.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get maxColors() {\n        return this._maxColors;\n    }\n\n    /**\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     *\n     * @member {number}\n     * @default 0.05\n     */\n    set epsilon(value) {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon() {\n        return this.uniforms.epsilon;\n    }\n}\n\nexport { MultiColorReplaceFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './old-film.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The OldFilmFilter applies a Old film effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/old-film.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-old-film|@pixi/filter-old-film}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of old film effect.\n *                        When options is a number , it will be `seed`\n * @param {number} [options.sepia=0.3] - The amount of saturation of sepia effect,\n *        a value of `1` is more saturation and closer to `0` is less, and a value of\n *        `0` produces no sepia effect\n * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n * @param {number} [options.scratch=0.5] - How often scratches appear\n * @param {number} [options.scratchDensity=0.3] - The density of the number of scratches\n * @param {number} [options.scratchWidth=1.0] - The width of the scratches\n * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n *        values produces a smaller vignette\n * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n * @param {number} [seed=0] - A see value to apply to the random noise generation\n */\nclass OldFilmFilter extends Filter {\n    constructor(options, seed = 0) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        if (typeof options === 'number') {\n            this.seed = options;\n            options = null;\n        }\n        else {\n            /**\n             * A see value to apply to the random noise generation\n             * @member {number}\n             */\n            this.seed = seed;\n        }\n\n        Object.assign(this, {\n            sepia: 0.3,\n            noise: 0.3,\n            noiseSize: 1.0,\n            scratch: 0.5,\n            scratchDensity: 0.3,\n            scratchWidth: 1.0,\n            vignetting: 0.3,\n            vignettingAlpha: 1.0,\n            vignettingBlur: 0.3,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        // named `seed` because in the most programming languages,\n        // `random` used for \"the function for generating random value\".\n        this.uniforms.seed = this.seed;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n\n    /**\n     * The amount of saturation of sepia effect,\n     * a value of `1` is more saturation and closer to `0` is less,\n     * and a value of `0` produces no sepia effect\n     *\n     * @member {number}\n     * @default 0\n     */\n    set sepia(value) {\n        this.uniforms.sepia = value;\n    }\n\n    get sepia() {\n        return this.uniforms.sepia;\n    }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noise(value) {\n        this.uniforms.noise = value;\n    }\n\n    get noise() {\n        return this.uniforms.noise;\n    }\n\n    /**\n     * The size of the noise particles\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noiseSize(value) {\n        this.uniforms.noiseSize = value;\n    }\n\n    get noiseSize() {\n        return this.uniforms.noiseSize;\n    }\n\n    /**\n     * How often scratches appear\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratch(value) {\n        this.uniforms.scratch = value;\n    }\n\n    get scratch() {\n        return this.uniforms.scratch;\n    }\n\n    /**\n     * The density of the number of scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratchDensity(value) {\n        this.uniforms.scratchDensity = value;\n    }\n\n    get scratchDensity() {\n        return this.uniforms.scratchDensity;\n    }\n\n    /**\n     * The width of the scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratchWidth(value) {\n        this.uniforms.scratchWidth = value;\n    }\n\n    get scratchWidth() {\n        return this.uniforms.scratchWidth;\n    }\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignetting(value) {\n        this.uniforms.vignetting = value;\n    }\n\n    get vignetting() {\n        return this.uniforms.vignetting;\n    }\n\n    /**\n     * Amount of opacity of vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingAlpha(value) {\n        this.uniforms.vignettingAlpha = value;\n    }\n\n    get vignettingAlpha() {\n        return this.uniforms.vignettingAlpha;\n    }\n\n    /**\n     * Blur intensity of the vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingBlur(value) {\n        this.uniforms.vignettingBlur = value;\n    }\n\n    get vignettingBlur() {\n        return this.uniforms.vignettingBlur;\n    }\n}\n\nexport { OldFilmFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './outline.frag';\nimport {Filter} from '@pixi/core';\nimport {rgb2hex, hex2rgb} from '@pixi/utils';\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/outline.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-outline|@pixi/filter-outline}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [thickness=1] The tickness of the outline. Make it 2 times more for resolution 2\n * @param {number} [color=0x000000] The color of the outline.\n * @param {number} [quality=0.1] The quality of the outline from `0` to `1`, using a higher quality\n *        setting will result in slower performance and more accuracy.\n *\n * @example\n *  someSprite.shader = new OutlineFilter(9, 0xFF0000);\n */\nclass OutlineFilter extends Filter {\n\n    constructor(thickness = 1, color = 0x000000, quality = 0.1) {\n        const samples =  Math.max(\n            quality * OutlineFilter.MAX_SAMPLES,\n            OutlineFilter.MIN_SAMPLES\n        );\n        const angleStep = (Math.PI * 2 / samples).toFixed(7);\n\n        super(vertex, fragment.replace(/\\$\\{angleStep\\}/, angleStep));\n        this.uniforms.thickness = new Float32Array([0, 0]);\n\n        /**\n         * The thickness of the outline.\n         * @member {number}\n         * @default 1\n         */\n        this.thickness = thickness;\n\n        this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);\n        this.color = color;\n\n        this.quality = quality;\n    }\n\n    apply(filterManager, input, output, clear) {\n        this.uniforms.thickness[0] = this.thickness / input._frame.width;\n        this.uniforms.thickness[1] = this.thickness / input._frame.height;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return rgb2hex(this.uniforms.outlineColor);\n    }\n    set color(value) {\n        hex2rgb(value, this.uniforms.outlineColor);\n    }\n}\n\n/**\n * The minimum number of samples for rendering outline.\n * @static\n * @member {number} MIN_SAMPLES\n * @memberof PIXI.filters.OutlineFilter\n * @default 1\n */\nOutlineFilter.MIN_SAMPLES = 1;\n\n/**\n * The maximum number of samples for rendering outline.\n * @static\n * @member {number} MAX_SAMPLES\n * @memberof PIXI.filters.OutlineFilter\n * @default 100\n */\nOutlineFilter.MAX_SAMPLES = 100;\n\nexport { OutlineFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './pixelate.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * This filter applies a pixelate effect making display objects appear 'blocky'.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/pixelate.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-pixelate|@pixi/filter-pixelate}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.Point|Array<number>|number} [size=10] Either the width/height of the size of the pixels, or square size\n */\nclass PixelateFilter extends Filter {\n\n    constructor(size = 10) {\n        super(vertex, fragment);\n        this.size = size;\n    }\n\n    /**\n     * This a point that describes the size of the blocks.\n     * x is the width of the block and y is the height.\n     *\n     * @member {PIXI.Point|Array<number>|number}\n     * @default 10\n     */\n    get size() {\n        return this.uniforms.size;\n    }\n    set size(value) {\n        if (typeof value === 'number') {\n            value = [value, value];\n        }\n        this.uniforms.size = value;\n    }\n}\n\nexport { PixelateFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './radial-blur.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The RadialBlurFilter applies a Motion blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/radial-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-radial-blur|@pixi/filter-radial-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [angle=0] Sets the angle of the motion for blur effect.\n * @param {PIXI.Point|number[]} [center=[0,0]] The center of the radial.\n * @param {number} [kernelSize=5] - The kernelSize of the blur filter. But be odd number >= 3\n * @param {number} [radius=-1] - The maximum size of the blur radius, `-1` is infinite\n */\nclass RadialBlurFilter extends Filter {\n    constructor(angle = 0, center = [0, 0], kernelSize = 5, radius = -1) {\n        super(vertex, fragment);\n\n        this._angle = 0;\n        this.angle = angle;\n        this.center = center;\n        this.kernelSize = kernelSize;\n        this.radius = radius;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.uKernelSize = this._angle !== 0 ? this.kernelSize : 0;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the angle in degrees of the motion for blur effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    set angle(value) {\n        this._angle = value;\n        this.uniforms.uRadian = value * Math.PI / 180;\n    }\n\n    get angle() {\n        return this._angle;\n    }\n\n    /**\n     * Center of the effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    get center() {\n        return this.uniforms.uCenter;\n    }\n\n    set center(value) {\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Outer radius of the effect. The default value of `-1` is infinite.\n     *\n     * @member {number}\n     * @default -1\n     */\n    get radius() {\n        return this.uniforms.uRadius;\n    }\n\n    set radius(value) {\n        if (value < 0 || value === Infinity) {\n            value = -1;\n        }\n        this.uniforms.uRadius = value;\n    }\n}\n\nexport { RadialBlurFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './reflection.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * Applies a reflection effect to simulate the reflection on water with waves.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/reflection.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-reflection|@pixi/filter-reflection}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object} [options] - The optional parameters of Reflection effect.\n * @param {number} [options.mirror=true] - `true` to reflect the image, `false` for waves-only\n * @param {number} [options.boundary=0.5] - Vertical position of the reflection point, default is 50% (middle)\n *                 smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n * @param {number} [options.amplitude=[0, 20]] - Starting and ending amplitude of waves\n * @param {number} [options.waveLength=[30, 100]] - Starting and ending length of waves\n * @param {number} [options.alpha=[1, 1]] - Starting and ending alpha values\n * @param {number} [options.time=0] - Time for animating position of waves\n */\nclass ReflectionFilter extends Filter {\n    constructor(options) {\n        super(vertex, fragment);\n        this.uniforms.amplitude = new Float32Array(2);\n        this.uniforms.waveLength = new Float32Array(2);\n        this.uniforms.alpha = new Float32Array(2);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        Object.assign(this, {\n            mirror: true,\n            boundary: 0.5,\n            amplitude: [0, 20],\n            waveLength: [30, 100],\n            alpha: [1, 1],\n\n            /**\n             * Time for animating position of waves\n             *\n             * @member {number}\n             * @memberof PIXI.filters.ReflectionFilter#\n             * @default 0\n             */\n            time: 0,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * `true` to reflect the image, `false` for waves-only\n     *\n     * @member {boolean}\n     * @default true\n     */\n    set mirror(value) {\n        this.uniforms.mirror = value;\n    }\n    get mirror() {\n        return this.uniforms.mirror;\n    }\n\n    /**\n     * Vertical position of the reflection point, default is 50% (middle)\n     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    set boundary(value) {\n        this.uniforms.boundary = value;\n    }\n    get boundary() {\n        return this.uniforms.boundary;\n    }\n\n    /**\n     * Starting and ending amplitude of waves\n     * @member {number[]}\n     * @default [0, 20]\n     */\n    set amplitude(value) {\n        this.uniforms.amplitude[0] = value[0];\n        this.uniforms.amplitude[1] = value[1];\n    }\n    get amplitude() {\n        return this.uniforms.amplitude;\n    }\n\n    /**\n     * Starting and ending length of waves\n     * @member {number[]}\n     * @default [30, 100]\n     */\n    set waveLength(value) {\n        this.uniforms.waveLength[0] = value[0];\n        this.uniforms.waveLength[1] = value[1];\n    }\n    get waveLength() {\n        return this.uniforms.waveLength;\n    }\n\n    /**\n     * Starting and ending alpha values\n     * @member {number[]}\n     * @default [1, 1]\n     */\n    set alpha(value) {\n        this.uniforms.alpha[0] = value[0];\n        this.uniforms.alpha[1] = value[1];\n    }\n    get alpha() {\n        return this.uniforms.alpha;\n    }\n}\n\nexport { ReflectionFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './rgb-split.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/rgb.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-rgb-split|@pixi/filter-rgb-split}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.Point} [red=[-10,0]] Red channel offset\n * @param {PIXI.Point} [green=[0, 10]] Green channel offset\n * @param {PIXI.Point} [blue=[0, 0]] Blue channel offset\n */\nclass RGBSplitFilter extends Filter {\n    constructor(red = [-10, 0], green = [0, 10], blue = [0, 0]) {\n        super(vertex, fragment);\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n}\n\nexport { RGBSplitFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './shockwave.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The ShockwaveFilter class lets you apply a shockwave effect.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/shockwave.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-shockwave|@pixi/filter-shockwave}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {PIXI.Point|number[]} [center=[0.5, 0.5]] See `center` property.\n * @param {object} [options] - The optional parameters of shockwave filter.\n * @param {number} [options.amplitude=0.5] - See `amplitude`` property.\n * @param {number} [options.wavelength=1.0] - See `wavelength` property.\n * @param {number} [options.speed=500.0] - See `speed` property.\n * @param {number} [options.brightness=8] - See `brightness` property.\n * @param {number} [options.radius=4] - See `radius` property.\n * @param {number} [time=0] - See `time` property.\n */\nclass ShockwaveFilter extends Filter {\n\n    constructor(center = [0.0, 0.0], options = {}, time = 0) {\n        super(vertex, fragment);\n\n        this.center = center;\n\n        if (Array.isArray(options)) {\n            // eslint-disable-next-line no-console\n            console.warn('Deprecated Warning: ShockwaveFilter params Array has been changed to options Object.');\n            options = {};\n        }\n\n        options = Object.assign({\n            amplitude: 30.0,\n            wavelength: 160.0,\n            brightness: 1.0,\n            speed: 500.0,\n            radius: -1.0,\n        }, options);\n\n        this.amplitude = options.amplitude;\n\n        this.wavelength = options.wavelength;\n\n        this.brightness = options.brightness;\n\n        this.speed = options.speed;\n\n        this.radius = options.radius;\n\n        /**\n         * Sets the elapsed time of the shockwave.\n         * It could control the current size of shockwave.\n         *\n         * @member {number}\n         */\n        this.time = time;\n    }\n\n    apply(filterManager, input, output, clear) {\n        /**\n         * There is no set/get of `time`, for performance.\n         * Because in the most real cases, `time` will be changed in ever game tick.\n         * Use set/get will take more function-call.\n         */\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {PIXI.Point|number[]}\n     */\n    get center() {\n        return this.uniforms.center;\n    }\n    set center(value) {\n        this.uniforms.center = value;\n    }\n\n    /**\n     * The amplitude of the shockwave.\n     *\n     * @member {number}\n     */\n    get amplitude() {\n        return this.uniforms.amplitude;\n    }\n    set amplitude(value) {\n        this.uniforms.amplitude = value;\n    }\n\n    /**\n     * The wavelength of the shockwave.\n     *\n     * @member {number}\n     */\n    get wavelength() {\n        return this.uniforms.wavelength;\n    }\n    set wavelength(value) {\n        this.uniforms.wavelength = value;\n    }\n\n    /**\n     * The brightness of the shockwave.\n     *\n     * @member {number}\n     */\n    get brightness() {\n        return this.uniforms.brightness;\n    }\n    set brightness(value) {\n        this.uniforms.brightness = value;\n    }\n\n    /**\n     * The speed about the shockwave ripples out.\n     * The unit is `pixel/second`\n     *\n     * @member {number}\n     */\n    get speed() {\n        return this.uniforms.speed;\n    }\n    set speed(value) {\n        this.uniforms.speed = value;\n    }\n\n    /**\n     * The maximum radius of shockwave.\n     * `< 0.0` means it's infinity.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n}\n\nexport { ShockwaveFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './simpleLightmap.frag';\nimport {Filter} from '@pixi/core';\nimport {hex2rgb, rgb2hex} from '@pixi/utils';\n/**\n* SimpleLightmap, originally by Oza94\n* http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/\n* http://codepen.io/Oza94/pen/EPoRxj\n*\n* You have to specify filterArea, or suffer consequences.\n* You may have to use it with `filter.dontFit = true`,\n*  until we rewrite this using same approach as for DisplacementFilter.\n*\n* ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/simple-lightmap.png)\n* @class\n* @extends PIXI.Filter\n* @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-simple-lightmap|@pixi/filter-simple-lightmap}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n* @param {PIXI.Texture} texture a texture where your lightmap is rendered\n* @param {Array<number>|number} [color=0x000000] An RGBA array of the ambient color\n* @param {number} [alpha=1] Default alpha set independent of color (if it's a number, not array).\n*\n* @example\n*  displayObject.filters = [new SimpleLightmapFilter(texture, 0x666666)];\n*/\nclass SimpleLightmapFilter extends Filter {\n\n    constructor(texture, color = 0x000000, alpha = 1) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n        this.uniforms.ambientColor = new Float32Array([0, 0, 0, alpha]);\n        this.texture = texture;\n        this.color = color;\n    }\n\n    /**\n     * Applies the filter.\n     * @private\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n\n    /**\n     * a texture where your lightmap is rendered\n     * @member {PIXI.Texture}\n     */\n    get texture() {\n        return this.uniforms.uLightmap;\n    }\n    set texture(value) {\n        this.uniforms.uLightmap = value;\n    }\n\n    /**\n     * An RGBA array of the ambient color or a hex color without alpha\n     * @member {Array<number>|number}\n     */\n    set color(value) {\n        const arr = this.uniforms.ambientColor;\n        if (typeof value === 'number') {\n            hex2rgb(value, arr);\n            this._color = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            arr[3] = value[3];\n            this._color = rgb2hex(arr);\n        }\n    }\n    get color() {\n        return this._color;\n    }\n\n    /**\n     * When setting `color` as hex, this can be used to set alpha independently.\n     * @member {number}\n     */\n    get alpha() {\n        return this.uniforms.ambientColor[3];\n    }\n    set alpha(value) {\n        this.uniforms.ambientColor[3] = value;\n    }\n}\n\nexport { SimpleLightmapFilter };\n","import {vertex} from '@tools/fragments';\nimport fragment from './tilt-shift.frag';\nimport {Filter} from '@pixi/core';\nimport {Point} from '@pixi/math';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @private\n */\nclass TiltShiftAxisFilter extends Filter {\n\n    constructor(blur = 100, gradientBlur = 600, start = null, end = null){\n        super(vertex, fragment);\n        this.uniforms.blur = blur;\n        this.uniforms.gradientBlur = gradientBlur;\n        this.uniforms.start = start || new Point(0, window.innerHeight / 2);\n        this.uniforms.end = end || new Point(600, window.innerHeight / 2);\n        this.uniforms.delta = new Point(30, 30);\n        this.uniforms.texSize = new Point(window.innerWidth, window.innerHeight);\n        this.updateDelta();\n    }\n\n    /**\n     * Updates the filter delta values.\n     * This is overridden in the X and Y filters, does nothing for this class.\n     *\n     */\n    updateDelta() {\n        this.uniforms.delta.x = 0;\n        this.uniforms.delta.y = 0;\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get blur() {\n        return this.uniforms.blur;\n    }\n    set blur(value) {\n        this.uniforms.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get gradientBlur() {\n        return this.uniforms.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.uniforms.gradientBlur = value;\n    }\n\n    /**\n     * The X value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get start() {\n        return this.uniforms.start;\n    }\n    set start(value) {\n        this.uniforms.start = value;\n        this.updateDelta();\n    }\n\n    /**\n     * The X value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get end() {\n        return this.uniforms.end;\n    }\n    set end(value) {\n        this.uniforms.end = value;\n        this.updateDelta();\n    }\n}\n\nexport { TiltShiftAxisFilter };\n","import {TiltShiftAxisFilter} from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftXFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nclass TiltShiftXFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = dx / d;\n        this.uniforms.delta.y = dy / d;\n    }\n}\n\nexport { TiltShiftXFilter };\n","import {TiltShiftAxisFilter} from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nclass TiltShiftYFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = -dy / d;\n        this.uniforms.delta.y = dx / d;\n    }\n}\n\nexport { TiltShiftYFilter };\n","import {TiltShiftXFilter} from './TiltShiftXFilter';\nimport {TiltShiftYFilter} from './TiltShiftYFilter';\nimport {Filter} from '@pixi/core';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/tilt-shift.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-tilt-shift|@pixi/filter-tilt-shift}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [blur=100] The strength of the blur.\n * @param {number} [gradientBlur=600] The strength of the gradient blur.\n * @param {PIXI.Point} [start=null] The Y value to start the effect at.\n * @param {PIXI.Point} [end=null] The Y value to end the effect at.\n */\nclass TiltShiftFilter extends Filter {\n\n    constructor(blur = 100, gradientBlur = 600, start = null, end = null) {\n        super();\n        this.tiltShiftXFilter = new TiltShiftXFilter(blur, gradientBlur, start, end);\n        this.tiltShiftYFilter = new TiltShiftYFilter(blur, gradientBlur, start, end);\n    }\n\n    apply(filterManager, input, output) {\n        let renderTarget = filterManager.getFilterTexture();\n        this.tiltShiftXFilter.apply(filterManager, input, renderTarget);\n        this.tiltShiftYFilter.apply(filterManager, renderTarget, output);\n        filterManager.returnFilterTexture(renderTarget);\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     */\n    get blur() {\n        return this.tiltShiftXFilter.blur;\n    }\n    set blur(value) {\n        this.tiltShiftXFilter.blur = this.tiltShiftYFilter.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     */\n    get gradientBlur() {\n        return this.tiltShiftXFilter.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.tiltShiftXFilter.gradientBlur = this.tiltShiftYFilter.gradientBlur = value;\n    }\n\n    /**\n     * The Y value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get start() {\n        return this.tiltShiftXFilter.start;\n    }\n    set start(value) {\n        this.tiltShiftXFilter.start = this.tiltShiftYFilter.start = value;\n    }\n\n    /**\n     * The Y value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get end() {\n        return this.tiltShiftXFilter.end;\n    }\n    set end(value) {\n        this.tiltShiftXFilter.end = this.tiltShiftYFilter.end = value;\n    }\n}\n\nexport { TiltShiftFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './twist.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * This filter applies a twist effect making display objects appear twisted in the given direction.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/twist.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-twist|@pixi/filter-twist}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [radius=200] The radius of the twist.\n * @param {number} [angle=4] The angle of the twist.\n * @param {number} [padding=20] Padding for filter area.\n */\nclass TwistFilter extends Filter {\n    constructor(radius = 200, angle = 4, padding = 20) {\n        super(vertex, fragment);\n\n        this.radius = radius;\n        this.angle = angle;\n        this.padding = padding;\n    }\n\n    /**\n     * This point describes the the offset of the twist.\n     *\n     * @member {PIXI.Point}\n     */\n    get offset() {\n        return this.uniforms.offset;\n    }\n    set offset(value) {\n        this.uniforms.offset = value;\n    }\n\n    /**\n     * The radius of the twist.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The angle of the twist.\n     *\n     * @member {number}\n     */\n    get angle() {\n        return this.uniforms.angle;\n    }\n    set angle(value) {\n        this.uniforms.angle = value;\n    }\n}\n\nexport { TwistFilter };\n\n","import {vertex} from '@tools/fragments';\nimport fragment from './zoom-blur.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The ZoomFilter applies a Zoom blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/zoom-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-zoom-blur|@pixi/filter-zoom-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [strength=0.1] Sets the strength of the zoom blur effect\n * @param {PIXI.Point|number[]} [center=[0,0]] The center of the zoom.\n * @param {number} [innerRadius=0] The inner radius of zoom. The part in inner circle won't apply zoom blur effect.\n * @param {number} [radius=-1] See `radius` property.\n */\nclass ZoomBlurFilter extends Filter {\n    constructor(strength = 0.1, center = [0, 0], innerRadius = 0, radius = -1) {\n        super(vertex, fragment);\n\n        this.center = center;\n        this.strength = strength;\n        this.innerRadius = innerRadius;\n        this.radius = radius;\n    }\n\n    /**\n     * Center of the effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    get center() {\n        return this.uniforms.uCenter;\n    }\n    set center(value) {\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Intensity of the zoom effect.\n     *\n     * @member {number}\n     * @default 0.1\n     */\n    get strength() {\n        return this.uniforms.uStrength;\n    }\n    set strength(value) {\n        this.uniforms.uStrength = value;\n    }\n\n    /**\n     * Radius of the inner region not effected by blur.\n     *\n     * @member {number}\n     * @default 0\n     */\n    get innerRadius() {\n        return this.uniforms.uInnerRadius;\n    }\n    set innerRadius(value) {\n        this.uniforms.uInnerRadius = value;\n    }\n\n    /**\n     * Outer radius of the effect. The default value is `-1`.\n     * `< 0.0` means it's infinity.\n     *\n     * @member {number}\n     * @default -1\n     */\n    get radius() {\n        return this.uniforms.uRadius;\n    }\n    set radius(value) {\n        if (value < 0 || value === Infinity) {\n            value = -1;\n        }\n        this.uniforms.uRadius = value;\n    }\n}\n\nexport { ZoomBlurFilter };\n\n"],"sourceRoot":""}