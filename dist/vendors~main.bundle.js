(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~main"],{

/***/ "./node_modules/pixi-particles/lib/pixi-particles.es.js":
/*!**************************************************************!*\
  !*** ./node_modules/pixi-particles/lib/pixi-particles.es.js ***!
  \**************************************************************/
/*! exports provided: GetTextureFromString, ParticleUtils, Particle, Emitter, PathParticle, AnimatedParticle, PolygonalChain, PropertyList, PropertyNode */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetTextureFromString\", function() { return GetTextureFromString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParticleUtils\", function() { return ParticleUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Particle\", function() { return Particle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Emitter\", function() { return Emitter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PathParticle\", function() { return PathParticle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimatedParticle\", function() { return AnimatedParticle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PolygonalChain\", function() { return PolygonalChain; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PropertyList\", function() { return PropertyList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PropertyNode\", function() { return PropertyNode; });\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\n/*!\n * pixi-particles - v4.2.0\n * Compiled Sat, 26 Oct 2019 14:40:23 UTC\n *\n * pixi-particles is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n\n\n\n/**\r\n * A single node in a PropertyList.\r\n */\r\nvar PropertyNode = /** @class */ (function () {\r\n    /**\r\n     * @param value The value for this node\r\n     * @param time The time for this node, between 0-1\r\n     * @param [ease] Custom ease for this list. Only relevant for the first node.\r\n     */\r\n    function PropertyNode(value, time, ease) {\r\n        this.value = value;\r\n        this.time = time;\r\n        this.next = null;\r\n        this.isStepped = false;\r\n        if (ease) {\r\n            this.ease = typeof ease == \"function\" ? ease : ParticleUtils.generateEase(ease);\r\n        }\r\n        else {\r\n            this.ease = null;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a list of property values from a data object {list, isStepped} with a list of objects in\r\n     * the form {value, time}. Alternatively, the data object can be in the deprecated form of\r\n     * {start, end}.\r\n     * @param data The data for the list.\r\n     * @param data.list The array of value and time objects.\r\n     * @param data.isStepped If the list is stepped rather than interpolated.\r\n     * @param data.ease Custom ease for this list.\r\n     * @return The first node in the list\r\n     */\r\n    PropertyNode.createList = function (data) {\r\n        if (\"list\" in data) {\r\n            var array = data.list;\r\n            var node = void 0, first = void 0;\r\n            var _a = array[0], value = _a.value, time = _a.time;\r\n            first = node = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time, data.ease);\r\n            //only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\r\n            if (array.length > 2 || (array.length === 2 && array[1].value !== value)) {\r\n                for (var i = 1; i < array.length; ++i) {\r\n                    var _b = array[i], value_1 = _b.value, time_1 = _b.time;\r\n                    node.next = new PropertyNode(typeof value_1 === 'string' ? ParticleUtils.hexToRGB(value_1) : value_1, time_1);\r\n                    node = node.next;\r\n                }\r\n            }\r\n            first.isStepped = !!data.isStepped;\r\n            return first;\r\n        }\r\n        else {\r\n            //Handle deprecated version here\r\n            var start = new PropertyNode(typeof data.start === 'string' ? ParticleUtils.hexToRGB(data.start) : data.start, 0);\r\n            //only set up a next value if it is different from the starting value\r\n            if (data.end !== data.start)\r\n                start.next = new PropertyNode(typeof data.end === 'string' ? ParticleUtils.hexToRGB(data.end) : data.end, 1);\r\n            return start;\r\n        }\r\n    };\r\n    return PropertyNode;\r\n}());\n\n// get Texture.from()/Texture.fromImage(), in V4 and V5 friendly methods\r\n/**\r\n * @hidden\r\n */\r\nvar TextureFromString;\r\n// to avoid Rollup transforming our import, save pixi namespace in a variable\r\nvar pixiNS = pixi_js__WEBPACK_IMPORTED_MODULE_0__;\r\nif (parseInt(/^(\\d+)\\./.exec(pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"VERSION\"])[1]) < 5) {\r\n    TextureFromString = pixiNS.Texture.fromImage;\r\n}\r\nelse {\r\n    TextureFromString = pixiNS.Texture.from;\r\n}\r\nfunction GetTextureFromString(s) {\r\n    return TextureFromString(s);\r\n}\r\n/**\r\n * Contains helper functions for particles and emitters to use.\r\n */\r\nvar ParticleUtils;\r\n(function (ParticleUtils) {\r\n    /**\r\n     * If errors and warnings should be logged within the library.\r\n     */\r\n    ParticleUtils.verbose = false;\r\n    ParticleUtils.DEG_TO_RADS = Math.PI / 180;\r\n    /**\r\n     * Rotates a point by a given angle.\r\n     * @param angle The angle to rotate by in degrees\r\n     * @param p The point to rotate around 0,0.\r\n     */\r\n    function rotatePoint(angle, p) {\r\n        if (!angle)\r\n            return;\r\n        angle *= ParticleUtils.DEG_TO_RADS;\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n        var xnew = p.x * c - p.y * s;\r\n        var ynew = p.x * s + p.y * c;\r\n        p.x = xnew;\r\n        p.y = ynew;\r\n    }\r\n    ParticleUtils.rotatePoint = rotatePoint;\r\n    /**\r\n     * Combines separate color components (0-255) into a single uint color.\r\n     * @param r The red value of the color\r\n     * @param g The green value of the color\r\n     * @param b The blue value of the color\r\n     * @return The color in the form of 0xRRGGBB\r\n     */\r\n    function combineRGBComponents(r, g, b /*, a*/) {\r\n        return /*a << 24 |*/ r << 16 | g << 8 | b;\r\n    }\r\n    ParticleUtils.combineRGBComponents = combineRGBComponents;\r\n    /**\r\n     * Reduces the point to a length of 1.\r\n     * @param point The point to normalize\r\n     */\r\n    function normalize(point) {\r\n        var oneOverLen = 1 / ParticleUtils.length(point);\r\n        point.x *= oneOverLen;\r\n        point.y *= oneOverLen;\r\n    }\r\n    ParticleUtils.normalize = normalize;\r\n    /**\r\n     * Multiplies the x and y values of this point by a value.\r\n     * @param point The point to scaleBy\r\n     * @param value The value to scale by.\r\n     */\r\n    function scaleBy(point, value) {\r\n        point.x *= value;\r\n        point.y *= value;\r\n    }\r\n    ParticleUtils.scaleBy = scaleBy;\r\n    /**\r\n     * Returns the length (or magnitude) of this point.\r\n     * @param point The point to measure length\r\n     * @return The length of this point.\r\n     */\r\n    function length(point) {\r\n        return Math.sqrt(point.x * point.x + point.y * point.y);\r\n    }\r\n    ParticleUtils.length = length;\r\n    /**\r\n     * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\r\n     * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\r\n     * {r, g, b, (a)}.\r\n     * @param color The input color string.\r\n     * @param output An object to put the output in. If omitted, a new object is created.\r\n     * @return The object with r, g, and b properties, possibly with an a property.\r\n     */\r\n    function hexToRGB(color, output) {\r\n        if (!output)\r\n            output = {};\r\n        if (color.charAt(0) == \"#\")\r\n            color = color.substr(1);\r\n        else if (color.indexOf(\"0x\") === 0)\r\n            color = color.substr(2);\r\n        var alpha;\r\n        if (color.length == 8) {\r\n            alpha = color.substr(0, 2);\r\n            color = color.substr(2);\r\n        }\r\n        output.r = parseInt(color.substr(0, 2), 16); //Red\r\n        output.g = parseInt(color.substr(2, 2), 16); //Green\r\n        output.b = parseInt(color.substr(4, 2), 16); //Blue\r\n        if (alpha)\r\n            output.a = parseInt(alpha, 16);\r\n        return output;\r\n    }\r\n    ParticleUtils.hexToRGB = hexToRGB;\r\n    /**\r\n     * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\r\n     * by the related tool at http://www.greensock.com/customease/.\r\n     * @param segments An array of segments, as created by\r\n     * http://www.greensock.com/customease/.\r\n     * @return A function that calculates the percentage of change at\r\n     *                    a given point in time (0-1 inclusive).\r\n     */\r\n    function generateEase(segments) {\r\n        var qty = segments.length;\r\n        var oneOverQty = 1 / qty;\r\n        /*\r\n         * Calculates the percentage of change at a given point in time (0-1 inclusive).\r\n         * @param {Number} time The time of the ease, 0-1 inclusive.\r\n         * @return {Number} The percentage of the change, 0-1 inclusive (unless your\r\n         *                  ease goes outside those bounds).\r\n         */\r\n        return function (time) {\r\n            var t, s;\r\n            var i = (qty * time) | 0; //do a quick floor operation\r\n            t = (time - (i * oneOverQty)) * qty;\r\n            s = segments[i] || segments[qty - 1];\r\n            return (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\r\n        };\r\n    }\r\n    ParticleUtils.generateEase = generateEase;\r\n    /**\r\n     * Gets a blend mode, ensuring that it is valid.\r\n     * @param name The name of the blend mode to get.\r\n     * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\r\n     */\r\n    function getBlendMode(name) {\r\n        if (!name)\r\n            return pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"BLEND_MODES\"].NORMAL;\r\n        name = name.toUpperCase();\r\n        while (name.indexOf(\" \") >= 0)\r\n            name = name.replace(\" \", \"_\");\r\n        return pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"BLEND_MODES\"][name] || pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"BLEND_MODES\"].NORMAL;\r\n    }\r\n    ParticleUtils.getBlendMode = getBlendMode;\r\n    /**\r\n     * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\r\n     * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\r\n     * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\r\n     * @param list The list of data to convert.\r\n     * @param [numSteps=10] The number of steps to use.\r\n     * @return The blend mode as specified in the PIXI.blendModes enumeration.\r\n     */\r\n    function createSteppedGradient(list, numSteps) {\r\n        if (numSteps === void 0) { numSteps = 10; }\r\n        if (typeof numSteps !== 'number' || numSteps <= 0)\r\n            numSteps = 10;\r\n        var first = new PropertyNode(ParticleUtils.hexToRGB(list[0].value), list[0].time);\r\n        first.isStepped = true;\r\n        var currentNode = first;\r\n        var current = list[0];\r\n        var nextIndex = 1;\r\n        var next = list[nextIndex];\r\n        for (var i = 1; i < numSteps; ++i) {\r\n            var lerp = i / numSteps;\r\n            //ensure we are on the right segment, if multiple\r\n            while (lerp > next.time) {\r\n                current = next;\r\n                next = list[++nextIndex];\r\n            }\r\n            //convert the lerp value to the segment range\r\n            lerp = (lerp - current.time) / (next.time - current.time);\r\n            var curVal = ParticleUtils.hexToRGB(current.value);\r\n            var nextVal = ParticleUtils.hexToRGB(next.value);\r\n            var output = {\r\n                r: (nextVal.r - curVal.r) * lerp + curVal.r,\r\n                g: (nextVal.g - curVal.g) * lerp + curVal.g,\r\n                b: (nextVal.b - curVal.b) * lerp + curVal.b,\r\n            };\r\n            currentNode.next = new PropertyNode(output, i / numSteps);\r\n            currentNode = currentNode.next;\r\n        }\r\n        //we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\r\n        //the particle has died of old age\r\n        return first;\r\n    }\r\n    ParticleUtils.createSteppedGradient = createSteppedGradient;\r\n})(ParticleUtils || (ParticleUtils = {}));\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\r\n * Singly linked list container for keeping track of interpolated properties for particles.\r\n * Each Particle will have one of these for each interpolated property.\r\n */\r\nvar PropertyList = /** @class */ (function () {\r\n    /**\r\n     * @param isColor If this list handles color values\r\n     */\r\n    function PropertyList(isColor) {\r\n        if (isColor === void 0) { isColor = false; }\r\n        this.current = null;\r\n        this.next = null;\r\n        this.isColor = !!isColor;\r\n        this.interpolate = null;\r\n        this.ease = null;\r\n    }\r\n    /**\r\n     * Resets the list for use.\r\n     * @param first The first node in the list.\r\n     * @param first.isStepped If the values should be stepped instead of interpolated linearly.\r\n     */\r\n    PropertyList.prototype.reset = function (first) {\r\n        this.current = first;\r\n        this.next = first.next;\r\n        var isSimple = this.next && this.next.time >= 1;\r\n        if (isSimple) {\r\n            this.interpolate = this.isColor ? intColorSimple : intValueSimple;\r\n        }\r\n        else if (first.isStepped) {\r\n            this.interpolate = this.isColor ? intColorStepped : intValueStepped;\r\n        }\r\n        else {\r\n            this.interpolate = this.isColor ? intColorComplex : intValueComplex;\r\n        }\r\n        this.ease = this.current.ease;\r\n    };\r\n    return PropertyList;\r\n}());\r\nfunction intValueSimple(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    return (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\nfunction intColorSimple(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    var curVal = this.current.value, nextVal = this.next.value;\r\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n    return ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\nfunction intValueComplex(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    //convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n    return (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\nfunction intColorComplex(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    //convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n    var curVal = this.current.value, nextVal = this.next.value;\r\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n    return ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\nfunction intValueStepped(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    return this.current.value;\r\n}\r\nfunction intColorStepped(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    var curVal = this.current.value;\r\n    return ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\r\n}\n\n/**\r\n * An individual particle image. You shouldn't have to deal with these.\r\n */\r\nvar Particle = /** @class */ (function (_super) {\r\n    __extends(Particle, _super);\r\n    /**\r\n     * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\r\n     */\r\n    function Particle(emitter) {\r\n        var _this = \r\n        //start off the sprite with a blank texture, since we are going to replace it\r\n        //later when the particle is initialized.\r\n        _super.call(this) || this;\r\n        _this.emitter = emitter;\r\n        //particles should be centered\r\n        _this.anchor.x = _this.anchor.y = 0.5;\r\n        _this.velocity = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\n        _this.rotationSpeed = 0;\r\n        _this.rotationAcceleration = 0;\r\n        _this.maxLife = 0;\r\n        _this.age = 0;\r\n        _this.ease = null;\r\n        _this.extraData = null;\r\n        _this.alphaList = new PropertyList();\r\n        _this.speedList = new PropertyList();\r\n        _this.speedMultiplier = 1;\r\n        _this.acceleration = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\n        _this.maxSpeed = NaN;\r\n        _this.scaleList = new PropertyList();\r\n        _this.scaleMultiplier = 1;\r\n        _this.colorList = new PropertyList(true);\r\n        _this._doAlpha = false;\r\n        _this._doScale = false;\r\n        _this._doSpeed = false;\r\n        _this._doAcceleration = false;\r\n        _this._doColor = false;\r\n        _this._doNormalMovement = false;\r\n        _this._oneOverLife = 0;\r\n        _this.next = null;\r\n        _this.prev = null;\r\n        //save often used functions on the instance instead of the prototype for better speed\r\n        _this.init = _this.init;\r\n        _this.Particle_init = Particle.prototype.init;\r\n        _this.update = _this.update;\r\n        _this.Particle_update = Particle.prototype.update;\r\n        _this.Sprite_destroy = _super.prototype.destroy;\r\n        _this.Particle_destroy = Particle.prototype.destroy;\r\n        _this.applyArt = _this.applyArt;\r\n        _this.kill = _this.kill;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     */\r\n    Particle.prototype.init = function () {\r\n        //reset the age\r\n        this.age = 0;\r\n        //set up the velocity based on the start speed and rotation\r\n        this.velocity.x = this.speedList.current.value * this.speedMultiplier;\r\n        this.velocity.y = 0;\r\n        ParticleUtils.rotatePoint(this.rotation, this.velocity);\r\n        if (this.noRotation) {\r\n            this.rotation = 0;\r\n        }\r\n        else {\r\n            //convert rotation to Radians from Degrees\r\n            this.rotation *= ParticleUtils.DEG_TO_RADS;\r\n        }\r\n        //convert rotation speed to Radians from Degrees\r\n        this.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\r\n        this.rotationAcceleration *= ParticleUtils.DEG_TO_RADS;\r\n        //set alpha to inital alpha\r\n        this.alpha = this.alphaList.current.value;\r\n        //set scale to initial scale\r\n        this.scale.x = this.scale.y = this.scaleList.current.value;\r\n        //figure out what we need to interpolate\r\n        this._doAlpha = !!this.alphaList.current.next;\r\n        this._doSpeed = !!this.speedList.current.next;\r\n        this._doScale = !!this.scaleList.current.next;\r\n        this._doColor = !!this.colorList.current.next;\r\n        this._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\r\n        //_doNormalMovement can be cancelled by subclasses\r\n        this._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\r\n        //save our lerp helper\r\n        this._oneOverLife = 1 / this.maxLife;\r\n        //set the inital color\r\n        var color = this.colorList.current.value;\r\n        this.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\r\n        //ensure visibility\r\n        this.visible = true;\r\n    };\r\n    /**\r\n     * Sets the texture for the particle. This can be overridden to allow\r\n     * for an animated particle.\r\n     * @param art The texture to set.\r\n     */\r\n    Particle.prototype.applyArt = function (art) {\r\n        this.texture = art || pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"].EMPTY;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     * @return The standard interpolation multiplier (0-1) used for all\r\n     *         relevant particle properties. A value of -1 means the particle\r\n     *         died of old age instead.\r\n     */\r\n    Particle.prototype.update = function (delta) {\r\n        //increase age\r\n        this.age += delta;\r\n        //recycle particle if it is too old\r\n        if (this.age >= this.maxLife || this.age < 0) {\r\n            this.kill();\r\n            return -1;\r\n        }\r\n        //determine our interpolation value\r\n        var lerp = this.age * this._oneOverLife; //lifetime / maxLife;\r\n        if (this.ease) {\r\n            if (this.ease.length == 4) {\r\n                //the t, b, c, d parameters that some tween libraries use\r\n                //(time, initial value, end value, duration)\r\n                lerp = this.ease(lerp, 0, 1, 1);\r\n            }\r\n            else {\r\n                //the simplified version that we like that takes\r\n                //one parameter, time from 0-1. TweenJS eases provide this usage.\r\n                lerp = this.ease(lerp);\r\n            }\r\n        }\r\n        //interpolate alpha\r\n        if (this._doAlpha)\r\n            this.alpha = this.alphaList.interpolate(lerp);\r\n        //interpolate scale\r\n        if (this._doScale) {\r\n            var scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\r\n            this.scale.x = this.scale.y = scale;\r\n        }\r\n        //handle movement\r\n        if (this._doNormalMovement) {\r\n            var deltaX = void 0;\r\n            var deltaY = void 0;\r\n            //interpolate speed\r\n            if (this._doSpeed) {\r\n                var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n                ParticleUtils.normalize(this.velocity);\r\n                ParticleUtils.scaleBy(this.velocity, speed);\r\n                deltaX = this.velocity.x * delta;\r\n                deltaY = this.velocity.y * delta;\r\n            }\r\n            else if (this._doAcceleration) {\r\n                var oldVX = this.velocity.x;\r\n                var oldVY = this.velocity.y;\r\n                this.velocity.x += this.acceleration.x * delta;\r\n                this.velocity.y += this.acceleration.y * delta;\r\n                if (this.maxSpeed) {\r\n                    var currentSpeed = ParticleUtils.length(this.velocity);\r\n                    //if we are going faster than we should, clamp at the max speed\r\n                    //DO NOT recalculate vector length\r\n                    if (currentSpeed > this.maxSpeed) {\r\n                        ParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\r\n                    }\r\n                }\r\n                // calculate position delta by the midpoint between our old velocity and our new velocity\r\n                deltaX = (oldVX + this.velocity.x) / 2 * delta;\r\n                deltaY = (oldVY + this.velocity.y) / 2 * delta;\r\n            }\r\n            else {\r\n                deltaX = this.velocity.x * delta;\r\n                deltaY = this.velocity.y * delta;\r\n            }\r\n            //adjust position based on velocity\r\n            this.position.x += deltaX;\r\n            this.position.y += deltaY;\r\n        }\r\n        //interpolate color\r\n        if (this._doColor) {\r\n            this.tint = this.colorList.interpolate(lerp);\r\n        }\r\n        //update rotation\r\n        if (this.rotationAcceleration !== 0) {\r\n            var newRotationSpeed = this.rotationSpeed + this.rotationAcceleration * delta;\r\n            this.rotation += (this.rotationSpeed + newRotationSpeed) / 2 * delta;\r\n            this.rotationSpeed = newRotationSpeed;\r\n        }\r\n        else if (this.rotationSpeed !== 0) {\r\n            this.rotation += this.rotationSpeed * delta;\r\n        }\r\n        else if (this.acceleration && !this.noRotation) {\r\n            this.rotation = Math.atan2(this.velocity.y, this.velocity.x); // + Math.PI / 2;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Kills the particle, removing it from the display list\r\n     * and telling the emitter to recycle it.\r\n     */\r\n    Particle.prototype.kill = function () {\r\n        this.emitter.recycle(this);\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     */\r\n    Particle.prototype.destroy = function () {\r\n        if (this.parent)\r\n            this.parent.removeChild(this);\r\n        this.Sprite_destroy();\r\n        this.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\r\n            this.speedList = this.ease = this.next = this.prev = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @param art The array of art data. For Particle, it should be an array of\r\n     *            Textures. Any strings in the array will be converted to\r\n     *            Textures via Texture.from().\r\n     * @return The art, after any needed modifications.\r\n     */\r\n    Particle.parseArt = function (art) {\r\n        //convert any strings to Textures.\r\n        var i;\r\n        for (i = art.length; i >= 0; --i) {\r\n            if (typeof art[i] == \"string\")\r\n                art[i] = GetTextureFromString(art[i]);\r\n        }\r\n        //particles from different base textures will be slower in WebGL than if they\r\n        //were from one spritesheet\r\n        if (ParticleUtils.verbose) {\r\n            for (i = art.length - 1; i > 0; --i) {\r\n                if (art[i].baseTexture != art[i - 1].baseTexture) {\r\n                    if (window.console)\r\n                        console.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return art;\r\n    };\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * Particle does nothing to the extra data.\r\n     * @param extraData The extra data from the particle config.\r\n     * @return The parsed extra data.\r\n     */\r\n    Particle.parseData = function (extraData) {\r\n        return extraData;\r\n    };\r\n    return Particle;\r\n}(pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Sprite\"]));\n\n/**\r\n * Chain of line segments for generating spawn positions.\r\n */\r\nvar PolygonalChain = /** @class */ (function () {\r\n    /**\r\n     * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n     */\r\n    function PolygonalChain(data) {\r\n        this.segments = [];\r\n        this.countingLengths = [];\r\n        this.totalLength = 0;\r\n        this.init(data);\r\n    }\r\n    /**\r\n     * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n     */\r\n    PolygonalChain.prototype.init = function (data) {\r\n        // if data is not present, set up a segment of length 0\r\n        if (!data || !data.length) {\r\n            this.segments.push({ p1: { x: 0, y: 0 }, p2: { x: 0, y: 0 }, l: 0 });\r\n        }\r\n        else {\r\n            if (Array.isArray(data[0])) {\r\n                // list of segment chains, each defined as a list of points\r\n                for (var i = 0; i < data.length; ++i) {\r\n                    // loop through the chain, connecting points\r\n                    var chain = data[i];\r\n                    var prevPoint = chain[0];\r\n                    for (var j = 1; j < chain.length; ++j) {\r\n                        var second = chain[j];\r\n                        this.segments.push({ p1: prevPoint, p2: second, l: 0 });\r\n                        prevPoint = second;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                var prevPoint = data[0];\r\n                // list of points\r\n                for (var i = 1; i < data.length; ++i) {\r\n                    var second = data[i];\r\n                    this.segments.push({ p1: prevPoint, p2: second, l: 0 });\r\n                    prevPoint = second;\r\n                }\r\n            }\r\n        }\r\n        // now go through our segments to calculate the lengths so that we\r\n        // can set up a nice weighted random distribution\r\n        for (var i = 0; i < this.segments.length; ++i) {\r\n            var _a = this.segments[i], p1 = _a.p1, p2 = _a.p2;\r\n            var segLength = Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\r\n            // save length so we can turn a random number into a 0-1 interpolation value later\r\n            this.segments[i].l = segLength;\r\n            this.totalLength += segLength;\r\n            // keep track of the length so far, counting up\r\n            this.countingLengths.push(this.totalLength);\r\n        }\r\n    };\r\n    /**\r\n     * Gets a random point in the chain.\r\n     * @param out The point to store the selected position in.\r\n     */\r\n    PolygonalChain.prototype.getRandomPoint = function (out) {\r\n        // select a random spot in the length of the chain\r\n        var rand = Math.random() * this.totalLength;\r\n        var chosenSeg;\r\n        var lerp;\r\n        // if only one segment, it wins\r\n        if (this.segments.length === 1) {\r\n            chosenSeg = this.segments[0];\r\n            lerp = rand;\r\n        }\r\n        else {\r\n            // otherwise, go through countingLengths until we have determined\r\n            // which segment we chose\r\n            for (var i = 0; i < this.countingLengths.length; ++i) {\r\n                if (rand < this.countingLengths[i]) {\r\n                    chosenSeg = this.segments[i];\r\n                    // set lerp equal to the length into that segment (i.e. the remainder after subtracting all the segments before it)\r\n                    lerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // divide lerp by the segment length, to result in a 0-1 number.\r\n        lerp /= chosenSeg.l || 1;\r\n        var p1 = chosenSeg.p1, p2 = chosenSeg.p2;\r\n        // now calculate the position in the segment that the lerp value represents\r\n        out.x = p1.x + lerp * (p2.x - p1.x);\r\n        out.y = p1.y + lerp * (p2.y - p1.y);\r\n    };\r\n    return PolygonalChain;\r\n}());\n\n// get the shared ticker, in V4 and V5 friendly methods\r\n/**\r\n * @hidden\r\n */\r\nvar ticker;\r\n// to avoid Rollup transforming our import, save pixi namespace in a variable\r\nvar pixiNS$1 = pixi_js__WEBPACK_IMPORTED_MODULE_0__;\r\nif (parseInt(/^(\\d+)\\./.exec(pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"VERSION\"])[1]) < 5) {\r\n    ticker = pixiNS$1.ticker.shared;\r\n}\r\nelse {\r\n    ticker = pixiNS$1.Ticker.shared;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nvar helperPoint = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\n/**\r\n * A particle emitter.\r\n */\r\nvar Emitter = /** @class */ (function () {\r\n    /**\r\n     * @param particleParent The container to add the particles to.\r\n     * @param particleImages A texture or array of textures to use\r\n     *                       for the particles. Strings will be turned\r\n     *                       into textures via Texture.fromImage().\r\n     * @param config A configuration object containing settings for the emitter.\r\n     * @param config.emit If config.emit is explicitly passed as false, the\r\n     *                    Emitter will start disabled.\r\n     * @param config.autoUpdate If config.autoUpdate is explicitly passed as\r\n     *                          true, the Emitter will automatically call\r\n     *                          update via the PIXI shared ticker.\r\n     */\r\n    function Emitter(particleParent, particleImages, config) {\r\n        /**\r\n         * A number keeping index of currently applied image. Used to emit arts in order.\r\n         */\r\n        this._currentImageIndex = -1;\r\n        this._particleConstructor = Particle;\r\n        //properties for individual particles\r\n        this.particleImages = null;\r\n        this.startAlpha = null;\r\n        this.startSpeed = null;\r\n        this.minimumSpeedMultiplier = 1;\r\n        this.acceleration = null;\r\n        this.maxSpeed = NaN;\r\n        this.startScale = null;\r\n        this.minimumScaleMultiplier = 1;\r\n        this.startColor = null;\r\n        this.minLifetime = 0;\r\n        this.maxLifetime = 0;\r\n        this.minStartRotation = 0;\r\n        this.maxStartRotation = 0;\r\n        this.noRotation = false;\r\n        this.minRotationSpeed = 0;\r\n        this.maxRotationSpeed = 0;\r\n        this.particleBlendMode = 0;\r\n        this.customEase = null;\r\n        this.extraData = null;\r\n        //properties for spawning particles\r\n        this._frequency = 1;\r\n        this.spawnChance = 1;\r\n        this.maxParticles = 1000;\r\n        this.emitterLifetime = -1;\r\n        this.spawnPos = null;\r\n        this.spawnType = null;\r\n        this._spawnFunc = null;\r\n        this.spawnRect = null;\r\n        this.spawnCircle = null;\r\n        this.spawnPolygonalChain = null;\r\n        this.particlesPerWave = 1;\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        //emitter properties\r\n        this.rotation = 0;\r\n        this.ownerPos = null;\r\n        this._prevEmitterPos = null;\r\n        this._prevPosIsValid = false;\r\n        this._posChanged = false;\r\n        this._parent = null;\r\n        this.addAtBack = false;\r\n        this.particleCount = 0;\r\n        this._emit = false;\r\n        this._spawnTimer = 0;\r\n        this._emitterLife = -1;\r\n        this._activeParticlesFirst = null;\r\n        this._activeParticlesLast = null;\r\n        this._poolFirst = null;\r\n        this._origConfig = null;\r\n        this._origArt = null;\r\n        this._autoUpdate = false;\r\n        this._currentImageIndex = -1;\r\n        this._destroyWhenComplete = false;\r\n        this._completeCallback = null;\r\n        //set the initial parent\r\n        this.parent = particleParent;\r\n        if (particleImages && config)\r\n            this.init(particleImages, config);\r\n        //save often used functions on the instance instead of the prototype for better speed\r\n        this.recycle = this.recycle;\r\n        this.update = this.update;\r\n        this.rotate = this.rotate;\r\n        this.updateSpawnPos = this.updateSpawnPos;\r\n        this.updateOwnerPos = this.updateOwnerPos;\r\n    }\r\n    Object.defineProperty(Emitter.prototype, \"orderedArt\", {\r\n        /**\r\n         * If the emitter is using particle art in order as provided in `particleImages`.\r\n         * Effective only when `particleImages` has multiple art options.\r\n         * This is particularly useful ensuring that each art shows up once, in case you need to emit a body in an order.\r\n         * For example: dragon - [Head, body1, body2, ..., tail]\r\n         */\r\n        get: function () { return this._currentImageIndex !== -1; },\r\n        set: function (value) {\r\n            this._currentImageIndex = value ? 0 : -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"frequency\", {\r\n        /**\r\n         * Time between particle spawns in seconds. If this value is not a number greater than 0,\r\n         * it will be set to 1 (particle per second) to prevent infinite loops.\r\n         */\r\n        get: function () { return this._frequency; },\r\n        set: function (value) {\r\n            //do some error checking to prevent infinite loops\r\n            if (typeof value == \"number\" && value > 0)\r\n                this._frequency = value;\r\n            else\r\n                this._frequency = 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"particleConstructor\", {\r\n        /**\r\n         * The constructor used to create new particles. The default is\r\n         * the built in Particle class. Setting this will dump any active or\r\n         * pooled particles, if the emitter has already been used.\r\n         */\r\n        get: function () { return this._particleConstructor; },\r\n        set: function (value) {\r\n            if (value != this._particleConstructor) {\r\n                this._particleConstructor = value;\r\n                //clean up existing particles\r\n                this.cleanup();\r\n                //scrap all the particles\r\n                for (var particle = this._poolFirst; particle; particle = particle.next) {\r\n                    particle.destroy();\r\n                }\r\n                this._poolFirst = null;\r\n                //re-initialize the emitter so that the new constructor can do anything it needs to\r\n                if (this._origConfig && this._origArt)\r\n                    this.init(this._origArt, this._origConfig);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"parent\", {\r\n        /**\r\n        * The container to add particles to. Settings this will dump any active particles.\r\n        */\r\n        get: function () { return this._parent; },\r\n        set: function (value) {\r\n            this.cleanup();\r\n            this._parent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets up the emitter based on the config settings.\r\n     * @param art A texture or array of textures to use for the particles.\r\n     * @param config A configuration object containing settings for the emitter.\r\n     */\r\n    Emitter.prototype.init = function (art, config) {\r\n        if (!art || !config)\r\n            return;\r\n        //clean up any existing particles\r\n        this.cleanup();\r\n        //store the original config and particle images, in case we need to re-initialize\r\n        //when the particle constructor is changed\r\n        this._origConfig = config;\r\n        this._origArt = art;\r\n        //set up the array of data, also ensuring that it is an array\r\n        art = Array.isArray(art) ? art.slice() : [art];\r\n        //run the art through the particle class's parsing function\r\n        var partClass = this._particleConstructor;\r\n        this.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\r\n        ///////////////////////////\r\n        // Particle Properties   //\r\n        ///////////////////////////\r\n        //set up the alpha\r\n        if (config.alpha) {\r\n            this.startAlpha = PropertyNode.createList(config.alpha);\r\n        }\r\n        else\r\n            this.startAlpha = new PropertyNode(1, 0);\r\n        //set up the speed\r\n        if (config.speed) {\r\n            this.startSpeed = PropertyNode.createList(config.speed);\r\n            this.minimumSpeedMultiplier = ('minimumSpeedMultiplier' in config ? config.minimumSpeedMultiplier : config.speed.minimumSpeedMultiplier) || 1;\r\n        }\r\n        else {\r\n            this.minimumSpeedMultiplier = 1;\r\n            this.startSpeed = new PropertyNode(0, 0);\r\n        }\r\n        //set up acceleration\r\n        var acceleration = config.acceleration;\r\n        if (acceleration && (acceleration.x || acceleration.y)) {\r\n            //make sure we disable speed interpolation\r\n            this.startSpeed.next = null;\r\n            this.acceleration = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](acceleration.x, acceleration.y);\r\n            this.maxSpeed = config.maxSpeed || NaN;\r\n        }\r\n        else\r\n            this.acceleration = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\n        //set up the scale\r\n        if (config.scale) {\r\n            this.startScale = PropertyNode.createList(config.scale);\r\n            this.minimumScaleMultiplier = ('minimumScaleMultiplier' in config ? config.minimumScaleMultiplier : config.scale.minimumScaleMultiplier) || 1;\r\n        }\r\n        else {\r\n            this.startScale = new PropertyNode(1, 0);\r\n            this.minimumScaleMultiplier = 1;\r\n        }\r\n        //set up the color\r\n        if (config.color) {\r\n            this.startColor = PropertyNode.createList(config.color);\r\n        }\r\n        else {\r\n            this.startColor = new PropertyNode({ r: 0xFF, g: 0xFF, b: 0xFF }, 0);\r\n        }\r\n        //set up the start rotation\r\n        if (config.startRotation) {\r\n            this.minStartRotation = config.startRotation.min;\r\n            this.maxStartRotation = config.startRotation.max;\r\n        }\r\n        else\r\n            this.minStartRotation = this.maxStartRotation = 0;\r\n        if (config.noRotation &&\r\n            (this.minStartRotation || this.maxStartRotation)) {\r\n            this.noRotation = !!config.noRotation;\r\n        }\r\n        else\r\n            this.noRotation = false;\r\n        //set up the rotation speed\r\n        if (config.rotationSpeed) {\r\n            this.minRotationSpeed = config.rotationSpeed.min;\r\n            this.maxRotationSpeed = config.rotationSpeed.max;\r\n        }\r\n        else\r\n            this.minRotationSpeed = this.maxRotationSpeed = 0;\r\n        this.rotationAcceleration = config.rotationAcceleration || 0;\r\n        //set up the lifetime\r\n        this.minLifetime = config.lifetime.min;\r\n        this.maxLifetime = config.lifetime.max;\r\n        //get the blend mode\r\n        this.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\r\n        //use the custom ease if provided\r\n        if (config.ease) {\r\n            this.customEase = typeof config.ease == \"function\" ?\r\n                config.ease : ParticleUtils.generateEase(config.ease);\r\n        }\r\n        else\r\n            this.customEase = null;\r\n        //set up the extra data, running it through the particle class's parseData function.\r\n        if (partClass.parseData)\r\n            this.extraData = partClass.parseData(config.extraData);\r\n        else\r\n            this.extraData = config.extraData || null;\r\n        //////////////////////////\r\n        // Emitter Properties   //\r\n        //////////////////////////\r\n        //reset spawn type specific settings\r\n        this.spawnRect = this.spawnCircle = null;\r\n        this.particlesPerWave = 1;\r\n        if (config.particlesPerWave && config.particlesPerWave > 1)\r\n            this.particlesPerWave = config.particlesPerWave;\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        //determine the spawn function to use\r\n        this.parseSpawnType(config);\r\n        //set the spawning frequency\r\n        this.frequency = config.frequency;\r\n        this.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\r\n        //set the emitter lifetime\r\n        this.emitterLifetime = config.emitterLifetime || -1;\r\n        //set the max particles\r\n        this.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\r\n        //determine if we should add the particle at the back of the list or not\r\n        this.addAtBack = !!config.addAtBack;\r\n        //reset the emitter position and rotation variables\r\n        this.rotation = 0;\r\n        this.ownerPos = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\n        this.spawnPos = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](config.pos.x, config.pos.y);\r\n        this.initAdditional(art, config);\r\n        this._prevEmitterPos = this.spawnPos.clone();\r\n        //previous emitter position is invalid and should not be used for interpolation\r\n        this._prevPosIsValid = false;\r\n        //start emitting\r\n        this._spawnTimer = 0;\r\n        this.emit = config.emit === undefined ? true : !!config.emit;\r\n        this.autoUpdate = !!config.autoUpdate;\r\n        this.orderedArt = !!config.orderedArt;\r\n    };\r\n    /**\r\n     * Sets up additional parameters to the emitter from config settings.\r\n     * Using for parsing additional parameters on classes that extend from Emitter\r\n     * @param art A texture or array of textures to use for the particles.\r\n     * @param config A configuration object containing settings for the emitter.\r\n     */\r\n    Emitter.prototype.initAdditional = function (art, config) {\r\n    };\r\n    /**\r\n     * Parsing emitter spawn type from config settings.\r\n     * Place for override and add new kind of spawn type\r\n     * @param config A configuration object containing settings for the emitter.\r\n     */\r\n    Emitter.prototype.parseSpawnType = function (config) {\r\n        var spawnCircle;\r\n        switch (config.spawnType) {\r\n            case \"rect\":\r\n                this.spawnType = \"rect\";\r\n                this._spawnFunc = this._spawnRect;\r\n                var spawnRect = config.spawnRect;\r\n                this.spawnRect = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Rectangle\"](spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\r\n                break;\r\n            case \"circle\":\r\n                this.spawnType = \"circle\";\r\n                this._spawnFunc = this._spawnCircle;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Circle\"](spawnCircle.x, spawnCircle.y, spawnCircle.r);\r\n                break;\r\n            case \"ring\":\r\n                this.spawnType = \"ring\";\r\n                this._spawnFunc = this._spawnRing;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Circle\"](spawnCircle.x, spawnCircle.y, spawnCircle.r);\r\n                this.spawnCircle.minRadius = spawnCircle.minR;\r\n                break;\r\n            case \"burst\":\r\n                this.spawnType = \"burst\";\r\n                this._spawnFunc = this._spawnBurst;\r\n                this.particleSpacing = config.particleSpacing;\r\n                this.angleStart = config.angleStart ? config.angleStart : 0;\r\n                break;\r\n            case \"point\":\r\n                this.spawnType = \"point\";\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n            case \"polygonalChain\":\r\n                this.spawnType = \"polygonalChain\";\r\n                this._spawnFunc = this._spawnPolygonalChain;\r\n                this.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\r\n                break;\r\n            default:\r\n                this.spawnType = \"point\";\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Recycles an individual particle. For internal use only.\r\n     * @param particle The particle to recycle.\r\n     * @internal\r\n     */\r\n    Emitter.prototype.recycle = function (particle) {\r\n        if (particle.next)\r\n            particle.next.prev = particle.prev;\r\n        if (particle.prev)\r\n            particle.prev.next = particle.next;\r\n        if (particle == this._activeParticlesLast)\r\n            this._activeParticlesLast = particle.prev;\r\n        if (particle == this._activeParticlesFirst)\r\n            this._activeParticlesFirst = particle.next;\r\n        //add to pool\r\n        particle.prev = null;\r\n        particle.next = this._poolFirst;\r\n        this._poolFirst = particle;\r\n        //remove child from display, or make it invisible if it is in a ParticleContainer\r\n        if (particle.parent)\r\n            particle.parent.removeChild(particle);\r\n        //decrease count\r\n        --this.particleCount;\r\n    };\r\n    /**\r\n     * Sets the rotation of the emitter to a new value.\r\n     * @param newRot The new rotation, in degrees.\r\n     */\r\n    Emitter.prototype.rotate = function (newRot) {\r\n        if (this.rotation == newRot)\r\n            return;\r\n        //caclulate the difference in rotation for rotating spawnPos\r\n        var diff = newRot - this.rotation;\r\n        this.rotation = newRot;\r\n        //rotate spawnPos\r\n        ParticleUtils.rotatePoint(diff, this.spawnPos);\r\n        //mark the position as having changed\r\n        this._posChanged = true;\r\n    };\r\n    /**\r\n     * Changes the spawn position of the emitter.\r\n     * @param x The new x value of the spawn position for the emitter.\r\n     * @param y The new y value of the spawn position for the emitter.\r\n     */\r\n    Emitter.prototype.updateSpawnPos = function (x, y) {\r\n        this._posChanged = true;\r\n        this.spawnPos.x = x;\r\n        this.spawnPos.y = y;\r\n    };\r\n    /**\r\n     * Changes the position of the emitter's owner. You should call this if you are adding\r\n     * particles to the world container that your emitter's owner is moving around in.\r\n     * @param x The new x value of the emitter's owner.\r\n     * @param y The new y value of the emitter's owner.\r\n     */\r\n    Emitter.prototype.updateOwnerPos = function (x, y) {\r\n        this._posChanged = true;\r\n        this.ownerPos.x = x;\r\n        this.ownerPos.y = y;\r\n    };\r\n    /**\r\n     * Prevents emitter position interpolation in the next update.\r\n     * This should be used if you made a major position change of your emitter's owner\r\n     * that was not normal movement.\r\n     */\r\n    Emitter.prototype.resetPositionTracking = function () {\r\n        this._prevPosIsValid = false;\r\n    };\r\n    Object.defineProperty(Emitter.prototype, \"emit\", {\r\n        /**\r\n         * If particles should be emitted during update() calls. Setting this to false\r\n         * stops new particles from being created, but allows existing ones to die out.\r\n         */\r\n        get: function () { return this._emit; },\r\n        set: function (value) {\r\n            this._emit = !!value;\r\n            this._emitterLife = this.emitterLifetime;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"autoUpdate\", {\r\n        /**\r\n         * If the update function is called automatically from the shared ticker.\r\n         * Setting this to false requires calling the update function manually.\r\n         */\r\n        get: function () { return this._autoUpdate; },\r\n        set: function (value) {\r\n            if (this._autoUpdate && !value) {\r\n                ticker.remove(this.update, this);\r\n            }\r\n            else if (!this._autoUpdate && value) {\r\n                ticker.add(this.update, this);\r\n            }\r\n            this._autoUpdate = !!value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\r\n     * when particle emission is complete.\r\n     * @param callback Callback for when emission is complete (all particles have died off)\r\n     */\r\n    Emitter.prototype.playOnceAndDestroy = function (callback) {\r\n        this.autoUpdate = true;\r\n        this.emit = true;\r\n        this._destroyWhenComplete = true;\r\n        this._completeCallback = callback;\r\n    };\r\n    /**\r\n     * Starts emitting particles and optionally calls a callback when particle emission is complete.\r\n     * @param callback Callback for when emission is complete (all particles have died off)\r\n     */\r\n    Emitter.prototype.playOnce = function (callback) {\r\n        this.emit = true;\r\n        this._completeCallback = callback;\r\n    };\r\n    /**\r\n     * Updates all particles spawned by this emitter and emits new ones.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    Emitter.prototype.update = function (delta) {\r\n        if (this._autoUpdate) {\r\n            delta = delta / pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"settings\"].TARGET_FPMS / 1000;\r\n        }\r\n        //if we don't have a parent to add particles to, then don't do anything.\r\n        //this also works as a isDestroyed check\r\n        if (!this._parent)\r\n            return;\r\n        //update existing particles\r\n        var i, particle, next;\r\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\r\n            next = particle.next;\r\n            particle.update(delta);\r\n        }\r\n        var prevX, prevY;\r\n        //if the previous position is valid, store these for later interpolation\r\n        if (this._prevPosIsValid) {\r\n            prevX = this._prevEmitterPos.x;\r\n            prevY = this._prevEmitterPos.y;\r\n        }\r\n        //store current position of the emitter as local variables\r\n        var curX = this.ownerPos.x + this.spawnPos.x;\r\n        var curY = this.ownerPos.y + this.spawnPos.y;\r\n        //spawn new particles\r\n        if (this._emit) {\r\n            //decrease spawn timer\r\n            this._spawnTimer -= delta < 0 ? 0 : delta;\r\n            //while _spawnTimer < 0, we have particles to spawn\r\n            while (this._spawnTimer <= 0) {\r\n                //determine if the emitter should stop spawning\r\n                if (this._emitterLife > 0) {\r\n                    this._emitterLife -= this._frequency;\r\n                    if (this._emitterLife <= 0) {\r\n                        this._spawnTimer = 0;\r\n                        this._emitterLife = 0;\r\n                        this.emit = false;\r\n                        break;\r\n                    }\r\n                }\r\n                //determine if we have hit the particle limit\r\n                if (this.particleCount >= this.maxParticles) {\r\n                    this._spawnTimer += this._frequency;\r\n                    continue;\r\n                }\r\n                //determine the particle lifetime\r\n                var lifetime = void 0;\r\n                if (this.minLifetime == this.maxLifetime)\r\n                    lifetime = this.minLifetime;\r\n                else\r\n                    lifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\r\n                //only make the particle if it wouldn't immediately destroy itself\r\n                if (-this._spawnTimer < lifetime) {\r\n                    //If the position has changed and this isn't the first spawn,\r\n                    //interpolate the spawn position\r\n                    var emitPosX = void 0, emitPosY = void 0;\r\n                    if (this._prevPosIsValid && this._posChanged) {\r\n                        //1 - _spawnTimer / delta, but _spawnTimer is negative\r\n                        var lerp = 1 + this._spawnTimer / delta;\r\n                        emitPosX = (curX - prevX) * lerp + prevX;\r\n                        emitPosY = (curY - prevY) * lerp + prevY;\r\n                    }\r\n                    else //otherwise just set to the spawn position\r\n                     {\r\n                        emitPosX = curX;\r\n                        emitPosY = curY;\r\n                    }\r\n                    //create enough particles to fill the wave (non-burst types have a wave of 1)\r\n                    i = 0;\r\n                    for (var len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i) {\r\n                        //see if we actually spawn one\r\n                        if (this.spawnChance < 1 && Math.random() >= this.spawnChance)\r\n                            continue;\r\n                        //create particle\r\n                        var p = void 0;\r\n                        if (this._poolFirst) {\r\n                            p = this._poolFirst;\r\n                            this._poolFirst = this._poolFirst.next;\r\n                            p.next = null;\r\n                        }\r\n                        else {\r\n                            p = new this.particleConstructor(this);\r\n                        }\r\n                        //set a random texture if we have more than one\r\n                        if (this.particleImages.length > 1) {\r\n                            // if using ordered art\r\n                            if (this._currentImageIndex !== -1) {\r\n                                // get current art index, then increment for the next particle\r\n                                p.applyArt(this.particleImages[this._currentImageIndex++]);\r\n                                // loop around if needed\r\n                                if (this._currentImageIndex < 0 || this._currentImageIndex >= this.particleImages.length) {\r\n                                    this._currentImageIndex = 0;\r\n                                }\r\n                            }\r\n                            // otherwise grab a random one\r\n                            else {\r\n                                p.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            //if they are actually the same texture, a standard particle\r\n                            //will quit early from the texture setting in setTexture().\r\n                            p.applyArt(this.particleImages[0]);\r\n                        }\r\n                        //set up the start and end values\r\n                        p.alphaList.reset(this.startAlpha);\r\n                        if (this.minimumSpeedMultiplier != 1) {\r\n                            p.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\r\n                        }\r\n                        p.speedList.reset(this.startSpeed);\r\n                        p.acceleration.x = this.acceleration.x;\r\n                        p.acceleration.y = this.acceleration.y;\r\n                        p.maxSpeed = this.maxSpeed;\r\n                        if (this.minimumScaleMultiplier != 1) {\r\n                            p.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\r\n                        }\r\n                        p.scaleList.reset(this.startScale);\r\n                        p.colorList.reset(this.startColor);\r\n                        //randomize the rotation speed\r\n                        if (this.minRotationSpeed == this.maxRotationSpeed)\r\n                            p.rotationSpeed = this.minRotationSpeed;\r\n                        else\r\n                            p.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\r\n                        p.rotationAcceleration = this.rotationAcceleration;\r\n                        p.noRotation = this.noRotation;\r\n                        //set up the lifetime\r\n                        p.maxLife = lifetime;\r\n                        //set the blend mode\r\n                        p.blendMode = this.particleBlendMode;\r\n                        //set the custom ease, if any\r\n                        p.ease = this.customEase;\r\n                        //set the extra data, if any\r\n                        p.extraData = this.extraData;\r\n                        //set additional properties to particle\r\n                        this.applyAdditionalProperties(p);\r\n                        //call the proper function to handle rotation and position of particle\r\n                        this._spawnFunc(p, emitPosX, emitPosY, i);\r\n                        //initialize particle\r\n                        p.init();\r\n                        //update the particle by the time passed, so the particles are spread out properly\r\n                        p.update(-this._spawnTimer); //we want a positive delta, because a negative delta messes things up\r\n                        //add the particle to the display list\r\n                        if (!p.parent) {\r\n                            if (this.addAtBack)\r\n                                this._parent.addChildAt(p, 0);\r\n                            else\r\n                                this._parent.addChild(p);\r\n                        }\r\n                        else {\r\n                            //kind of hacky, but performance friendly\r\n                            //shuffle children to correct place\r\n                            var children = this._parent.children;\r\n                            //avoid using splice if possible\r\n                            if (children[0] == p)\r\n                                children.shift();\r\n                            else if (children[children.length - 1] == p)\r\n                                children.pop();\r\n                            else {\r\n                                var index = children.indexOf(p);\r\n                                children.splice(index, 1);\r\n                            }\r\n                            if (this.addAtBack)\r\n                                children.unshift(p);\r\n                            else\r\n                                children.push(p);\r\n                        }\r\n                        //add particle to list of active particles\r\n                        if (this._activeParticlesLast) {\r\n                            this._activeParticlesLast.next = p;\r\n                            p.prev = this._activeParticlesLast;\r\n                            this._activeParticlesLast = p;\r\n                        }\r\n                        else {\r\n                            this._activeParticlesLast = this._activeParticlesFirst = p;\r\n                        }\r\n                        ++this.particleCount;\r\n                    }\r\n                }\r\n                //increase timer and continue on to any other particles that need to be created\r\n                this._spawnTimer += this._frequency;\r\n            }\r\n        }\r\n        //if the position changed before this update, then keep track of that\r\n        if (this._posChanged) {\r\n            this._prevEmitterPos.x = curX;\r\n            this._prevEmitterPos.y = curY;\r\n            this._prevPosIsValid = true;\r\n            this._posChanged = false;\r\n        }\r\n        //if we are all done and should destroy ourselves, take care of that\r\n        if (!this._emit && !this._activeParticlesFirst) {\r\n            if (this._completeCallback) {\r\n                var cb = this._completeCallback;\r\n                this._completeCallback = null;\r\n                cb();\r\n            }\r\n            if (this._destroyWhenComplete) {\r\n                this.destroy();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set additional properties to new particle.\r\n     * Using on classes that extend from Emitter\r\n     * @param p The particle\r\n     */\r\n    Emitter.prototype.applyAdditionalProperties = function (p) {\r\n    };\r\n    /**\r\n     * Positions a particle for a point type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnPoint = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on\r\n        //starting particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n        //drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    };\r\n    /**\r\n     * Positions a particle for a rectangle type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnRect = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n        //place the particle at a random point in the rectangle\r\n        helperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\r\n        helperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\r\n        if (this.rotation !== 0)\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a circle type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnCircle = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        //place the particle at a random radius in the circle\r\n        helperPoint.x = Math.random() * this.spawnCircle.radius;\r\n        helperPoint.y = 0;\r\n        //rotate the point to a random angle in the circle\r\n        ParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\r\n        //offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a ring type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnRing = function (p, emitPosX, emitPosY) {\r\n        var spawnCircle = this.spawnCircle;\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        //place the particle at a random radius in the ring\r\n        if (spawnCircle.minRadius !== spawnCircle.radius) {\r\n            helperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\r\n                spawnCircle.minRadius;\r\n        }\r\n        else\r\n            helperPoint.x = spawnCircle.radius;\r\n        helperPoint.y = 0;\r\n        //rotate the point to a random angle in the circle\r\n        var angle = Math.random() * 360;\r\n        p.rotation += angle;\r\n        ParticleUtils.rotatePoint(angle, helperPoint);\r\n        //offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for polygonal chain.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnPolygonalChain = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        // get random point on the polygon chain\r\n        this.spawnPolygonalChain.getRandomPoint(helperPoint);\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a burst type emitter.\r\n     * @param p The particle to position and rotate.\r\n     * @param emitPosX The emitter's x position\r\n     * @param emitPosY The emitter's y position\r\n     * @param i The particle number in the current wave.\r\n     */\r\n    Emitter.prototype._spawnBurst = function (p, emitPosX, emitPosY, i) {\r\n        //set the initial rotation/direction of the particle based on spawn\r\n        //angle and rotation of emitter\r\n        if (this.particleSpacing === 0)\r\n            p.rotation = Math.random() * 360;\r\n        else\r\n            p.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\r\n        //drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    };\r\n    /**\r\n     * Kills all active particles immediately.\r\n     */\r\n    Emitter.prototype.cleanup = function () {\r\n        var particle, next;\r\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\r\n            next = particle.next;\r\n            this.recycle(particle);\r\n            if (particle.parent)\r\n                particle.parent.removeChild(particle);\r\n        }\r\n        this._activeParticlesFirst = this._activeParticlesLast = null;\r\n        this.particleCount = 0;\r\n    };\r\n    /**\r\n     * Destroys the emitter and all of its particles.\r\n     */\r\n    Emitter.prototype.destroy = function () {\r\n        //make sure we aren't still listening to any tickers\r\n        this.autoUpdate = false;\r\n        //puts all active particles in the pool, and removes them from the particle parent\r\n        this.cleanup();\r\n        //wipe the pool clean\r\n        var next;\r\n        for (var particle = this._poolFirst; particle; particle = next) {\r\n            //store next value so we don't lose it in our destroy call\r\n            next = particle.next;\r\n            particle.destroy();\r\n        }\r\n        this._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\r\n            this.startColor = this.startScale = this.startAlpha = this.startSpeed =\r\n                this.customEase = this._completeCallback = null;\r\n    };\r\n    return Emitter;\r\n}());\n\n/**\r\n * A helper point for math things.\r\n * @hidden\r\n */\r\nvar helperPoint$1 = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\n/**\r\n * A hand picked list of Math functions (and a couple properties) that are\r\n * allowable. They should be used without the preceding \"Math.\"\r\n * @hidden\r\n */\r\nvar MATH_FUNCS = [\r\n    \"pow\",\r\n    \"sqrt\",\r\n    \"abs\",\r\n    \"floor\",\r\n    \"round\",\r\n    \"ceil\",\r\n    \"E\",\r\n    \"PI\",\r\n    \"sin\",\r\n    \"cos\",\r\n    \"tan\",\r\n    \"asin\",\r\n    \"acos\",\r\n    \"atan\",\r\n    \"atan2\",\r\n    \"log\"\r\n];\r\n/**\r\n * create an actual regular expression object from the string\r\n * @hidden\r\n */\r\nvar WHITELISTER = new RegExp([\r\n    //Allow the 4 basic operations, parentheses and all numbers/decimals, as well\r\n    //as 'x', for the variable usage.\r\n    \"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\r\n].concat(MATH_FUNCS).join(\"|\"), \"g\");\r\n/**\r\n * Parses a string into a function for path following.\r\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\r\n * names, and using `new Function()` to generate a function.\r\n * @hidden\r\n * @param pathString The string to parse.\r\n * @return The path function - takes x, outputs y.\r\n */\r\nvar parsePath = function (pathString) {\r\n    var matches = pathString.match(WHITELISTER);\r\n    for (var i = matches.length - 1; i >= 0; --i) {\r\n        if (MATH_FUNCS.indexOf(matches[i]) >= 0)\r\n            matches[i] = \"Math.\" + matches[i];\r\n    }\r\n    pathString = matches.join(\"\");\r\n    return new Function(\"x\", \"return \" + pathString + \";\");\r\n};\r\n/**\r\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\r\n * \"5x + 3\".\r\n * To use this class, the particle config must have a \"path\" string in the\r\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\r\n * speed settings of the particle). It may have numbers, parentheses, the four basic\r\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\r\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\r\n * \"acos\", \"atan\", \"atan2\", \"log\".\r\n * The overall movement of the particle and the expression value become x and y positions for\r\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\r\n * the particle.\r\n *\r\n * Some example paths:\r\n *\r\n * \t\"sin(x/10) * 20\" // A sine wave path.\r\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\r\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\r\n */\r\nvar PathParticle = /** @class */ (function (_super) {\r\n    __extends(PathParticle, _super);\r\n    /**\r\n     * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\r\n     */\r\n    function PathParticle(emitter) {\r\n        var _this = _super.call(this, emitter) || this;\r\n        _this.path = null;\r\n        _this.initialRotation = 0;\r\n        _this.initialPosition = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\n        _this.movement = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     */\r\n    PathParticle.prototype.init = function () {\r\n        //get initial rotation before it is converted to radians\r\n        this.initialRotation = this.rotation;\r\n        //standard init\r\n        this.Particle_init();\r\n        //set the path for the particle\r\n        this.path = this.extraData.path;\r\n        //cancel the normal movement behavior\r\n        this._doNormalMovement = !this.path;\r\n        //reset movement\r\n        this.movement = 0;\r\n        //grab position\r\n        this.initialPosition.x = this.position.x;\r\n        this.initialPosition.y = this.position.y;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    PathParticle.prototype.update = function (delta) {\r\n        var lerp = this.Particle_update(delta);\r\n        //if the particle died during the update, then don't bother\r\n        if (lerp >= 0 && this.path) {\r\n            //increase linear movement based on speed\r\n            var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n            this.movement += speed * delta;\r\n            //set up the helper point for rotation\r\n            helperPoint$1.x = this.movement;\r\n            helperPoint$1.y = this.path(this.movement);\r\n            ParticleUtils.rotatePoint(this.initialRotation, helperPoint$1);\r\n            this.position.x = this.initialPosition.x + helperPoint$1.x;\r\n            this.position.y = this.initialPosition.y + helperPoint$1.y;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     */\r\n    PathParticle.prototype.destroy = function () {\r\n        this.Particle_destroy();\r\n        this.path = this.initialPosition = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time. This just runs Particle.parseArt().\r\n     * @param art The array of art data. For Particle, it should be an array of\r\n     *            Textures. Any strings in the array will be converted to\r\n     *            Textures via Texture.fromImage().\r\n     * @return The art, after any needed modifications.\r\n     */\r\n    PathParticle.parseArt = function (art) {\r\n        return Particle.parseArt(art);\r\n    };\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * PathParticle checks for the existence of path data, and parses the path data for use\r\n     * by particle instances.\r\n     * @param extraData The extra data from the particle config.\r\n     * @return The parsed extra data.\r\n     */\r\n    PathParticle.parseData = function (extraData) {\r\n        var output = {};\r\n        if (extraData && extraData.path) {\r\n            try {\r\n                output.path = parsePath(extraData.path);\r\n            }\r\n            catch (e) {\r\n                if (ParticleUtils.verbose)\r\n                    console.error(\"PathParticle: error in parsing path expression\");\r\n                output.path = null;\r\n            }\r\n        }\r\n        else {\r\n            if (ParticleUtils.verbose)\r\n                console.error(\"PathParticle requires a path string in extraData!\");\r\n            output.path = null;\r\n        }\r\n        return output;\r\n    };\r\n    return PathParticle;\r\n}(Particle));\n\n/**\r\n * An individual particle image with an animation. Art data passed to the emitter must be\r\n * formatted in a particular way for AnimatedParticle to be able to handle it:\r\n *\r\n * ```typescript\r\n * {\r\n *     //framerate is required. It is the animation speed of the particle in frames per\r\n *     //second.\r\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\r\n *     //particle, instead of at a constant framerate. This causes the animation to play\r\n *     //through one time, completing when the particle expires.\r\n *     framerate: 6,\r\n *     //loop is optional, and defaults to false.\r\n *     loop: true,\r\n *     //textures is required, and can be an array of any (non-zero) length.\r\n *     textures: [\r\n *         //each entry represents a single texture that should be used for one or more\r\n *         //frames. Any strings will be converted to Textures with Texture.from().\r\n *         //Instances of PIXI.Texture will be used directly.\r\n *         \"animFrame1.png\",\r\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\r\n *         //use that texture for 'count' frames sequentially.\r\n *         {\r\n *             texture: \"animFrame2.png\",\r\n *             count: 3\r\n *         },\r\n *         \"animFrame3.png\"\r\n *     ]\r\n * }\r\n * ```\r\n */\r\nvar AnimatedParticle = /** @class */ (function (_super) {\r\n    __extends(AnimatedParticle, _super);\r\n    /**\r\n     * @param emitter The emitter that controls this AnimatedParticle.\r\n     */\r\n    function AnimatedParticle(emitter) {\r\n        var _this = _super.call(this, emitter) || this;\r\n        _this.textures = null;\r\n        _this.duration = 0;\r\n        _this.framerate = 0;\r\n        _this.elapsed = 0;\r\n        _this.loop = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     */\r\n    AnimatedParticle.prototype.init = function () {\r\n        this.Particle_init();\r\n        this.elapsed = 0;\r\n        //if the animation needs to match the particle's life, then cacluate variables\r\n        if (this.framerate < 0) {\r\n            this.duration = this.maxLife;\r\n            this.framerate = this.textures.length / this.duration;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the textures for the particle.\r\n     * @param art An array of PIXI.Texture objects for this animated particle.\r\n     */\r\n    AnimatedParticle.prototype.applyArt = function (art) {\r\n        this.textures = art.textures;\r\n        this.framerate = art.framerate;\r\n        this.duration = art.duration;\r\n        this.loop = art.loop;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @param delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    AnimatedParticle.prototype.update = function (delta) {\r\n        var lerp = this.Particle_update(delta);\r\n        //only animate the particle if it is still alive\r\n        if (lerp >= 0) {\r\n            this.elapsed += delta;\r\n            if (this.elapsed > this.duration) {\r\n                //loop elapsed back around\r\n                if (this.loop)\r\n                    this.elapsed = this.elapsed % this.duration;\r\n                //subtract a small amount to prevent attempting to go past the end of the animation\r\n                else\r\n                    this.elapsed = this.duration - 0.000001;\r\n            }\r\n            // add a very small number to the frame and then floor it to avoid\r\n            // the frame being one short due to floating point errors.\r\n            var frame = (this.elapsed * this.framerate + 0.0000001) | 0;\r\n            this.texture = this.textures[frame] || pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"].EMPTY;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     */\r\n    AnimatedParticle.prototype.destroy = function () {\r\n        this.Particle_destroy();\r\n        this.textures = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @param art The array of art data, properly formatted for AnimatedParticle.\r\n     * @return The art, after any needed modifications.\r\n     */\r\n    AnimatedParticle.parseArt = function (art) {\r\n        var data, output, textures, tex, outTextures;\r\n        var outArr = [];\r\n        for (var i = 0; i < art.length; ++i) {\r\n            data = art[i];\r\n            outArr[i] = output = {};\r\n            output.textures = outTextures = [];\r\n            textures = data.textures;\r\n            for (var j = 0; j < textures.length; ++j) {\r\n                tex = textures[j];\r\n                if (typeof tex == \"string\")\r\n                    outTextures.push(GetTextureFromString(tex));\r\n                else if (tex instanceof pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"])\r\n                    outTextures.push(tex);\r\n                //assume an object with extra data determining duplicate frame data\r\n                else {\r\n                    var dupe = tex.count || 1;\r\n                    if (typeof tex.texture == \"string\")\r\n                        tex = GetTextureFromString(tex.texture);\r\n                    else // if(tex.texture instanceof Texture)\r\n                        tex = tex.texture;\r\n                    for (; dupe > 0; --dupe) {\r\n                        outTextures.push(tex);\r\n                    }\r\n                }\r\n            }\r\n            //use these values to signify that the animation should match the particle life time.\r\n            if (data.framerate == \"matchLife\") {\r\n                //-1 means that it should be calculated\r\n                output.framerate = -1;\r\n                output.duration = 0;\r\n                output.loop = false;\r\n            }\r\n            else {\r\n                //determine if the animation should loop\r\n                output.loop = !!data.loop;\r\n                //get the framerate, default to 60\r\n                output.framerate = data.framerate > 0 ? data.framerate : 60;\r\n                //determine the duration\r\n                output.duration = outTextures.length / output.framerate;\r\n            }\r\n        }\r\n        return outArr;\r\n    };\r\n    return AnimatedParticle;\r\n}(Particle));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pixi-particles/lib/pixi-particles.es.js\n");

/***/ }),

/***/ "./node_modules/pixi-scenegraph/dist/index.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/pixi-scenegraph/dist/index.es.js ***!
  \*******************************************************/
/*! exports provided: DefaultScreenSizeCalculator, Scene, SceneManager, VERSION */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultScreenSizeCalculator\", function() { return DefaultScreenSizeCalculator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scene\", function() { return Scene; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SceneManager\", function() { return SceneManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\n\n\nvar DefaultScreenSizeCalculator = (function () {\r\n    function DefaultScreenSizeCalculator(designedWidth, designedHeight) {\r\n        this.designedWidth = designedWidth;\r\n        this.designedHeight = designedHeight;\r\n    }\r\n    DefaultScreenSizeCalculator.prototype.GetAvailableSize = function () {\r\n        return { x: window.innerWidth, y: window.innerHeight };\r\n    };\r\n    DefaultScreenSizeCalculator.prototype.GetAspectRatio = function () {\r\n        return this.designedWidth / this.designedHeight;\r\n    };\r\n    DefaultScreenSizeCalculator.prototype.CalculateSize = function (availableSize, aspect) {\r\n        var maxWidth = Math.floor(aspect * availableSize.y);\r\n        var maxHeight = Math.floor(window.innerHeight);\r\n        return { x: Math.min(maxWidth, availableSize.x), y: Math.min(maxHeight, availableSize.y) };\r\n    };\r\n    DefaultScreenSizeCalculator.prototype.CalculateScale = function (calculatedSize) {\r\n        return {\r\n            x: calculatedSize.x / this.designedWidth,\r\n            y: calculatedSize.x / this.designedWidth,\r\n        };\r\n    };\r\n    return DefaultScreenSizeCalculator;\r\n}());\n\nvar VERSION = '1.6.3';\n\nvar SceneManager = (function () {\r\n    function SceneManager(options, screenSizeCalculator) {\r\n        var _this = this;\r\n        this.currentScene = null;\r\n        this.scenes = [];\r\n        this.controllers = [];\r\n        this.animationFrameHandle = -1;\r\n        this.Destroy = function () {\r\n            cancelAnimationFrame(_this.animationFrameHandle);\r\n            if (_this.currentScene) {\r\n                _this.currentScene.pause();\r\n            }\r\n            _this.scenes.forEach(function (scene) {\r\n                _this.RemoveScene(scene);\r\n            });\r\n            _this.app.destroy(true, {\r\n                children: true,\r\n                texture: true,\r\n                baseTexture: true,\r\n            });\r\n        };\r\n        this.resizeHandler = function () {\r\n            _this.onResize(_this.screenSizeCalculator);\r\n        };\r\n        this.onRender = function (time) {\r\n            if (!_this.startTime) {\r\n                _this.startTime = Date.now();\r\n            }\r\n            _this.timeStamp = Date.now();\r\n            var dt = _this.timeStamp - _this.startTime;\r\n            if (dt > 50) {\r\n                dt = 50;\r\n            }\r\n            _this.controllers.forEach(function (ctrl) {\r\n                if (!ctrl.scope || (_this.currentScene && _this.currentScene.name === ctrl.scope)) {\r\n                    ctrl.update(dt, _this.currentScene);\r\n                }\r\n            });\r\n            if (!_this.currentScene || _this.currentScene.isPaused()) {\r\n                return;\r\n            }\r\n            _this.currentScene.onUpdate(dt, _this.timeStamp);\r\n            _this.startTime = _this.timeStamp;\r\n        };\r\n        SceneManager.logVersion();\r\n        this.masterContainer = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Container\"]();\r\n        this.app = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Application\"](options);\r\n        this.app.ticker.add(this.onRender, this);\r\n        this.app.stage = this.masterContainer;\r\n        this.designWidth = options.width || window.innerWidth;\r\n        this.designHeight = options.height || window.innerHeight;\r\n        this.screenSizeCalculator = screenSizeCalculator || new DefaultScreenSizeCalculator(this.designWidth, this.designHeight);\r\n        window.removeEventListener('resize', this.resizeHandler);\r\n        window.addEventListener('resize', this.resizeHandler, true);\r\n    }\r\n    SceneManager.logVersion = function () {\r\n        if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\r\n            var fmtPurp = 'color:#fa1;background:#ff66a5;padding:5px 0;';\r\n            var fmtTxt = 'color:#fa1;background:#000;padding:5px 0;';\r\n            var fmtHearts = 'color:#f55;background:#ffc3dc;padding:5px 0;';\r\n            var args = [\r\n                \" %c  %c pixi-scenegraph: \" + VERSION + \" \\u2730  %c  %c https://github.com/enriko-riba/pixi-scenegraph#readme \\u2764\\u2764\\u2764\\t\",\r\n                fmtPurp,\r\n                fmtTxt,\r\n                fmtPurp,\r\n                fmtHearts,\r\n            ];\r\n            console.info.apply(console, args);\r\n        }\r\n        else if (window.console) {\r\n            console.info(\"pixi-scenegraph: \" + VERSION + \" \\u2730 https://github.com/enriko-riba/pixi-scenegraph#readme  \\u2764\\u2764\\u2764\");\r\n        }\r\n    };\r\n    Object.defineProperty(SceneManager.prototype, \"Renderer\", {\r\n        get: function () {\r\n            return this.app.renderer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SceneManager.prototype, \"Application\", {\r\n        get: function () {\r\n            return this.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SceneManager.prototype.AddController = function (controller) {\r\n        this.controllers.push(controller);\r\n    };\r\n    SceneManager.prototype.RemoveController = function (controllerOrId) {\r\n        var id = typeof controllerOrId !== 'string' ? controllerOrId.id : controllerOrId;\r\n        this.controllers = this.controllers.filter(function (ctrl) { return ctrl.id !== id; });\r\n    };\r\n    Object.defineProperty(SceneManager.prototype, \"CurrentScene\", {\r\n        get: function () {\r\n            return this.currentScene;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SceneManager.prototype.AddScene = function (scene) {\r\n        this.scenes.push(scene);\r\n    };\r\n    SceneManager.prototype.RemoveAllScenes = function () {\r\n        this.scenes.forEach(function (scene) {\r\n            scene.onDestroy();\r\n            scene.destroy({ children: true, texture: true, baseTexture: true });\r\n        });\r\n        this.scenes = [];\r\n        this.currentScene = null;\r\n    };\r\n    SceneManager.prototype.RemoveScene = function (scene) {\r\n        this.scenes = this.scenes.filter(function (item, index, arr) {\r\n            return item !== scene;\r\n        });\r\n        scene.onDestroy();\r\n        scene.destroy({ children: true, texture: true, baseTexture: true });\r\n    };\r\n    SceneManager.prototype.HasScene = function (name) {\r\n        var found = this.scenes.filter(function (item) { return item.Name === name; });\r\n        return found && found.length > 0;\r\n    };\r\n    SceneManager.prototype.GetScene = function (name) {\r\n        var found = this.scenes.filter(function (item) { return item.Name === name; });\r\n        if (!found || found.length === 0) {\r\n            throw Error(\"Scene: '\" + name + \"' not found\");\r\n        }\r\n        if (found.length > 1) {\r\n            throw Error(\"Multiple scenes: '\" + name + \"' found\");\r\n        }\r\n        return found[0];\r\n    };\r\n    SceneManager.prototype.ActivateScene = function (sceneOrName) {\r\n        var scene;\r\n        if (typeof sceneOrName === 'string') {\r\n            var found = this.scenes.filter(function (item) { return item.Name === sceneOrName; });\r\n            if (!found || found.length === 0) {\r\n                throw Error(\"Scene: '\" + sceneOrName + \"' not found\");\r\n            }\r\n            if (found.length > 1) {\r\n                throw Error(\"Multiple scenes: '\" + sceneOrName + \"' found\");\r\n            }\r\n            scene = found[0];\r\n        }\r\n        else {\r\n            scene = sceneOrName;\r\n        }\r\n        if (this.currentScene && this.currentScene !== scene) {\r\n            console.log('DeactivateScene ' + this.currentScene.Name);\r\n            this.currentScene.onDeactivate();\r\n        }\r\n        console.log('ActivateScene ' + scene.Name);\r\n        this.startTime = 0;\r\n        this.lastScene = (this.currentScene !== scene ? this.currentScene : this.lastScene);\r\n        this.currentScene = scene;\r\n        this.app.renderer.backgroundColor = scene.BackGroundColor;\r\n        this.resizeHandler();\r\n        scene.onActivate();\r\n        this.masterContainer.removeChildren();\r\n        this.masterContainer.addChild(this.currentScene);\r\n        if (this.masterHudOverlay) {\r\n            this.masterContainer.addChild(this.masterHudOverlay);\r\n        }\r\n        pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"settings\"].RESOLUTION = window.devicePixelRatio;\r\n    };\r\n    SceneManager.prototype.ActivatePreviousScene = function () {\r\n        this.ActivateScene(this.lastScene);\r\n    };\r\n    Object.defineProperty(SceneManager.prototype, \"MasterHudOverlay\", {\r\n        get: function () {\r\n            return this.masterHudOverlay;\r\n        },\r\n        set: function (hud) {\r\n            this.masterHudOverlay = hud;\r\n            if (!!hud) {\r\n                this.masterContainer.removeChildren();\r\n                this.masterContainer.addChild(this.currentScene);\r\n                if (this.masterHudOverlay) {\r\n                    this.masterContainer.addChild(this.masterHudOverlay);\r\n                }\r\n                this.resizeHandler();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SceneManager.prototype.CaptureScene = function () {\r\n        console.log(\"Capturing scene, width: \" + this.app.renderer.width + \", height: \" + this.app.renderer.height);\r\n        var renderTexture = pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"RenderTexture\"].create({ width: this.app.renderer.width, height: this.app.renderer.height });\r\n        this.app.renderer.render(this.currentScene, renderTexture);\r\n        return renderTexture;\r\n    };\r\n    SceneManager.prototype.onResize = function (screenSizeCalculator) {\r\n        var avlSize = this.screenSizeCalculator.GetAvailableSize();\r\n        var aspect = this.screenSizeCalculator.GetAspectRatio();\r\n        var size = this.screenSizeCalculator.CalculateSize(avlSize, aspect);\r\n        this.app.renderer.resize(size.x, size.y);\r\n        var scale = this.screenSizeCalculator.CalculateScale(size);\r\n        if (this.currentScene) {\r\n            this.currentScene.scale.set(scale.x, scale.y);\r\n            this.currentScene.onResize();\r\n        }\r\n        if (this.masterHudOverlay) {\r\n            this.masterHudOverlay.scale.set(scale.x, scale.y);\r\n        }\r\n    };\r\n    return SceneManager;\r\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar Scene = (function (_super) {\r\n    __extends(Scene, _super);\r\n    function Scene(name) {\r\n        var _this = _super.call(this) || this;\r\n        _this.paused = false;\r\n        _this.hudScene = null;\r\n        _this.clearValue = true;\r\n        _this.backgroundColor = 0x0;\r\n        _this.Name = name;\r\n        return _this;\r\n    }\r\n    Scene.prototype.onActivate = function () {\r\n    };\r\n    Scene.prototype.onDeactivate = function () {\r\n    };\r\n    Scene.prototype.onResize = function () {\r\n    };\r\n    Scene.prototype.onUpdate = function (dt, timestamp) {\r\n    };\r\n    Scene.prototype.onDestroy = function () {\r\n    };\r\n    Object.defineProperty(Scene.prototype, \"BackGroundColor\", {\r\n        get: function () {\r\n            return this.backgroundColor;\r\n        },\r\n        set: function (color) {\r\n            this.backgroundColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scene.prototype, \"HudOverlay\", {\r\n        get: function () {\r\n            return this.hudScene;\r\n        },\r\n        set: function (hud) {\r\n            if (this.hudScene) {\r\n                this.removeChild(this.hudScene);\r\n            }\r\n            this.hudScene = hud;\r\n            if (this.hudScene) {\r\n                var maxIndex = this.children.length;\r\n                this.addChildAt(this.hudScene, maxIndex);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Scene.prototype.addChild = function () {\r\n        var child = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            child[_i] = arguments[_i];\r\n        }\r\n        var dispObj = _super.prototype.addChild.apply(this, child);\r\n        if (this.hudScene) {\r\n            var maxIndex = this.children.length - 1;\r\n            this.setChildIndex(this.hudScene, maxIndex);\r\n        }\r\n        return dispObj;\r\n    };\r\n    Scene.prototype.addChildAt = function (child, index) {\r\n        var dispObj = _super.prototype.addChildAt.call(this, child, index);\r\n        if (this.hudScene) {\r\n            var maxIndex = this.children.length - 1;\r\n            this.setChildIndex(this.hudScene, maxIndex);\r\n        }\r\n        return dispObj;\r\n    };\r\n    Scene.prototype.pause = function () {\r\n        this.paused = true;\r\n    };\r\n    Scene.prototype.resume = function () {\r\n        this.paused = false;\r\n    };\r\n    Scene.prototype.isPaused = function () {\r\n        return this.paused;\r\n    };\r\n    Object.defineProperty(Scene.prototype, \"clear\", {\r\n        get: function () {\r\n            return this.clearValue;\r\n        },\r\n        set: function (clearFlag) {\r\n            this.clearValue = clearFlag;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Scene;\r\n}(pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Container\"]));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pixi-scenegraph/dist/index.es.js\n");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__extends\", function() { return __extends; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__rest\", function() { return __rest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__decorate\", function() { return __decorate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__param\", function() { return __param; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__metadata\", function() { return __metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__awaiter\", function() { return __awaiter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__generator\", function() { return __generator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__exportStar\", function() { return __exportStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__values\", function() { return __values; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__read\", function() { return __read; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spread\", function() { return __spread; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spreadArrays\", function() { return __spreadArrays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__await\", function() { return __await; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncGenerator\", function() { return __asyncGenerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncDelegator\", function() { return __asyncDelegator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncValues\", function() { return __asyncValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__makeTemplateObject\", function() { return __makeTemplateObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importStar\", function() { return __importStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importDefault\", function() { return __importDefault; });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.js\n");

/***/ })

}]);