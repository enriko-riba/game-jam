(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~common"],{

/***/ "./node_modules/@pixi/filter-adjustment/lib/filter-adjustment.es.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pixi/filter-adjustment/lib/filter-adjustment.es.js ***!
  \**************************************************************************/
/*! exports provided: AdjustmentFilter */
/*! exports used: AdjustmentFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AdjustmentFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-adjustment - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-adjustment is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float gamma;\nuniform float contrast;\nuniform float saturation;\nuniform float brightness;\nuniform float red;\nuniform float green;\nuniform float blue;\nuniform float alpha;\n\nvoid main(void)\n{\n    vec4 c = texture2D(uSampler, vTextureCoord);\n\n    if (c.a > 0.0) {\n        c.rgb /= c.a;\n\n        vec3 rgb = pow(c.rgb, vec3(1. / gamma));\n        rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb)), rgb, saturation), contrast);\n        rgb.r *= red;\n        rgb.g *= green;\n        rgb.b *= blue;\n        c.rgb = rgb * brightness;\n\n        c.rgb *= c.a;\n    }\n\n    gl_FragColor = c * alpha;\n}\n",AdjustmentFilter=function(t){function r(r){t.call(this,vertex,fragment),Object.assign(this,{gamma:1,saturation:1,contrast:1,brightness:1,red:1,green:1,blue:1,alpha:1},r)}return t&&(r.__proto__=t),r.prototype=Object.create(t&&t.prototype),r.prototype.constructor=r,r.prototype.apply=function(t,r,n,e){this.uniforms.gamma=Math.max(this.gamma,1e-4),this.uniforms.saturation=this.saturation,this.uniforms.contrast=this.contrast,this.uniforms.brightness=this.brightness,this.uniforms.red=this.red,this.uniforms.green=this.green,this.uniforms.blue=this.blue,this.uniforms.alpha=this.alpha,t.applyFilter(this,r,n,e)},r}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-advanced-bloom/lib/filter-advanced-bloom.es.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@pixi/filter-advanced-bloom/lib/filter-advanced-bloom.es.js ***!
  \**********************************************************************************/
/*! exports provided: AdvancedBloomFilter */
/*! exports used: AdvancedBloomFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AdvancedBloomFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pixi/filter-kawase-blur */ "./node_modules/@pixi/filter-kawase-blur/lib/filter-kawase-blur.es.js");
/*!
 * @pixi/filter-advanced-bloom - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-advanced-bloom is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="\nuniform sampler2D uSampler;\nvarying vec2 vTextureCoord;\n\nuniform float threshold;\n\nvoid main() {\n    vec4 color = texture2D(uSampler, vTextureCoord);\n\n    // A simple & fast algorithm for getting brightness.\n    // It's inaccuracy , but good enought for this feature.\n    float _max = max(max(color.r, color.g), color.b);\n    float _min = min(min(color.r, color.g), color.b);\n    float brightness = (_max + _min) * 0.5;\n\n    if(brightness > threshold) {\n        gl_FragColor = color;\n    } else {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}\n",ExtractBrightnessFilter=function(t){function e(e){void 0===e&&(e=.5),t.call(this,vertex,fragment),this.threshold=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var r={threshold:{configurable:!0}};return r.threshold.get=function(){return this.uniforms.threshold},r.threshold.set=function(t){this.uniforms.threshold=t},Object.defineProperties(e.prototype,r),e}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]),fragment$1="uniform sampler2D uSampler;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D bloomTexture;\nuniform float bloomScale;\nuniform float brightness;\n\nvoid main() {\n    vec4 color = texture2D(uSampler, vTextureCoord);\n    color.rgb *= brightness;\n    vec4 bloomColor = vec4(texture2D(bloomTexture, vTextureCoord).rgb, 0.0);\n    bloomColor.rgb *= bloomScale;\n    gl_FragColor = color + bloomColor;\n}\n",AdvancedBloomFilter=function(t){function e(e){t.call(this,vertex,fragment$1),"number"==typeof e&&(e={threshold:e}),e=Object.assign({threshold:.5,bloomScale:1,brightness:1,kernels:null,blur:8,quality:4,pixelSize:1,resolution:pixi_js__WEBPACK_IMPORTED_MODULE_0__["settings"].RESOLUTION},e),this.bloomScale=e.bloomScale,this.brightness=e.brightness;var r=e.kernels,o=e.blur,i=e.quality,n=e.pixelSize,l=e.resolution;this._extractFilter=new ExtractBrightnessFilter(e.threshold),this._extractFilter.resolution=l,this._blurFilter=r?new _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_1__[/* KawaseBlurFilter */ "a"](r):new _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_1__[/* KawaseBlurFilter */ "a"](o,i),this.pixelSize=n,this.resolution=l}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var r={resolution:{configurable:!0},threshold:{configurable:!0},kernels:{configurable:!0},blur:{configurable:!0},quality:{configurable:!0},pixelSize:{configurable:!0}};return e.prototype.apply=function(t,e,r,o,i){var n=t.getRenderTarget(!0);this._extractFilter.apply(t,e,n,!0,i);var l=t.getRenderTarget(!0);this._blurFilter.apply(t,n,l,!0,i),this.uniforms.bloomScale=this.bloomScale,this.uniforms.brightness=this.brightness,this.uniforms.bloomTexture=l,t.applyFilter(this,e,r,o),t.returnRenderTarget(l),t.returnRenderTarget(n)},r.resolution.get=function(){return this._resolution},r.resolution.set=function(t){this._resolution=t,this._extractFilter&&(this._extractFilter.resolution=t),this._blurFilter&&(this._blurFilter.resolution=t)},r.threshold.get=function(){return this._extractFilter.threshold},r.threshold.set=function(t){this._extractFilter.threshold=t},r.kernels.get=function(){return this._blurFilter.kernels},r.kernels.set=function(t){this._blurFilter.kernels=t},r.blur.get=function(){return this._blurFilter.blur},r.blur.set=function(t){this._blurFilter.blur=t},r.quality.get=function(){return this._blurFilter.quality},r.quality.set=function(t){this._blurFilter.quality=t},r.pixelSize.get=function(){return this._blurFilter.pixelSize},r.pixelSize.set=function(t){this._blurFilter.pixelSize=t},Object.defineProperties(e.prototype,r),e}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-ascii/lib/filter-ascii.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@pixi/filter-ascii/lib/filter-ascii.es.js ***!
  \****************************************************************/
/*! exports provided: AsciiFilter */
/*! exports used: AsciiFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsciiFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-ascii - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-ascii is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\n\nuniform vec4 filterArea;\nuniform float pixelSize;\nuniform sampler2D uSampler;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n    return floor( coord / size ) * size;\n}\n\nvec2 getMod(vec2 coord, vec2 size)\n{\n    return mod( coord , size) / size;\n}\n\nfloat character(float n, vec2 p)\n{\n    p = floor(p*vec2(4.0, -4.0) + 2.5);\n    if (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)\n    {\n        if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\n    }\n    return 0.0;\n}\n\nvoid main()\n{\n    vec2 coord = mapCoord(vTextureCoord);\n\n    // get the rounded color..\n    vec2 pixCoord = pixelate(coord, vec2(pixelSize));\n    pixCoord = unmapCoord(pixCoord);\n\n    vec4 color = texture2D(uSampler, pixCoord);\n\n    // determine the character to use\n    float gray = (color.r + color.g + color.b) / 3.0;\n\n    float n =  65536.0;             // .\n    if (gray > 0.2) n = 65600.0;    // :\n    if (gray > 0.3) n = 332772.0;   // *\n    if (gray > 0.4) n = 15255086.0; // o\n    if (gray > 0.5) n = 23385164.0; // &\n    if (gray > 0.6) n = 15252014.0; // 8\n    if (gray > 0.7) n = 13199452.0; // @\n    if (gray > 0.8) n = 11512810.0; // #\n\n    // get the mod..\n    vec2 modd = getMod(coord, vec2(pixelSize));\n\n    gl_FragColor = color * character( n, vec2(-1.0) + modd * 2.0);\n\n}",AsciiFilter=function(e){function n(n){void 0===n&&(n=8),e.call(this,vertex,fragment),this.size=n}e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n;var o={size:{configurable:!0}};return o.size.get=function(){return this.uniforms.pixelSize},o.size.set=function(e){this.uniforms.pixelSize=e},Object.defineProperties(n.prototype,o),n}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-bevel/lib/filter-bevel.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@pixi/filter-bevel/lib/filter-bevel.es.js ***!
  \****************************************************************/
/*! exports provided: BevelFilter */
/*! exports used: BevelFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BevelFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-bevel - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-bevel is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="precision mediump float;\n\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\n\nuniform float transformX;\nuniform float transformY;\nuniform vec3 lightColor;\nuniform float lightAlpha;\nuniform vec3 shadowColor;\nuniform float shadowAlpha;\n\nvoid main(void) {\n    vec2 transform = vec2(1.0 / filterArea) * vec2(transformX, transformY);\n    vec4 color = texture2D(uSampler, vTextureCoord);\n    float light = texture2D(uSampler, vTextureCoord - transform).a;\n    float shadow = texture2D(uSampler, vTextureCoord + transform).a;\n\n    color.rgb = mix(color.rgb, lightColor, clamp((color.a - light) * lightAlpha, 0.0, 1.0));\n    color.rgb = mix(color.rgb, shadowColor, clamp((color.a - shadow) * shadowAlpha, 0.0, 1.0));\n    gl_FragColor = vec4(color.rgb * color.a, color.a);\n}\n",BevelFilter=function(o){function t(t){void 0===t&&(t={}),o.call(this,vertex,fragment),this.uniforms.lightColor=new Float32Array(3),this.uniforms.shadowColor=new Float32Array(3),t=Object.assign({rotation:45,thickness:2,lightColor:16777215,lightAlpha:.7,shadowColor:0,shadowAlpha:.7},t),this.rotation=t.rotation,this.thickness=t.thickness,this.lightColor=t.lightColor,this.lightAlpha=t.lightAlpha,this.shadowColor=t.shadowColor,this.shadowAlpha=t.shadowAlpha}o&&(t.__proto__=o),t.prototype=Object.create(o&&o.prototype),t.prototype.constructor=t;var r={rotation:{configurable:!0},thickness:{configurable:!0},lightColor:{configurable:!0},lightAlpha:{configurable:!0},shadowColor:{configurable:!0},shadowAlpha:{configurable:!0}};return t.prototype._updateTransform=function(){this.uniforms.transformX=this._thickness*Math.cos(this._angle),this.uniforms.transformY=this._thickness*Math.sin(this._angle)},r.rotation.get=function(){return this._angle/pixi_js__WEBPACK_IMPORTED_MODULE_0__["DEG_TO_RAD"]},r.rotation.set=function(o){this._angle=o*pixi_js__WEBPACK_IMPORTED_MODULE_0__["DEG_TO_RAD"],this._updateTransform()},r.thickness.get=function(){return this._thickness},r.thickness.set=function(o){this._thickness=o,this._updateTransform()},r.lightColor.get=function(){return pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(this.uniforms.lightColor)},r.lightColor.set=function(o){pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(o,this.uniforms.lightColor)},r.lightAlpha.get=function(){return this.uniforms.lightAlpha},r.lightAlpha.set=function(o){this.uniforms.lightAlpha=o},r.shadowColor.get=function(){return pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(this.uniforms.shadowColor)},r.shadowColor.set=function(o){pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(o,this.uniforms.shadowColor)},r.shadowAlpha.get=function(){return this.uniforms.shadowAlpha},r.shadowAlpha.set=function(o){this.uniforms.shadowAlpha=o},Object.defineProperties(t.prototype,r),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-bloom/lib/filter-bloom.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@pixi/filter-bloom/lib/filter-bloom.es.js ***!
  \****************************************************************/
/*! exports provided: BloomFilter */
/*! exports used: BloomFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BloomFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-bloom - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-bloom is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var ref=pixi_js__WEBPACK_IMPORTED_MODULE_0__["filters"],BlurXFilter=ref.BlurXFilter,BlurYFilter=ref.BlurYFilter,AlphaFilter=ref.AlphaFilter,BloomFilter=function(r){function t(t,e,l,i){var u,o;void 0===t&&(t=2),void 0===e&&(e=4),void 0===l&&(l=pixi_js__WEBPACK_IMPORTED_MODULE_0__["settings"].RESOLUTION),void 0===i&&(i=5),r.call(this),"number"==typeof t?(u=t,o=t):t instanceof pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"]?(u=t.x,o=t.y):Array.isArray(t)&&(u=t[0],o=t[1]),this.blurXFilter=new BlurXFilter(u,e,l,i),this.blurYFilter=new BlurYFilter(o,e,l,i),this.blurYFilter.blendMode=pixi_js__WEBPACK_IMPORTED_MODULE_0__["BLEND_MODES"].SCREEN,this.defaultFilter=new AlphaFilter}r&&(t.__proto__=r),t.prototype=Object.create(r&&r.prototype),t.prototype.constructor=t;var e={blur:{configurable:!0},blurX:{configurable:!0},blurY:{configurable:!0}};return t.prototype.apply=function(r,t,e){var l=r.getRenderTarget(!0);this.defaultFilter.apply(r,t,e),this.blurXFilter.apply(r,t,l),this.blurYFilter.apply(r,l,e),r.returnRenderTarget(l)},e.blur.get=function(){return this.blurXFilter.blur},e.blur.set=function(r){this.blurXFilter.blur=this.blurYFilter.blur=r},e.blurX.get=function(){return this.blurXFilter.blur},e.blurX.set=function(r){this.blurXFilter.blur=r},e.blurY.get=function(){return this.blurYFilter.blur},e.blurY.set=function(r){this.blurYFilter.blur=r},Object.defineProperties(t.prototype,e),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-bulge-pinch/lib/filter-bulge-pinch.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pixi/filter-bulge-pinch/lib/filter-bulge-pinch.es.js ***!
  \****************************************************************************/
/*! exports provided: BulgePinchFilter */
/*! exports used: BulgePinchFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BulgePinchFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-bulge-pinch - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-bulge-pinch is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="uniform float radius;\nuniform float strength;\nuniform vec2 center;\nuniform sampler2D uSampler;\nvarying vec2 vTextureCoord;\n\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\nuniform vec2 dimensions;\n\nvoid main()\n{\n    vec2 coord = vTextureCoord * filterArea.xy;\n    coord -= center * dimensions.xy;\n    float distance = length(coord);\n    if (distance < radius) {\n        float percent = distance / radius;\n        if (strength > 0.0) {\n            coord *= mix(1.0, smoothstep(0.0, radius / distance, percent), strength * 0.75);\n        } else {\n            coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\n        }\n    }\n    coord += center * dimensions.xy;\n    coord /= filterArea.xy;\n    vec2 clampedCoord = clamp(coord, filterClamp.xy, filterClamp.zw);\n    vec4 color = texture2D(uSampler, clampedCoord);\n    if (coord != clampedCoord) {\n        color *= max(0.0, 1.0 - length(coord - clampedCoord));\n    }\n\n    gl_FragColor = color;\n}\n",BulgePinchFilter=function(e){function r(r,n,t){e.call(this,vertex,fragment),this.uniforms.dimensions=new Float32Array(2),this.center=r||[.5,.5],this.radius=n||100,this.strength=t||1}e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r;var n={radius:{configurable:!0},strength:{configurable:!0},center:{configurable:!0}};return r.prototype.apply=function(e,r,n,t){this.uniforms.dimensions[0]=r.sourceFrame.width,this.uniforms.dimensions[1]=r.sourceFrame.height,e.applyFilter(this,r,n,t)},n.radius.get=function(){return this.uniforms.radius},n.radius.set=function(e){this.uniforms.radius=e},n.strength.get=function(){return this.uniforms.strength},n.strength.set=function(e){this.uniforms.strength=e},n.center.get=function(){return this.uniforms.center},n.center.set=function(e){this.uniforms.center=e},Object.defineProperties(r.prototype,n),r}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-color-map/lib/filter-color-map.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@pixi/filter-color-map/lib/filter-color-map.es.js ***!
  \************************************************************************/
/*! exports provided: ColorMapFilter */
/*! exports used: ColorMapFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorMapFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-color-map - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-color-map is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform sampler2D colorMap;\n\nuniform float _mix;\nuniform float _size;\nuniform float _sliceSize;\nuniform float _slicePixelSize;\nuniform float _sliceInnerSize;\n\nvoid main() {\n    vec4 color = texture2D(uSampler, vTextureCoord.xy);\n\n    float sliceIndex = color.b * (_size - 1.0);\n    float zSlice0 = floor(sliceIndex);\n    float zSlice1 = ceil(sliceIndex);\n\n    float xOffset = _slicePixelSize * 0.5 + color.r * _sliceInnerSize;\n    float s0 = xOffset + zSlice0 * _sliceSize;\n    float s1 = xOffset + zSlice1 * _sliceSize;\n    vec4 slice0Color = texture2D(colorMap, vec2(s0, color.g));\n    vec4 slice1Color = texture2D(colorMap, vec2(s1, color.g));\n    vec4 adjusted = mix(slice0Color, slice1Color, fract(sliceIndex));\n\n    gl_FragColor = mix(color, adjusted, _mix);\n}\n",ColorMapFilter=function(e){function i(i,t,o){void 0===t&&(t=!1),void 0===o&&(o=1),e.call(this,vertex,fragment),this._size=0,this._sliceSize=0,this._slicePixelSize=0,this._sliceInnerSize=0,this._scaleMode=null,this._nearest=!1,this.nearest=t,this.mix=o,this.colorMap=i}e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i;var t={colorSize:{configurable:!0},colorMap:{configurable:!0},nearest:{configurable:!0}};return i.prototype.apply=function(e,i,t,o){this.uniforms._mix=this.mix,e.applyFilter(this,i,t,o)},t.colorSize.get=function(){return this._size},t.colorMap.get=function(){return this._colorMap},t.colorMap.set=function(e){e instanceof pixi_js__WEBPACK_IMPORTED_MODULE_0__["Texture"]||(e=pixi_js__WEBPACK_IMPORTED_MODULE_0__["Texture"].from(e)),e&&e.baseTexture&&(e.baseTexture.scaleMode=this._scaleMode,e.baseTexture.mipmap=!1,this._size=e.height,this._sliceSize=1/this._size,this._slicePixelSize=this._sliceSize/this._size,this._sliceInnerSize=this._slicePixelSize*(this._size-1),this.uniforms._size=this._size,this.uniforms._sliceSize=this._sliceSize,this.uniforms._slicePixelSize=this._slicePixelSize,this.uniforms._sliceInnerSize=this._sliceInnerSize,this.uniforms.colorMap=e),this._colorMap=e},t.nearest.get=function(){return this._nearest},t.nearest.set=function(e){this._nearest=e,this._scaleMode=e?pixi_js__WEBPACK_IMPORTED_MODULE_0__["SCALE_MODES"].NEAREST:pixi_js__WEBPACK_IMPORTED_MODULE_0__["SCALE_MODES"].LINEAR;var i=this._colorMap;i&&i.baseTexture&&(i.baseTexture._glTextures={},i.baseTexture.scaleMode=this._scaleMode,i.baseTexture.mipmap=!1,i._updateID++,i.baseTexture.emit("update",i.baseTexture))},i.prototype.updateColorMap=function(){var e=this._colorMap;e&&e.baseTexture&&(e._updateID++,e.baseTexture.emit("update",e.baseTexture),this.colorMap=e)},i.prototype.destroy=function(i){this._colorMap&&this._colorMap.destroy(i),e.prototype.destroy.call(this)},Object.defineProperties(i.prototype,t),i}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-color-replace/lib/filter-color-replace.es.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@pixi/filter-color-replace/lib/filter-color-replace.es.js ***!
  \********************************************************************************/
/*! exports provided: ColorReplaceFilter */
/*! exports used: ColorReplaceFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorReplaceFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-color-replace - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-color-replace is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec3 originalColor;\nuniform vec3 newColor;\nuniform float epsilon;\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\n    float colorDistance = length(colorDiff);\n    float doReplace = step(colorDistance, epsilon);\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\n}\n",ColorReplaceFilter=function(o){function r(r,e,n){void 0===r&&(r=16711680),void 0===e&&(e=0),void 0===n&&(n=.4),o.call(this,vertex,fragment),this.uniforms.originalColor=new Float32Array(3),this.uniforms.newColor=new Float32Array(3),this.originalColor=r,this.newColor=e,this.epsilon=n}o&&(r.__proto__=o),r.prototype=Object.create(o&&o.prototype),r.prototype.constructor=r;var e={originalColor:{configurable:!0},newColor:{configurable:!0},epsilon:{configurable:!0}};return e.originalColor.set=function(o){var r=this.uniforms.originalColor;"number"==typeof o?(pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(o,r),this._originalColor=o):(r[0]=o[0],r[1]=o[1],r[2]=o[2],this._originalColor=pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(r))},e.originalColor.get=function(){return this._originalColor},e.newColor.set=function(o){var r=this.uniforms.newColor;"number"==typeof o?(pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(o,r),this._newColor=o):(r[0]=o[0],r[1]=o[1],r[2]=o[2],this._newColor=pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(r))},e.newColor.get=function(){return this._newColor},e.epsilon.set=function(o){this.uniforms.epsilon=o},e.epsilon.get=function(){return this.uniforms.epsilon},Object.defineProperties(r.prototype,e),r}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-convolution/lib/filter-convolution.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pixi/filter-convolution/lib/filter-convolution.es.js ***!
  \****************************************************************************/
/*! exports provided: ConvolutionFilter */
/*! exports used: ConvolutionFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConvolutionFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-convolution - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-convolution is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="precision mediump float;\n\nvarying mediump vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec2 texelSize;\nuniform float matrix[9];\n\nvoid main(void)\n{\n   vec4 c11 = texture2D(uSampler, vTextureCoord - texelSize); // top left\n   vec4 c12 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - texelSize.y)); // top center\n   vec4 c13 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y - texelSize.y)); // top right\n\n   vec4 c21 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y)); // mid left\n   vec4 c22 = texture2D(uSampler, vTextureCoord); // mid center\n   vec4 c23 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y)); // mid right\n\n   vec4 c31 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y + texelSize.y)); // bottom left\n   vec4 c32 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + texelSize.y)); // bottom center\n   vec4 c33 = texture2D(uSampler, vTextureCoord + texelSize); // bottom right\n\n   gl_FragColor =\n       c11 * matrix[0] + c12 * matrix[1] + c13 * matrix[2] +\n       c21 * matrix[3] + c22 * matrix[4] + c23 * matrix[5] +\n       c31 * matrix[6] + c32 * matrix[7] + c33 * matrix[8];\n\n   gl_FragColor.a = c22.a;\n}\n",ConvolutionFilter=function(e){function t(t,r,o){e.call(this,vertex,fragment),this.uniforms.texelSize=new Float32Array(9),this.matrix=t,this.width=r,this.height=o}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={matrix:{configurable:!0},width:{configurable:!0},height:{configurable:!0}};return r.matrix.get=function(){return this.uniforms.matrix},r.matrix.set=function(e){this.uniforms.matrix=new Float32Array(e)},r.width.get=function(){return 1/this.uniforms.texelSize[0]},r.width.set=function(e){this.uniforms.texelSize[0]=1/e},r.height.get=function(){return 1/this.uniforms.texelSize[1]},r.height.set=function(e){this.uniforms.texelSize[1]=1/e},Object.defineProperties(t.prototype,r),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-cross-hatch/lib/filter-cross-hatch.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pixi/filter-cross-hatch/lib/filter-cross-hatch.es.js ***!
  \****************************************************************************/
/*! exports provided: CrossHatchFilter */
/*! exports used: CrossHatchFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CrossHatchFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-cross-hatch - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-cross-hatch is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void)\n{\n    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);\n\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\n    if (lum < 1.00)\n    {\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\n    if (lum < 0.75)\n    {\n        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\n    if (lum < 0.50)\n    {\n        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\n    if (lum < 0.3)\n    {\n        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n}\n",CrossHatchFilter=function(r){function o(){r.call(this,vertex,fragment)}return r&&(o.__proto__=r),o.prototype=Object.create(r&&r.prototype),o.prototype.constructor=o,o}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-crt/lib/filter-crt.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@pixi/filter-crt/lib/filter-crt.es.js ***!
  \************************************************************/
/*! exports provided: CRTFilter */
/*! exports used: CRTFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CRTFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-crt - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-crt is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\nuniform vec2 dimensions;\n\nconst float SQRT_2 = 1.414213;\n\nconst float light = 1.0;\n\nuniform float curvature;\nuniform float lineWidth;\nuniform float lineContrast;\nuniform bool verticalLine;\nuniform float noise;\nuniform float noiseSize;\n\nuniform float vignetting;\nuniform float vignettingAlpha;\nuniform float vignettingBlur;\n\nuniform float seed;\nuniform float time;\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main(void)\n{\n    vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\n    vec2 coord = pixelCoord / dimensions;\n\n    vec2 dir = vec2(coord - vec2(0.5, 0.5));\n\n    float _c = curvature > 0. ? curvature : 1.;\n    float k = curvature > 0. ?(length(dir * dir) * 0.25 * _c * _c + 0.935 * _c) : 1.;\n    vec2 uv = dir * k;\n\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\n    vec3 rgb = gl_FragColor.rgb;\n\n\n    if (noise > 0.0 && noiseSize > 0.0)\n    {\n        pixelCoord.x = floor(pixelCoord.x / noiseSize);\n        pixelCoord.y = floor(pixelCoord.y / noiseSize);\n        float _noise = rand(pixelCoord * noiseSize * seed) - 0.5;\n        rgb += _noise * noise;\n    }\n\n    if (lineWidth > 0.0) {\n        float v = (verticalLine ? uv.x * dimensions.x : uv.y * dimensions.y) * min(1.0, 2.0 / lineWidth ) / _c;\n        float j = 1. + cos(v * 1.2 - time) * 0.5 * lineContrast;\n        rgb *= j;\n        float segment = verticalLine ? mod((dir.x + .5) * dimensions.x, 4.) : mod((dir.y + .5) * dimensions.y, 4.);\n        rgb *= 0.99 + ceil(segment) * 0.015;\n    }\n\n    if (vignetting > 0.0)\n    {\n        float outter = SQRT_2 - vignetting * SQRT_2;\n        float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignettingBlur * SQRT_2), 0.0, 1.0);\n        rgb *= darker + (1.0 - darker) * (1.0 - vignettingAlpha);\n    }\n\n    gl_FragColor.rgb = rgb;\n}\n",CRTFilter=function(n){function i(i){n.call(this,vertex,fragment),this.uniforms.dimensions=new Float32Array(2),this.time=0,this.seed=0,Object.assign(this,{curvature:1,lineWidth:1,lineContrast:.25,verticalLine:!1,noise:0,noiseSize:1,seed:0,vignetting:.3,vignettingAlpha:1,vignettingBlur:.3,time:0},i)}n&&(i.__proto__=n),i.prototype=Object.create(n&&n.prototype),i.prototype.constructor=i;var t={curvature:{configurable:!0},lineWidth:{configurable:!0},lineContrast:{configurable:!0},verticalLine:{configurable:!0},noise:{configurable:!0},noiseSize:{configurable:!0},vignetting:{configurable:!0},vignettingAlpha:{configurable:!0},vignettingBlur:{configurable:!0}};return i.prototype.apply=function(n,i,t,e){this.uniforms.dimensions[0]=i.sourceFrame.width,this.uniforms.dimensions[1]=i.sourceFrame.height,this.uniforms.seed=this.seed,this.uniforms.time=this.time,n.applyFilter(this,i,t,e)},t.curvature.set=function(n){this.uniforms.curvature=n},t.curvature.get=function(){return this.uniforms.curvature},t.lineWidth.set=function(n){this.uniforms.lineWidth=n},t.lineWidth.get=function(){return this.uniforms.lineWidth},t.lineContrast.set=function(n){this.uniforms.lineContrast=n},t.lineContrast.get=function(){return this.uniforms.lineContrast},t.verticalLine.set=function(n){this.uniforms.verticalLine=n},t.verticalLine.get=function(){return this.uniforms.verticalLine},t.noise.set=function(n){this.uniforms.noise=n},t.noise.get=function(){return this.uniforms.noise},t.noiseSize.set=function(n){this.uniforms.noiseSize=n},t.noiseSize.get=function(){return this.uniforms.noiseSize},t.vignetting.set=function(n){this.uniforms.vignetting=n},t.vignetting.get=function(){return this.uniforms.vignetting},t.vignettingAlpha.set=function(n){this.uniforms.vignettingAlpha=n},t.vignettingAlpha.get=function(){return this.uniforms.vignettingAlpha},t.vignettingBlur.set=function(n){this.uniforms.vignettingBlur=n},t.vignettingBlur.get=function(){return this.uniforms.vignettingBlur},Object.defineProperties(i.prototype,t),i}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-dot/lib/filter-dot.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@pixi/filter-dot/lib/filter-dot.es.js ***!
  \************************************************************/
/*! exports provided: DotFilter */
/*! exports used: DotFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DotFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-dot - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-dot is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="precision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform vec4 filterArea;\nuniform sampler2D uSampler;\n\nuniform float angle;\nuniform float scale;\n\nfloat pattern()\n{\n   float s = sin(angle), c = cos(angle);\n   vec2 tex = vTextureCoord * filterArea.xy;\n   vec2 point = vec2(\n       c * tex.x - s * tex.y,\n       s * tex.x + c * tex.y\n   ) * scale;\n   return (sin(point.x) * sin(point.y)) * 4.0;\n}\n\nvoid main()\n{\n   vec4 color = texture2D(uSampler, vTextureCoord);\n   float average = (color.r + color.g + color.b) / 3.0;\n   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\n}\n",DotFilter=function(e){function n(n,t){void 0===n&&(n=1),void 0===t&&(t=5),e.call(this,vertex,fragment),this.scale=n,this.angle=t}e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n;var t={scale:{configurable:!0},angle:{configurable:!0}};return t.scale.get=function(){return this.uniforms.scale},t.scale.set=function(e){this.uniforms.scale=e},t.angle.get=function(){return this.uniforms.angle},t.angle.set=function(e){this.uniforms.angle=e},Object.defineProperties(n.prototype,t),n}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-drop-shadow/lib/filter-drop-shadow.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pixi/filter-drop-shadow/lib/filter-drop-shadow.es.js ***!
  \****************************************************************************/
/*! exports provided: DropShadowFilter */
/*! exports used: DropShadowFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DropShadowFilter; });
/* harmony import */ var _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/filter-kawase-blur */ "./node_modules/@pixi/filter-kawase-blur/lib/filter-kawase-blur.es.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_1__);
/*!
 * @pixi/filter-drop-shadow - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-drop-shadow is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform float alpha;\nuniform vec3 color;\nvoid main(void){\n    vec4 sample = texture2D(uSampler, vTextureCoord);\n\n    // Un-premultiply alpha before applying the color\n    if (sample.a > 0.0) {\n        sample.rgb /= sample.a;\n    }\n\n    // Premultiply alpha again\n    sample.rgb = color.rgb * sample.a;\n\n    // alpha user alpha\n    sample *= alpha;\n\n    gl_FragColor = sample;\n}",DropShadowFilter=function(t){function i(i){i&&i.constructor!==Object&&(console.warn("DropShadowFilter now uses options instead of (rotation, distance, blur, color, alpha)"),i={rotation:i},void 0!==arguments[1]&&(i.distance=arguments[1]),void 0!==arguments[2]&&(i.blur=arguments[2]),void 0!==arguments[3]&&(i.color=arguments[3]),void 0!==arguments[4]&&(i.alpha=arguments[4])),i=Object.assign({rotation:45,distance:5,color:0,alpha:.5,shadowOnly:!1,kernels:null,blur:2,quality:3,pixelSize:1,resolution:pixi_js__WEBPACK_IMPORTED_MODULE_1__["settings"].RESOLUTION},i),t.call(this);var r=i.kernels,e=i.blur,n=i.quality,o=i.pixelSize,l=i.resolution;this._tintFilter=new pixi_js__WEBPACK_IMPORTED_MODULE_1__["Filter"](vertex,fragment),this._tintFilter.uniforms.color=new Float32Array(4),this._tintFilter.resolution=l,this._blurFilter=r?new _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_0__[/* KawaseBlurFilter */ "a"](r):new _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_0__[/* KawaseBlurFilter */ "a"](e,n),this.pixelSize=o,this.resolution=l,this.targetTransform=new pixi_js__WEBPACK_IMPORTED_MODULE_1__["Matrix"];var a=i.shadowOnly,s=i.rotation,u=i.distance,p=i.alpha,h=i.color;this.shadowOnly=a,this.rotation=s,this.distance=u,this.alpha=p,this.color=h,this._updatePadding()}t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i;var r={resolution:{configurable:!0},distance:{configurable:!0},rotation:{configurable:!0},alpha:{configurable:!0},color:{configurable:!0},kernels:{configurable:!0},blur:{configurable:!0},quality:{configurable:!0},pixelSize:{configurable:!0}};return i.prototype.apply=function(t,i,r,e){var n=t.getRenderTarget();n.transform=this.targetTransform,this._tintFilter.apply(t,i,n,!0),n.transform=null,this._blurFilter.apply(t,n,r),!0!==this.shadowOnly&&t.applyFilter(this,i,r,e),t.returnRenderTarget(n)},i.prototype._updatePadding=function(){this.padding=this.distance+2*this.blur},i.prototype._updateTargetTransform=function(){this.targetTransform.tx=this.distance*Math.cos(this.angle),this.targetTransform.ty=this.distance*Math.sin(this.angle)},r.resolution.get=function(){return this._resolution},r.resolution.set=function(t){this._resolution=t,this._tintFilter&&(this._tintFilter.resolution=t),this._blurFilter&&(this._blurFilter.resolution=t)},r.distance.get=function(){return this._distance},r.distance.set=function(t){this._distance=t,this._updatePadding(),this._updateTargetTransform()},r.rotation.get=function(){return this.angle/pixi_js__WEBPACK_IMPORTED_MODULE_1__["DEG_TO_RAD"]},r.rotation.set=function(t){this.angle=t*pixi_js__WEBPACK_IMPORTED_MODULE_1__["DEG_TO_RAD"],this._updateTargetTransform()},r.alpha.get=function(){return this._tintFilter.uniforms.alpha},r.alpha.set=function(t){this._tintFilter.uniforms.alpha=t},r.color.get=function(){return pixi_js__WEBPACK_IMPORTED_MODULE_1__["utils"].rgb2hex(this._tintFilter.uniforms.color)},r.color.set=function(t){pixi_js__WEBPACK_IMPORTED_MODULE_1__["utils"].hex2rgb(t,this._tintFilter.uniforms.color)},r.kernels.get=function(){return this._blurFilter.kernels},r.kernels.set=function(t){this._blurFilter.kernels=t},r.blur.get=function(){return this._blurFilter.blur},r.blur.set=function(t){this._blurFilter.blur=t,this._updatePadding()},r.quality.get=function(){return this._blurFilter.quality},r.quality.set=function(t){this._blurFilter.quality=t},r.pixelSize.get=function(){return this._blurFilter.pixelSize},r.pixelSize.set=function(t){this._blurFilter.pixelSize=t},Object.defineProperties(i.prototype,r),i}(pixi_js__WEBPACK_IMPORTED_MODULE_1__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-emboss/lib/filter-emboss.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@pixi/filter-emboss/lib/filter-emboss.es.js ***!
  \******************************************************************/
/*! exports provided: EmbossFilter */
/*! exports used: EmbossFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EmbossFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-emboss - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-emboss is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float strength;\nuniform vec4 filterArea;\n\n\nvoid main(void)\n{\n\tvec2 onePixel = vec2(1.0 / filterArea);\n\n\tvec4 color;\n\n\tcolor.rgb = vec3(0.5);\n\n\tcolor -= texture2D(uSampler, vTextureCoord - onePixel) * strength;\n\tcolor += texture2D(uSampler, vTextureCoord + onePixel) * strength;\n\n\tcolor.rgb = vec3((color.r + color.g + color.b) / 3.0);\n\n\tfloat alpha = texture2D(uSampler, vTextureCoord).a;\n\n\tgl_FragColor = vec4(color.rgb * alpha, alpha);\n}\n",EmbossFilter=function(t){function e(e){void 0===e&&(e=5),t.call(this,vertex,fragment),this.strength=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var r={strength:{configurable:!0}};return r.strength.get=function(){return this.uniforms.strength},r.strength.set=function(t){this.uniforms.strength=t},Object.defineProperties(e.prototype,r),e}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-glitch/lib/filter-glitch.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@pixi/filter-glitch/lib/filter-glitch.es.js ***!
  \******************************************************************/
/*! exports provided: GlitchFilter */
/*! exports used: GlitchFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GlitchFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-glitch - v2.6.1
 * Compiled Thu, 03 May 2018 14:20:43 UTC
 *
 * @pixi/filter-glitch is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="// precision highp float;\n\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\nuniform vec2 dimensions;\nuniform float aspect;\n\nuniform sampler2D displacementMap;\nuniform float offset;\nuniform float sinDir;\nuniform float cosDir;\nuniform int fillMode;\n\nuniform float seed;\nuniform vec2 red;\nuniform vec2 green;\nuniform vec2 blue;\n\nconst int TRANSPARENT = 0;\nconst int ORIGINAL = 1;\nconst int LOOP = 2;\nconst int CLAMP = 3;\nconst int MIRROR = 4;\n\nvoid main(void)\n{\n    vec2 coord = (vTextureCoord * filterArea.xy) / dimensions;\n\n    if (coord.x > 1.0 || coord.y > 1.0) {\n        return;\n    }\n\n    float cx = coord.x - 0.5;\n    float cy = (coord.y - 0.5) * aspect;\n    float ny = (-sinDir * cx + cosDir * cy) / aspect + 0.5;\n\n    // displacementMap: repeat\n    // ny = ny > 1.0 ? ny - 1.0 : (ny < 0.0 ? 1.0 + ny : ny);\n\n    // displacementMap: mirror\n    ny = ny > 1.0 ? 2.0 - ny : (ny < 0.0 ? -ny : ny);\n\n    vec4 dc = texture2D(displacementMap, vec2(0.5, ny));\n\n    float displacement = (dc.r - dc.g) * (offset / filterArea.x);\n\n    coord = vTextureCoord + vec2(cosDir * displacement, sinDir * displacement * aspect);\n\n    if (fillMode == CLAMP) {\n        coord = clamp(coord, filterClamp.xy, filterClamp.zw);\n    } else {\n        if( coord.x > filterClamp.z ) {\n            if (fillMode == ORIGINAL) {\n                gl_FragColor = texture2D(uSampler, vTextureCoord);\n                return;\n            } else if (fillMode == LOOP) {\n                coord.x -= filterClamp.z;\n            } else if (fillMode == MIRROR) {\n                coord.x = filterClamp.z * 2.0 - coord.x;\n            } else {\n                gl_FragColor = vec4(0., 0., 0., 0.);\n                return;\n            }\n        } else if( coord.x < filterClamp.x ) {\n            if (fillMode == ORIGINAL) {\n                gl_FragColor = texture2D(uSampler, vTextureCoord);\n                return;\n            } else if (fillMode == LOOP) {\n                coord.x += filterClamp.z;\n            } else if (fillMode == MIRROR) {\n                coord.x *= -filterClamp.z;\n            } else {\n                gl_FragColor = vec4(0., 0., 0., 0.);\n                return;\n            }\n        }\n\n        if( coord.y > filterClamp.w ) {\n            if (fillMode == ORIGINAL) {\n                gl_FragColor = texture2D(uSampler, vTextureCoord);\n                return;\n            } else if (fillMode == LOOP) {\n                coord.y -= filterClamp.w;\n            } else if (fillMode == MIRROR) {\n                coord.y = filterClamp.w * 2.0 - coord.y;\n            } else {\n                gl_FragColor = vec4(0., 0., 0., 0.);\n                return;\n            }\n        } else if( coord.y < filterClamp.y ) {\n            if (fillMode == ORIGINAL) {\n                gl_FragColor = texture2D(uSampler, vTextureCoord);\n                return;\n            } else if (fillMode == LOOP) {\n                coord.y += filterClamp.w;\n            } else if (fillMode == MIRROR) {\n                coord.y *= -filterClamp.w;\n            } else {\n                gl_FragColor = vec4(0., 0., 0., 0.);\n                return;\n            }\n        }\n    }\n\n    gl_FragColor.r = texture2D(uSampler, coord + red * (1.0 - seed * 0.4) / filterArea.xy).r;\n    gl_FragColor.g = texture2D(uSampler, coord + green * (1.0 - seed * 0.3) / filterArea.xy).g;\n    gl_FragColor.b = texture2D(uSampler, coord + blue * (1.0 - seed * 0.2) / filterArea.xy).b;\n    gl_FragColor.a = texture2D(uSampler, coord).a;\n}\n",GlitchFilter=function(e){function i(i){void 0===i&&(i={}),e.call(this,vertex,fragment),this.uniforms.dimensions=new Float32Array(2),i=Object.assign({slices:5,offset:100,direction:0,fillMode:0,average:!1,seed:0,red:[0,0],green:[0,0],blue:[0,0],minSize:8,sampleSize:512},i),this.direction=i.direction,this.red=i.red,this.green=i.green,this.blue=i.blue,this.offset=i.offset,this.fillMode=i.fillMode,this.average=i.average,this.seed=i.seed,this.minSize=i.minSize,this.sampleSize=i.sampleSize,this._canvas=document.createElement("canvas"),this._canvas.width=4,this._canvas.height=this.sampleSize,this.texture=pixi_js__WEBPACK_IMPORTED_MODULE_0__["Texture"].fromCanvas(this._canvas,pixi_js__WEBPACK_IMPORTED_MODULE_0__["SCALE_MODES"].NEAREST),this._slices=0,this.slices=i.slices}e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i;var t={sizes:{configurable:!0},offsets:{configurable:!0},slices:{configurable:!0},direction:{configurable:!0},red:{configurable:!0},green:{configurable:!0},blue:{configurable:!0}};return i.prototype.apply=function(e,i,t,r){var n=i.sourceFrame.width,s=i.sourceFrame.height;this.uniforms.dimensions[0]=n,this.uniforms.dimensions[1]=s,this.uniforms.aspect=s/n,this.uniforms.seed=this.seed,this.uniforms.offset=this.offset,this.uniforms.fillMode=this.fillMode,e.applyFilter(this,i,t,r)},i.prototype._randomizeSizes=function(){var e=this._sizes,i=this._slices-1,t=this.sampleSize,r=Math.min(this.minSize/t,.9/this._slices);if(this.average){for(var n=this._slices,s=1,o=0;o<i;o++){var l=s/(n-o),f=Math.max(l*(1-.6*Math.random()),r);e[o]=f,s-=f}e[i]=s}else{for(var a=1,c=Math.sqrt(1/this._slices),u=0;u<i;u++){var d=Math.max(c*a*Math.random(),r);e[u]=d,a-=d}e[i]=a}this.shuffle()},i.prototype.shuffle=function(){for(var e=this._sizes,i=this._slices-1;i>0;i--){var t=Math.random()*i>>0,r=e[i];e[i]=e[t],e[t]=r}},i.prototype._randomizeOffsets=function(){for(var e=0;e<this._slices;e++)this._offsets[e]=Math.random()*(Math.random()<.5?-1:1)},i.prototype.refresh=function(){this._randomizeSizes(),this._randomizeOffsets(),this.redraw()},i.prototype.redraw=function(){var e,i=this.sampleSize,t=this.texture,r=this._canvas.getContext("2d");r.clearRect(0,0,8,i);for(var n=0,s=0;s<this._slices;s++){e=Math.floor(256*this._offsets[s]);var o=this._sizes[s]*i,l=e>0?e:0,f=e<0?-e:0;r.fillStyle="rgba("+l+", "+f+", 0, 1)",r.fillRect(0,n>>0,i,o+1>>0),n+=o}t.baseTexture.emit("update",t.baseTexture),this.uniforms.displacementMap=t},t.sizes.set=function(e){for(var i=Math.min(this._slices,e.length),t=0;t<i;t++)this._sizes[t]=e[t]},t.sizes.get=function(){return this._sizes},t.offsets.set=function(e){for(var i=Math.min(this._slices,e.length),t=0;t<i;t++)this._offsets[t]=e[t]},t.offsets.get=function(){return this._offsets},t.slices.get=function(){return this._slices},t.slices.set=function(e){this._slices!==e&&(this._slices=e,this.uniforms.slices=e,this._sizes=this.uniforms.slicesWidth=new Float32Array(e),this._offsets=this.uniforms.slicesOffset=new Float32Array(e),this.refresh())},t.direction.get=function(){return this._direction},t.direction.set=function(e){if(this._direction!==e){this._direction=e;var i=e*pixi_js__WEBPACK_IMPORTED_MODULE_0__["DEG_TO_RAD"];this.uniforms.sinDir=Math.sin(i),this.uniforms.cosDir=Math.cos(i)}},t.red.get=function(){return this.uniforms.red},t.red.set=function(e){this.uniforms.red=e},t.green.get=function(){return this.uniforms.green},t.green.set=function(e){this.uniforms.green=e},t.blue.get=function(){return this.uniforms.blue},t.blue.set=function(e){this.uniforms.blue=e},i.prototype.destroy=function(){this.texture.destroy(!0),this.texture=null,this._canvas=null,this.red=null,this.green=null,this.blue=null,this._sizes=null,this._offsets=null},Object.defineProperties(i.prototype,t),i}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);GlitchFilter.TRANSPARENT=0,GlitchFilter.ORIGINAL=1,GlitchFilter.LOOP=2,GlitchFilter.CLAMP=3,GlitchFilter.MIRROR=4;


/***/ }),

/***/ "./node_modules/@pixi/filter-glow/lib/filter-glow.es.js":
/*!**************************************************************!*\
  !*** ./node_modules/@pixi/filter-glow/lib/filter-glow.es.js ***!
  \**************************************************************/
/*! exports provided: GlowFilter */
/*! exports used: GlowFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GlowFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-glow - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-glow is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform sampler2D uSampler;\n\nuniform float distance;\nuniform float outerStrength;\nuniform float innerStrength;\nuniform vec4 glowColor;\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\nconst float PI = 3.14159265358979323846264;\n\nvoid main(void) {\n    vec2 px = vec2(1.0 / filterArea.x, 1.0 / filterArea.y);\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float totalAlpha = 0.0;\n    float maxTotalAlpha = 0.0;\n    float cosAngle;\n    float sinAngle;\n    vec2 displaced;\n    for (float angle = 0.0; angle <= PI * 2.0; angle += %QUALITY_DIST%) {\n       cosAngle = cos(angle);\n       sinAngle = sin(angle);\n       for (float curDistance = 1.0; curDistance <= %DIST%; curDistance++) {\n           displaced.x = vTextureCoord.x + cosAngle * curDistance * px.x;\n           displaced.y = vTextureCoord.y + sinAngle * curDistance * px.y;\n           curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\n           totalAlpha += (distance - curDistance) * curColor.a;\n           maxTotalAlpha += (distance - curDistance);\n       }\n    }\n    maxTotalAlpha = max(maxTotalAlpha, 0.0001);\n\n    ownColor.a = max(ownColor.a, 0.0001);\n    ownColor.rgb = ownColor.rgb / ownColor.a;\n    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);\n    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;\n    float resultAlpha = (ownColor.a + outerGlowAlpha);\n    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);\n}\n",GlowFilter=function(o){function t(t,n,r,e,l){void 0===t&&(t=10),void 0===n&&(n=4),void 0===r&&(r=0),void 0===e&&(e=16777215),void 0===l&&(l=.1),o.call(this,vertex,fragment.replace(/%QUALITY_DIST%/gi,""+(1/l/t).toFixed(7)).replace(/%DIST%/gi,""+t.toFixed(7))),this.uniforms.glowColor=new Float32Array([0,0,0,1]),this.distance=t,this.color=e,this.outerStrength=n,this.innerStrength=r}o&&(t.__proto__=o),t.prototype=Object.create(o&&o.prototype),t.prototype.constructor=t;var n={color:{configurable:!0},distance:{configurable:!0},outerStrength:{configurable:!0},innerStrength:{configurable:!0}};return n.color.get=function(){return pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(this.uniforms.glowColor)},n.color.set=function(o){pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(o,this.uniforms.glowColor)},n.distance.get=function(){return this.uniforms.distance},n.distance.set=function(o){this.uniforms.distance=o},n.outerStrength.get=function(){return this.uniforms.outerStrength},n.outerStrength.set=function(o){this.uniforms.outerStrength=o},n.innerStrength.get=function(){return this.uniforms.innerStrength},n.innerStrength.set=function(o){this.uniforms.innerStrength=o},Object.defineProperties(t.prototype,n),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-godray/lib/filter-godray.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@pixi/filter-godray/lib/filter-godray.es.js ***!
  \******************************************************************/
/*! exports provided: GodrayFilter */
/*! exports used: GodrayFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GodrayFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-godray - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-godray is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",perlin="vec3 mod289(vec3 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 permute(vec4 x)\n{\n    return mod289(((x * 34.0) + 1.0) * x);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec3 fade(vec3 t)\n{\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n}\nfloat turb(vec3 P, vec3 rep, float lacunarity, float gain)\n{\n    float sum = 0.0;\n    float sc = 1.0;\n    float totalgain = 1.0;\n    for (float i = 0.0; i < 6.0; i++)\n    {\n        sum += totalgain * pnoise(P * sc, rep);\n        sc *= lacunarity;\n        totalgain *= gain;\n    }\n    return abs(sum);\n}\n",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\nuniform vec2 dimensions;\n\nuniform vec2 light;\nuniform bool parallel;\nuniform float aspect;\n\nuniform float gain;\nuniform float lacunarity;\nuniform float time;\n\n${perlin}\n\nvoid main(void) {\n    vec2 coord = vTextureCoord * filterArea.xy / dimensions.xy;\n\n    float d;\n\n    if (parallel) {\n        float _cos = light.x;\n        float _sin = light.y;\n        d = (_cos * coord.x) + (_sin * coord.y * aspect);\n    } else {\n        float dx = coord.x - light.x / dimensions.x;\n        float dy = (coord.y - light.y / dimensions.y) * aspect;\n        float dis = sqrt(dx * dx + dy * dy) + 0.00001;\n        d = dy / dis;\n    }\n\n    vec3 dir = vec3(d, d, 0.0);\n\n    float noise = turb(dir + vec3(time, 0.0, 62.1 + time) * 0.05, vec3(480.0, 320.0, 480.0), lacunarity, gain);\n    noise = mix(noise, 0.0, 0.3);\n    //fade vertically.\n    vec4 mist = vec4(noise, noise, noise, 1.0) * (1.0 - coord.y);\n    mist.a = 1.0;\n\n    gl_FragColor = texture2D(uSampler, vTextureCoord) + mist;\n}\n",GodrayFilter=function(n){function e(e){n.call(this,vertex,fragment.replace("${perlin}",perlin)),this.uniforms.dimensions=new Float32Array(2),"number"==typeof e&&(console.warn("GodrayFilter now uses options instead of (angle, gain, lacunarity, time)"),e={angle:e},void 0!==arguments[1]&&(e.gain=arguments[1]),void 0!==arguments[2]&&(e.lacunarity=arguments[2]),void 0!==arguments[3]&&(e.time=arguments[3])),e=Object.assign({angle:30,gain:.5,lacunarity:2.5,time:0,parallel:!0,center:[0,0]},e),this._angleLight=new pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"],this.angle=e.angle,this.gain=e.gain,this.lacunarity=e.lacunarity,this.parallel=e.parallel,this.center=e.center,this.time=e.time}n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e;var t={angle:{configurable:!0},gain:{configurable:!0},lacunarity:{configurable:!0}};return e.prototype.apply=function(n,e,t,i){var o=e.sourceFrame,r=o.width,a=o.height;this.uniforms.light=this.parallel?this._angleLight:this.center,this.uniforms.parallel=this.parallel,this.uniforms.dimensions[0]=r,this.uniforms.dimensions[1]=a,this.uniforms.aspect=a/r,this.uniforms.time=this.time,n.applyFilter(this,e,t,i)},t.angle.get=function(){return this._angle},t.angle.set=function(n){this._angle=n;var e=n*pixi_js__WEBPACK_IMPORTED_MODULE_0__["DEG_TO_RAD"];this._angleLight.x=Math.cos(e),this._angleLight.y=Math.sin(e)},t.gain.get=function(){return this.uniforms.gain},t.gain.set=function(n){this.uniforms.gain=n},t.lacunarity.get=function(){return this.uniforms.lacunarity},t.lacunarity.set=function(n){this.uniforms.lacunarity=n},Object.defineProperties(e.prototype,t),e}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-kawase-blur/lib/filter-kawase-blur.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pixi/filter-kawase-blur/lib/filter-kawase-blur.es.js ***!
  \****************************************************************************/
/*! exports provided: KawaseBlurFilter */
/*! exports used: KawaseBlurFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KawaseBlurFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-kawase-blur - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-kawase-blur is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform vec2 uOffset;\n\nvoid main(void)\n{\n    vec4 color = vec4(0.0);\n\n    // Sample top left pixel\n    color += texture2D(uSampler, vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y + uOffset.y));\n\n    // Sample top right pixel\n    color += texture2D(uSampler, vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y + uOffset.y));\n\n    // Sample bottom right pixel\n    color += texture2D(uSampler, vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y - uOffset.y));\n\n    // Sample bottom left pixel\n    color += texture2D(uSampler, vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y - uOffset.y));\n\n    // Average\n    color *= 0.25;\n\n    gl_FragColor = color;\n}",fragmentClamp="\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform vec2 uOffset;\nuniform vec4 filterClamp;\n\nvoid main(void)\n{\n    vec4 color = vec4(0.0);\n\n    // Sample top left pixel\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y + uOffset.y), filterClamp.xy, filterClamp.zw));\n\n    // Sample top right pixel\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y + uOffset.y), filterClamp.xy, filterClamp.zw));\n\n    // Sample bottom right pixel\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y - uOffset.y), filterClamp.xy, filterClamp.zw));\n\n    // Sample bottom left pixel\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y - uOffset.y), filterClamp.xy, filterClamp.zw));\n\n    // Average\n    color *= 0.25;\n\n    gl_FragColor = color;\n}\n",KawaseBlurFilter=function(e){function t(t,r,i){void 0===t&&(t=4),void 0===r&&(r=3),void 0===i&&(i=!1),e.call(this,vertex,i?fragmentClamp:fragment),this.uniforms.uOffset=new Float32Array(2),this._pixelSize=new pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"],this.pixelSize=1,this._clamp=i,this._kernels=null,Array.isArray(t)?this.kernels=t:(this._blur=t,this.quality=r)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={kernels:{configurable:!0},clamp:{configurable:!0},pixelSize:{configurable:!0},quality:{configurable:!0},blur:{configurable:!0}};return t.prototype.apply=function(e,t,r,i){var o,n=this.pixelSize.x/t.size.width,l=this.pixelSize.y/t.size.height;if(1===this._quality||0===this._blur)o=this._kernels[0]+.5,this.uniforms.uOffset[0]=o*n,this.uniforms.uOffset[1]=o*l,e.applyFilter(this,t,r,i);else{for(var u,s=e.getRenderTarget(!0),a=t,f=s,p=this._quality-1,x=0;x<p;x++)o=this._kernels[x]+.5,this.uniforms.uOffset[0]=o*n,this.uniforms.uOffset[1]=o*l,e.applyFilter(this,a,f,!0),u=a,a=f,f=u;o=this._kernels[p]+.5,this.uniforms.uOffset[0]=o*n,this.uniforms.uOffset[1]=o*l,e.applyFilter(this,a,r,i),e.returnRenderTarget(s)}},t.prototype._generateKernels=function(){var e=this._blur,t=this._quality,r=[e];if(e>0)for(var i=e,o=e/t,n=1;n<t;n++)i-=o,r.push(i);this._kernels=r},r.kernels.get=function(){return this._kernels},r.kernels.set=function(e){Array.isArray(e)&&e.length>0?(this._kernels=e,this._quality=e.length,this._blur=Math.max.apply(Math,e)):(this._kernels=[0],this._quality=1)},r.clamp.get=function(){return this._clamp},r.pixelSize.set=function(e){"number"==typeof e?(this._pixelSize.x=e,this._pixelSize.y=e):Array.isArray(e)?(this._pixelSize.x=e[0],this._pixelSize.y=e[1]):e instanceof pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"]?(this._pixelSize.x=e.x,this._pixelSize.y=e.y):(this._pixelSize.x=1,this._pixelSize.y=1)},r.pixelSize.get=function(){return this._pixelSize},r.quality.get=function(){return this._quality},r.quality.set=function(e){this._quality=Math.max(1,Math.round(e)),this._generateKernels()},r.blur.get=function(){return this._blur},r.blur.set=function(e){this._blur=e,this._generateKernels()},Object.defineProperties(t.prototype,r),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-motion-blur/lib/filter-motion-blur.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pixi/filter-motion-blur/lib/filter-motion-blur.es.js ***!
  \****************************************************************************/
/*! exports provided: MotionBlurFilter */
/*! exports used: MotionBlurFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MotionBlurFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-motion-blur - v2.6.1
 * Compiled Thu, 03 May 2018 14:20:43 UTC
 *
 * @pixi/filter-motion-blur is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\n\nuniform vec2 uVelocity;\nuniform int uKernelSize;\nuniform float uOffset;\n\nconst int MAX_KERNEL_SIZE = 2048;\n\n// Notice:\n// the perfect way:\n//    int kernelSize = min(uKernelSize, MAX_KERNELSIZE);\n// BUT in real use-case , uKernelSize < MAX_KERNELSIZE almost always.\n// So use uKernelSize directly.\n\nvoid main(void)\n{\n    vec4 color = texture2D(uSampler, vTextureCoord);\n\n    if (uKernelSize == 0)\n    {\n        gl_FragColor = color;\n        return;\n    }\n\n    vec2 velocity = uVelocity / filterArea.xy;\n    float offset = -uOffset / length(uVelocity) - 0.5;\n    int k = uKernelSize - 1;\n\n    for(int i = 0; i < MAX_KERNEL_SIZE - 1; i++) {\n        if (i == k) {\n            break;\n        }\n        vec2 bias = velocity * (float(i) / float(k) + offset);\n        color += texture2D(uSampler, vTextureCoord + bias);\n    }\n    gl_FragColor = color / float(uKernelSize);\n}\n",MotionBlurFilter=function(e){function t(t,i,o){void 0===t&&(t=[0,0]),void 0===i&&(i=5),void 0===o&&(o=0),e.call(this,vertex,fragment),this.uniforms.uVelocity=new Float32Array(2),this._velocity=new pixi_js__WEBPACK_IMPORTED_MODULE_0__["ObservablePoint"](this.velocityChanged,this),this.velocity=t,this.kernelSize=i,this.offset=o}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var i={velocity:{configurable:!0},offset:{configurable:!0}};return t.prototype.apply=function(e,t,i,o){var n=this.velocity,r=n.x,l=n.y;this.uniforms.uKernelSize=0!==r||0!==l?this.kernelSize:0,e.applyFilter(this,t,i,o)},i.velocity.set=function(e){Array.isArray(e)?this._velocity.set(e[0],e[1]):(e instanceof pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"]||e instanceof pixi_js__WEBPACK_IMPORTED_MODULE_0__["ObservablePoint"])&&this._velocity.copy(e)},i.velocity.get=function(){return this._velocity},t.prototype.velocityChanged=function(){this.uniforms.uVelocity[0]=this._velocity.x,this.uniforms.uVelocity[1]=this._velocity.y},i.offset.set=function(e){this.uniforms.uOffset=e},i.offset.get=function(){return this.uniforms.uOffset},Object.defineProperties(t.prototype,i),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-multi-color-replace/lib/filter-multi-color-replace.es.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@pixi/filter-multi-color-replace/lib/filter-multi-color-replace.es.js ***!
  \********************************************************************************************/
/*! exports provided: MultiColorReplaceFilter */
/*! exports used: MultiColorReplaceFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MultiColorReplaceFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-multi-color-replace - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-multi-color-replace is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float epsilon;\n\nconst int MAX_COLORS = %maxColors%;\n\nuniform vec3 originalColors[MAX_COLORS];\nuniform vec3 targetColors[MAX_COLORS];\n\nvoid main(void)\n{\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\n\n    float alpha = gl_FragColor.a;\n    if (alpha < 0.0001)\n    {\n      return;\n    }\n\n    vec3 color = gl_FragColor.rgb / alpha;\n\n    for(int i = 0; i < MAX_COLORS; i++)\n    {\n      vec3 origColor = originalColors[i];\n      if (origColor.r < 0.0)\n      {\n        break;\n      }\n      vec3 colorDiff = origColor - color;\n      if (length(colorDiff) < epsilon)\n      {\n        vec3 targetColor = targetColors[i];\n        gl_FragColor = vec4((targetColor + colorDiff) * alpha, alpha);\n        return;\n      }\n    }\n}\n",MultiColorReplaceFilter=function(o){function r(r,e,n){void 0===e&&(e=.05),void 0===n&&(n=null),n=n||r.length,o.call(this,vertex,fragment.replace(/%maxColors%/g,n)),this.epsilon=e,this._maxColors=n,this._replacements=null,this.uniforms.originalColors=new Float32Array(3*n),this.uniforms.targetColors=new Float32Array(3*n),this.replacements=r}o&&(r.__proto__=o),r.prototype=Object.create(o&&o.prototype),r.prototype.constructor=r;var e={replacements:{configurable:!0},maxColors:{configurable:!0},epsilon:{configurable:!0}};return e.replacements.set=function(o){var r=this.uniforms.originalColors,e=this.uniforms.targetColors,n=o.length;if(n>this._maxColors)throw"Length of replacements ("+n+") exceeds the maximum colors length ("+this._maxColors+")";r[3*n]=-1;for(var t=0;t<n;t++){var i=o[t],l=i[0];"number"==typeof l?l=pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(l):i[0]=pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(l),r[3*t]=l[0],r[3*t+1]=l[1],r[3*t+2]=l[2];var a=i[1];"number"==typeof a?a=pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(a):i[1]=pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(a),e[3*t]=a[0],e[3*t+1]=a[1],e[3*t+2]=a[2]}this._replacements=o},e.replacements.get=function(){return this._replacements},r.prototype.refresh=function(){this.replacements=this._replacements},e.maxColors.get=function(){return this._maxColors},e.epsilon.set=function(o){this.uniforms.epsilon=o},e.epsilon.get=function(){return this.uniforms.epsilon},Object.defineProperties(r.prototype,e),r}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-old-film/lib/filter-old-film.es.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@pixi/filter-old-film/lib/filter-old-film.es.js ***!
  \**********************************************************************/
/*! exports provided: OldFilmFilter */
/*! exports used: OldFilmFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OldFilmFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-old-film - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-old-film is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\nuniform vec2 dimensions;\n\nuniform float sepia;\nuniform float noise;\nuniform float noiseSize;\nuniform float scratch;\nuniform float scratchDensity;\nuniform float scratchWidth;\nuniform float vignetting;\nuniform float vignettingAlpha;\nuniform float vignettingBlur;\nuniform float seed;\n\nconst float SQRT_2 = 1.414213;\nconst vec3 SEPIA_RGB = vec3(112.0 / 255.0, 66.0 / 255.0, 20.0 / 255.0);\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 Overlay(vec3 src, vec3 dst)\n{\n    // if (dst <= 0.5) then: 2 * src * dst\n    // if (dst > 0.5) then: 1 - 2 * (1 - dst) * (1 - src)\n    return vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\n                (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\n                (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)));\n}\n\n\nvoid main()\n{\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\n    vec3 color = gl_FragColor.rgb;\n\n    if (sepia > 0.0)\n    {\n        float gray = (color.x + color.y + color.z) / 3.0;\n        vec3 grayscale = vec3(gray);\n\n        color = Overlay(SEPIA_RGB, grayscale);\n\n        color = grayscale + sepia * (color - grayscale);\n    }\n\n    vec2 coord = vTextureCoord * filterArea.xy / dimensions.xy;\n\n    if (vignetting > 0.0)\n    {\n        float outter = SQRT_2 - vignetting * SQRT_2;\n        vec2 dir = vec2(vec2(0.5, 0.5) - coord);\n        dir.y *= dimensions.y / dimensions.x;\n        float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignettingBlur * SQRT_2), 0.0, 1.0);\n        color.rgb *= darker + (1.0 - darker) * (1.0 - vignettingAlpha);\n    }\n\n    if (scratchDensity > seed && scratch != 0.0)\n    {\n        float phase = seed * 256.0;\n        float s = mod(floor(phase), 2.0);\n        float dist = 1.0 / scratchDensity;\n        float d = distance(coord, vec2(seed * dist, abs(s - seed * dist)));\n        if (d < seed * 0.6 + 0.4)\n        {\n            highp float period = scratchDensity * 10.0;\n\n            float xx = coord.x * period + phase;\n            float aa = abs(mod(xx, 0.5) * 4.0);\n            float bb = mod(floor(xx / 0.5), 2.0);\n            float yy = (1.0 - bb) * aa + bb * (2.0 - aa);\n\n            float kk = 2.0 * period;\n            float dw = scratchWidth / dimensions.x * (0.75 + seed);\n            float dh = dw * kk;\n\n            float tine = (yy - (2.0 - dh));\n\n            if (tine > 0.0) {\n                float _sign = sign(scratch);\n\n                tine = s * tine / period + scratch + 0.1;\n                tine = clamp(tine + 1.0, 0.5 + _sign * 0.5, 1.5 + _sign * 0.5);\n\n                color.rgb *= tine;\n            }\n        }\n    }\n\n    if (noise > 0.0 && noiseSize > 0.0)\n    {\n        vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\n        pixelCoord.x = floor(pixelCoord.x / noiseSize);\n        pixelCoord.y = floor(pixelCoord.y / noiseSize);\n        // vec2 d = pixelCoord * noiseSize * vec2(1024.0 + seed * 512.0, 1024.0 - seed * 512.0);\n        // float _noise = snoise(d) * 0.5;\n        float _noise = rand(pixelCoord * noiseSize * seed) - 0.5;\n        color += _noise * noise;\n    }\n\n    gl_FragColor.rgb = color;\n}\n",OldFilmFilter=function(n){function t(t,i){void 0===i&&(i=0),n.call(this,vertex,fragment),this.uniforms.dimensions=new Float32Array(2),"number"==typeof t?(this.seed=t,t=null):this.seed=i,Object.assign(this,{sepia:.3,noise:.3,noiseSize:1,scratch:.5,scratchDensity:.3,scratchWidth:1,vignetting:.3,vignettingAlpha:1,vignettingBlur:.3},t)}n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t;var i={sepia:{configurable:!0},noise:{configurable:!0},noiseSize:{configurable:!0},scratch:{configurable:!0},scratchDensity:{configurable:!0},scratchWidth:{configurable:!0},vignetting:{configurable:!0},vignettingAlpha:{configurable:!0},vignettingBlur:{configurable:!0}};return t.prototype.apply=function(n,t,i,e){this.uniforms.dimensions[0]=t.sourceFrame.width,this.uniforms.dimensions[1]=t.sourceFrame.height,this.uniforms.seed=this.seed,n.applyFilter(this,t,i,e)},i.sepia.set=function(n){this.uniforms.sepia=n},i.sepia.get=function(){return this.uniforms.sepia},i.noise.set=function(n){this.uniforms.noise=n},i.noise.get=function(){return this.uniforms.noise},i.noiseSize.set=function(n){this.uniforms.noiseSize=n},i.noiseSize.get=function(){return this.uniforms.noiseSize},i.scratch.set=function(n){this.uniforms.scratch=n},i.scratch.get=function(){return this.uniforms.scratch},i.scratchDensity.set=function(n){this.uniforms.scratchDensity=n},i.scratchDensity.get=function(){return this.uniforms.scratchDensity},i.scratchWidth.set=function(n){this.uniforms.scratchWidth=n},i.scratchWidth.get=function(){return this.uniforms.scratchWidth},i.vignetting.set=function(n){this.uniforms.vignetting=n},i.vignetting.get=function(){return this.uniforms.vignetting},i.vignettingAlpha.set=function(n){this.uniforms.vignettingAlpha=n},i.vignettingAlpha.get=function(){return this.uniforms.vignettingAlpha},i.vignettingBlur.set=function(n){this.uniforms.vignettingBlur=n},i.vignettingBlur.get=function(){return this.uniforms.vignettingBlur},Object.defineProperties(t.prototype,i),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-pixelate/lib/filter-pixelate.es.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@pixi/filter-pixelate/lib/filter-pixelate.es.js ***!
  \**********************************************************************/
/*! exports provided: PixelateFilter */
/*! exports used: PixelateFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PixelateFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-pixelate - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-pixelate is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform vec2 size;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n\treturn floor( coord / size ) * size;\n}\n\nvoid main(void)\n{\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = pixelate(coord, size);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord);\n}\n",PixelateFilter=function(e){function o(o){void 0===o&&(o=10),e.call(this,vertex,fragment),this.size=o}e&&(o.__proto__=e),o.prototype=Object.create(e&&e.prototype),o.prototype.constructor=o;var r={size:{configurable:!0}};return r.size.get=function(){return this.uniforms.size},r.size.set=function(e){"number"==typeof e&&(e=[e,e]),this.uniforms.size=e},Object.defineProperties(o.prototype,r),o}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-radial-blur/lib/filter-radial-blur.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@pixi/filter-radial-blur/lib/filter-radial-blur.es.js ***!
  \****************************************************************************/
/*! exports provided: RadialBlurFilter */
/*! exports used: RadialBlurFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadialBlurFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-radial-blur - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-radial-blur is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\n\nuniform float uRadian;\nuniform vec2 uCenter;\nuniform float uRadius;\nuniform int uKernelSize;\n\nconst int MAX_KERNEL_SIZE = 2048;\n\nvoid main(void)\n{\n    vec4 color = texture2D(uSampler, vTextureCoord);\n\n    if (uKernelSize == 0)\n    {\n        gl_FragColor = color;\n        return;\n    }\n\n    float aspect = filterArea.y / filterArea.x;\n    vec2 center = uCenter.xy / filterArea.xy;\n    float gradient = uRadius / filterArea.x * 0.3;\n    float radius = uRadius / filterArea.x - gradient * 0.5;\n    int k = uKernelSize - 1;\n\n    vec2 coord = vTextureCoord;\n    vec2 dir = vec2(center - coord);\n    float dist = length(vec2(dir.x, dir.y * aspect));\n\n    float radianStep = uRadian;\n    if (radius >= 0.0 && dist > radius) {\n        float delta = dist - radius;\n        float gap = gradient;\n        float scale = 1.0 - abs(delta / gap);\n        if (scale <= 0.0) {\n            gl_FragColor = color;\n            return;\n        }\n        radianStep *= scale;\n    }\n    radianStep /= float(k);\n\n    float s = sin(radianStep);\n    float c = cos(radianStep);\n    mat2 rotationMatrix = mat2(vec2(c, -s), vec2(s, c));\n\n    for(int i = 0; i < MAX_KERNEL_SIZE - 1; i++) {\n        if (i == k) {\n            break;\n        }\n\n        coord -= center;\n        coord.y *= aspect;\n        coord = rotationMatrix * coord;\n        coord.y /= aspect;\n        coord += center;\n\n        vec4 sample = texture2D(uSampler, coord);\n\n        // switch to pre-multiplied alpha to correctly blur transparent images\n        // sample.rgb *= sample.a;\n\n        color += sample;\n    }\n\n    gl_FragColor = color / float(uKernelSize);\n}\n",RadialBlurFilter=function(n){function e(e,r,t,i){void 0===e&&(e=0),void 0===r&&(r=[0,0]),void 0===t&&(t=5),void 0===i&&(i=-1),n.call(this,vertex,fragment),this._angle=0,this.angle=e,this.center=r,this.kernelSize=t,this.radius=i}n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e;var r={angle:{configurable:!0},center:{configurable:!0},radius:{configurable:!0}};return e.prototype.apply=function(n,e,r,t){this.uniforms.uKernelSize=0!==this._angle?this.kernelSize:0,n.applyFilter(this,e,r,t)},r.angle.set=function(n){this._angle=n,this.uniforms.uRadian=n*Math.PI/180},r.angle.get=function(){return this._angle},r.center.get=function(){return this.uniforms.uCenter},r.center.set=function(n){this.uniforms.uCenter=n},r.radius.get=function(){return this.uniforms.uRadius},r.radius.set=function(n){(n<0||n===1/0)&&(n=-1),this.uniforms.uRadius=n},Object.defineProperties(e.prototype,r),e}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-reflection/lib/filter-reflection.es.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pixi/filter-reflection/lib/filter-reflection.es.js ***!
  \**************************************************************************/
/*! exports provided: ReflectionFilter */
/*! exports used: ReflectionFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReflectionFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-reflection - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-reflection is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\nuniform vec2 dimensions;\n\nuniform bool mirror;\nuniform float boundary;\nuniform vec2 amplitude;\nuniform vec2 waveLength;\nuniform vec2 alpha;\nuniform float time;\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main(void)\n{\n    vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\n    vec2 coord = pixelCoord / dimensions;\n\n    if (coord.y < boundary) {\n        gl_FragColor = texture2D(uSampler, vTextureCoord);\n        return;\n    }\n\n    float k = (coord.y - boundary) / (1. - boundary + 0.0001);\n    float areaY = boundary * dimensions.y / filterArea.y;\n    float v = areaY + areaY - vTextureCoord.y;\n    float y = mirror ? v : vTextureCoord.y;\n\n    float _amplitude = ((amplitude.y - amplitude.x) * k + amplitude.x ) / filterArea.x;\n    float _waveLength = ((waveLength.y - waveLength.x) * k + waveLength.x) / filterArea.y;\n    float _alpha = (alpha.y - alpha.x) * k + alpha.x;\n\n    float x = vTextureCoord.x + cos(v * 6.28 / _waveLength - time) * _amplitude;\n    x = clamp(x, filterClamp.x, filterClamp.z);\n\n    vec4 color = texture2D(uSampler, vec2(x, y));\n\n    gl_FragColor = color * _alpha;\n}\n",ReflectionFilter=function(r){function e(e){r.call(this,vertex,fragment),this.uniforms.amplitude=new Float32Array(2),this.uniforms.waveLength=new Float32Array(2),this.uniforms.alpha=new Float32Array(2),this.uniforms.dimensions=new Float32Array(2),Object.assign(this,{mirror:!0,boundary:.5,amplitude:[0,20],waveLength:[30,100],alpha:[1,1],time:0},e)}r&&(e.__proto__=r),e.prototype=Object.create(r&&r.prototype),e.prototype.constructor=e;var n={mirror:{configurable:!0},boundary:{configurable:!0},amplitude:{configurable:!0},waveLength:{configurable:!0},alpha:{configurable:!0}};return e.prototype.apply=function(r,e,n,t){this.uniforms.dimensions[0]=e.sourceFrame.width,this.uniforms.dimensions[1]=e.sourceFrame.height,this.uniforms.time=this.time,r.applyFilter(this,e,n,t)},n.mirror.set=function(r){this.uniforms.mirror=r},n.mirror.get=function(){return this.uniforms.mirror},n.boundary.set=function(r){this.uniforms.boundary=r},n.boundary.get=function(){return this.uniforms.boundary},n.amplitude.set=function(r){this.uniforms.amplitude[0]=r[0],this.uniforms.amplitude[1]=r[1]},n.amplitude.get=function(){return this.uniforms.amplitude},n.waveLength.set=function(r){this.uniforms.waveLength[0]=r[0],this.uniforms.waveLength[1]=r[1]},n.waveLength.get=function(){return this.uniforms.waveLength},n.alpha.set=function(r){this.uniforms.alpha[0]=r[0],this.uniforms.alpha[1]=r[1]},n.alpha.get=function(){return this.uniforms.alpha},Object.defineProperties(e.prototype,n),e}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-rgb-split/lib/filter-rgb-split.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@pixi/filter-rgb-split/lib/filter-rgb-split.es.js ***!
  \************************************************************************/
/*! exports provided: RGBSplitFilter */
/*! exports used: RGBSplitFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RGBSplitFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-rgb-split - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-rgb-split is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\nuniform vec2 red;\nuniform vec2 green;\nuniform vec2 blue;\n\nvoid main(void)\n{\n   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/filterArea.xy).r;\n   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/filterArea.xy).g;\n   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/filterArea.xy).b;\n   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;\n}\n",RGBSplitFilter=function(e){function r(r,t,n){void 0===r&&(r=[-10,0]),void 0===t&&(t=[0,10]),void 0===n&&(n=[0,0]),e.call(this,vertex,fragment),this.red=r,this.green=t,this.blue=n}e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r;var t={red:{configurable:!0},green:{configurable:!0},blue:{configurable:!0}};return t.red.get=function(){return this.uniforms.red},t.red.set=function(e){this.uniforms.red=e},t.green.get=function(){return this.uniforms.green},t.green.set=function(e){this.uniforms.green=e},t.blue.get=function(){return this.uniforms.blue},t.blue.set=function(e){this.uniforms.blue=e},Object.defineProperties(r.prototype,t),r}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-shockwave/lib/filter-shockwave.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@pixi/filter-shockwave/lib/filter-shockwave.es.js ***!
  \************************************************************************/
/*! exports provided: ShockwaveFilter */
/*! exports used: ShockwaveFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ShockwaveFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-shockwave - v2.6.1
 * Compiled Thu, 03 May 2018 14:20:43 UTC
 *
 * @pixi/filter-shockwave is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\n\nuniform vec2 center;\n\nuniform float amplitude;\nuniform float wavelength;\n// uniform float power;\nuniform float brightness;\nuniform float speed;\nuniform float radius;\n\nuniform float time;\n\nconst float PI = 3.14159;\n\nvoid main()\n{\n    float halfWavelength = wavelength * 0.5 / filterArea.x;\n    float maxRadius = radius / filterArea.x;\n    float currentRadius = time * speed / filterArea.x;\n\n    float fade = 1.0;\n\n    if (maxRadius > 0.0) {\n        if (currentRadius > maxRadius) {\n            gl_FragColor = texture2D(uSampler, vTextureCoord);\n            return;\n        }\n        fade = 1.0 - pow(currentRadius / maxRadius, 2.0);\n    }\n\n    vec2 dir = vec2(vTextureCoord - center / filterArea.xy);\n    dir.y *= filterArea.y / filterArea.x;\n    float dist = length(dir);\n\n    if (dist <= 0.0 || dist < currentRadius - halfWavelength || dist > currentRadius + halfWavelength) {\n        gl_FragColor = texture2D(uSampler, vTextureCoord);\n        return;\n    }\n\n    vec2 diffUV = normalize(dir);\n\n    float diff = (dist - currentRadius) / halfWavelength;\n\n    float p = 1.0 - pow(abs(diff), 2.0);\n\n    // float powDiff = diff * pow(p, 2.0) * ( amplitude * fade );\n    float powDiff = 1.25 * sin(diff * PI) * p * ( amplitude * fade );\n\n    vec2 offset = diffUV * powDiff / filterArea.xy;\n\n    // Do clamp :\n    vec2 coord = vTextureCoord + offset;\n    vec2 clampedCoord = clamp(coord, filterClamp.xy, filterClamp.zw);\n    vec4 color = texture2D(uSampler, clampedCoord);\n    if (coord != clampedCoord) {\n        color *= max(0.0, 1.0 - length(coord - clampedCoord));\n    }\n\n    // No clamp :\n    // gl_FragColor = texture2D(uSampler, vTextureCoord + offset);\n\n    color.rgb *= 1.0 + (brightness - 1.0) * p * fade;\n\n    gl_FragColor = color;\n}\n",ShockwaveFilter=function(e){function t(t,n,r){void 0===t&&(t=[0,0]),void 0===n&&(n={}),void 0===r&&(r=0),e.call(this,vertex,fragment),this.center=t,Array.isArray(n)&&(console.warn("Deprecated Warning: ShockwaveFilter params Array has been changed to options Object."),n={}),n=Object.assign({amplitude:30,wavelength:160,brightness:1,speed:500,radius:-1},n),this.amplitude=n.amplitude,this.wavelength=n.wavelength,this.brightness=n.brightness,this.speed=n.speed,this.radius=n.radius,this.time=r}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var n={center:{configurable:!0},amplitude:{configurable:!0},wavelength:{configurable:!0},brightness:{configurable:!0},speed:{configurable:!0},radius:{configurable:!0}};return t.prototype.apply=function(e,t,n,r){this.uniforms.time=this.time,e.applyFilter(this,t,n,r)},n.center.get=function(){return this.uniforms.center},n.center.set=function(e){this.uniforms.center=e},n.amplitude.get=function(){return this.uniforms.amplitude},n.amplitude.set=function(e){this.uniforms.amplitude=e},n.wavelength.get=function(){return this.uniforms.wavelength},n.wavelength.set=function(e){this.uniforms.wavelength=e},n.brightness.get=function(){return this.uniforms.brightness},n.brightness.set=function(e){this.uniforms.brightness=e},n.speed.get=function(){return this.uniforms.speed},n.speed.set=function(e){this.uniforms.speed=e},n.radius.get=function(){return this.uniforms.radius},n.radius.set=function(e){this.uniforms.radius=e},Object.defineProperties(t.prototype,n),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-simple-lightmap/lib/filter-simple-lightmap.es.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@pixi/filter-simple-lightmap/lib/filter-simple-lightmap.es.js ***!
  \************************************************************************************/
/*! exports provided: SimpleLightmapFilter */
/*! exports used: SimpleLightmapFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SimpleLightmapFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-simple-lightmap - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-simple-lightmap is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform sampler2D uLightmap;\nuniform vec4 filterArea;\nuniform vec2 dimensions;\nuniform vec4 ambientColor;\nvoid main() {\n    vec4 diffuseColor = texture2D(uSampler, vTextureCoord);\n    vec2 lightCoord = (vTextureCoord * filterArea.xy) / dimensions;\n    vec4 light = texture2D(uLightmap, lightCoord);\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\n    vec3 intensity = ambient + light.rgb;\n    vec3 finalColor = diffuseColor.rgb * intensity;\n    gl_FragColor = vec4(finalColor, diffuseColor.a);\n}\n",SimpleLightmapFilter=function(t){function e(e,o,r){void 0===o&&(o=0),void 0===r&&(r=1),t.call(this,vertex,fragment),this.uniforms.dimensions=new Float32Array(2),this.uniforms.ambientColor=new Float32Array([0,0,0,r]),this.texture=e,this.color=o}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var o={texture:{configurable:!0},color:{configurable:!0},alpha:{configurable:!0}};return e.prototype.apply=function(t,e,o,r){this.uniforms.dimensions[0]=e.sourceFrame.width,this.uniforms.dimensions[1]=e.sourceFrame.height,t.applyFilter(this,e,o,r)},o.texture.get=function(){return this.uniforms.uLightmap},o.texture.set=function(t){this.uniforms.uLightmap=t},o.color.set=function(t){var e=this.uniforms.ambientColor;"number"==typeof t?(pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].hex2rgb(t,e),this._color=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],this._color=pixi_js__WEBPACK_IMPORTED_MODULE_0__["utils"].rgb2hex(e))},o.color.get=function(){return this._color},o.alpha.get=function(){return this.uniforms.ambientColor[3]},o.alpha.set=function(t){this.uniforms.ambientColor[3]=t},Object.defineProperties(e.prototype,o),e}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-tilt-shift/lib/filter-tilt-shift.es.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@pixi/filter-tilt-shift/lib/filter-tilt-shift.es.js ***!
  \**************************************************************************/
/*! exports provided: TiltShiftFilter, TiltShiftXFilter, TiltShiftYFilter, TiltShiftAxisFilter */
/*! exports used: TiltShiftAxisFilter, TiltShiftFilter, TiltShiftXFilter, TiltShiftYFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TiltShiftFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return TiltShiftXFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return TiltShiftYFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TiltShiftAxisFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-tilt-shift - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-tilt-shift is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float blur;\nuniform float gradientBlur;\nuniform vec2 start;\nuniform vec2 end;\nuniform vec2 delta;\nuniform vec2 texSize;\n\nfloat random(vec3 scale, float seed)\n{\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}\n\nvoid main(void)\n{\n    vec4 color = vec4(0.0);\n    float total = 0.0;\n\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n    vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\n    float radius = smoothstep(0.0, 1.0, abs(dot(vTextureCoord * texSize - start, normal)) / gradientBlur) * blur;\n\n    for (float t = -30.0; t <= 30.0; t++)\n    {\n        float percent = (t + offset - 0.5) / 30.0;\n        float weight = 1.0 - abs(percent);\n        vec4 sample = texture2D(uSampler, vTextureCoord + delta / texSize * percent * radius);\n        sample.rgb *= sample.a;\n        color += sample * weight;\n        total += weight;\n    }\n\n    color /= total;\n    color.rgb /= color.a + 0.00001;\n\n    gl_FragColor = color;\n}\n",TiltShiftAxisFilter=function(t){function i(i,r,e,n){void 0===i&&(i=100),void 0===r&&(r=600),void 0===e&&(e=null),void 0===n&&(n=null),t.call(this,vertex,fragment),this.uniforms.blur=i,this.uniforms.gradientBlur=r,this.uniforms.start=e||new pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"](0,window.innerHeight/2),this.uniforms.end=n||new pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"](600,window.innerHeight/2),this.uniforms.delta=new pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"](30,30),this.uniforms.texSize=new pixi_js__WEBPACK_IMPORTED_MODULE_0__["Point"](window.innerWidth,window.innerHeight),this.updateDelta()}t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i;var r={blur:{configurable:!0},gradientBlur:{configurable:!0},start:{configurable:!0},end:{configurable:!0}};return i.prototype.updateDelta=function(){this.uniforms.delta.x=0,this.uniforms.delta.y=0},r.blur.get=function(){return this.uniforms.blur},r.blur.set=function(t){this.uniforms.blur=t},r.gradientBlur.get=function(){return this.uniforms.gradientBlur},r.gradientBlur.set=function(t){this.uniforms.gradientBlur=t},r.start.get=function(){return this.uniforms.start},r.start.set=function(t){this.uniforms.start=t,this.updateDelta()},r.end.get=function(){return this.uniforms.end},r.end.set=function(t){this.uniforms.end=t,this.updateDelta()},Object.defineProperties(i.prototype,r),i}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]),TiltShiftXFilter=function(t){function i(){t.apply(this,arguments)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.updateDelta=function(){var t=this.uniforms.end.x-this.uniforms.start.x,i=this.uniforms.end.y-this.uniforms.start.y,r=Math.sqrt(t*t+i*i);this.uniforms.delta.x=t/r,this.uniforms.delta.y=i/r},i}(TiltShiftAxisFilter),TiltShiftYFilter=function(t){function i(){t.apply(this,arguments)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.updateDelta=function(){var t=this.uniforms.end.x-this.uniforms.start.x,i=this.uniforms.end.y-this.uniforms.start.y,r=Math.sqrt(t*t+i*i);this.uniforms.delta.x=-i/r,this.uniforms.delta.y=t/r},i}(TiltShiftAxisFilter),TiltShiftFilter=function(t){function i(i,r,e,n){void 0===i&&(i=100),void 0===r&&(r=600),void 0===e&&(e=null),void 0===n&&(n=null),t.call(this),this.tiltShiftXFilter=new TiltShiftXFilter(i,r,e,n),this.tiltShiftYFilter=new TiltShiftYFilter(i,r,e,n)}t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i;var r={blur:{configurable:!0},gradientBlur:{configurable:!0},start:{configurable:!0},end:{configurable:!0}};return i.prototype.apply=function(t,i,r){var e=t.getRenderTarget(!0);this.tiltShiftXFilter.apply(t,i,e),this.tiltShiftYFilter.apply(t,e,r),t.returnRenderTarget(e)},r.blur.get=function(){return this.tiltShiftXFilter.blur},r.blur.set=function(t){this.tiltShiftXFilter.blur=this.tiltShiftYFilter.blur=t},r.gradientBlur.get=function(){return this.tiltShiftXFilter.gradientBlur},r.gradientBlur.set=function(t){this.tiltShiftXFilter.gradientBlur=this.tiltShiftYFilter.gradientBlur=t},r.start.get=function(){return this.tiltShiftXFilter.start},r.start.set=function(t){this.tiltShiftXFilter.start=this.tiltShiftYFilter.start=t},r.end.get=function(){return this.tiltShiftXFilter.end},r.end.set=function(t){this.tiltShiftXFilter.end=this.tiltShiftYFilter.end=t},Object.defineProperties(i.prototype,r),i}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-twist/lib/filter-twist.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@pixi/filter-twist/lib/filter-twist.es.js ***!
  \****************************************************************/
/*! exports provided: TwistFilter */
/*! exports used: TwistFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TwistFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-twist - v2.5.0
 * Compiled Wed, 10 Jan 2018 17:38:59 UTC
 *
 * @pixi/filter-twist is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float radius;\nuniform float angle;\nuniform vec2 offset;\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 twist(vec2 coord)\n{\n    coord -= offset;\n\n    float dist = length(coord);\n\n    if (dist < radius)\n    {\n        float ratioDist = (radius - dist) / radius;\n        float angleMod = ratioDist * ratioDist * angle;\n        float s = sin(angleMod);\n        float c = cos(angleMod);\n        coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);\n    }\n\n    coord += offset;\n\n    return coord;\n}\n\nvoid main(void)\n{\n\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = twist(coord);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord );\n\n}\n",TwistFilter=function(o){function n(n,r,t){void 0===n&&(n=200),void 0===r&&(r=4),void 0===t&&(t=20),o.call(this,vertex,fragment),this.radius=n,this.angle=r,this.padding=t}o&&(n.__proto__=o),n.prototype=Object.create(o&&o.prototype),n.prototype.constructor=n;var r={offset:{configurable:!0},radius:{configurable:!0},angle:{configurable:!0}};return r.offset.get=function(){return this.uniforms.offset},r.offset.set=function(o){this.uniforms.offset=o},r.radius.get=function(){return this.uniforms.radius},r.radius.set=function(o){this.uniforms.radius=o},r.angle.get=function(){return this.uniforms.angle},r.angle.set=function(o){this.uniforms.angle=o},Object.defineProperties(n.prototype,r),n}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/@pixi/filter-zoom-blur/lib/filter-zoom-blur.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@pixi/filter-zoom-blur/lib/filter-zoom-blur.es.js ***!
  \************************************************************************/
/*! exports provided: ZoomBlurFilter */
/*! exports used: ZoomBlurFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ZoomBlurFilter; });
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ "./node_modules/pixi.js/lib/index.js");
/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);
/*!
 * @pixi/filter-zoom-blur - v2.6.0
 * Compiled Wed, 28 Feb 2018 22:04:57 UTC
 *
 * @pixi/filter-zoom-blur is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\n\nuniform vec2 uCenter;\nuniform float uStrength;\nuniform float uInnerRadius;\nuniform float uRadius;\n\nconst float MAX_KERNEL_SIZE = 32.0;\n\nfloat random(vec3 scale, float seed) {\n    // use the fragment position for a different seed per-pixel\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}\n\nvoid main() {\n\n    float minGradient = uInnerRadius * 0.3;\n    float innerRadius = (uInnerRadius + minGradient * 0.5) / filterArea.x;\n\n    float gradient = uRadius * 0.3;\n    float radius = (uRadius - gradient * 0.5) / filterArea.x;\n\n    float countLimit = MAX_KERNEL_SIZE;\n\n    vec2 dir = vec2(uCenter.xy / filterArea.xy - vTextureCoord);\n    float dist = length(vec2(dir.x, dir.y * filterArea.y / filterArea.x));\n\n    float strength = uStrength;\n\n    float delta = 0.0;\n    float gap;\n    if (dist < innerRadius) {\n        delta = innerRadius - dist;\n        gap = minGradient;\n    } else if (radius >= 0.0 && dist > radius) { // radius < 0 means it's infinity\n        delta = dist - radius;\n        gap = gradient;\n    }\n\n    if (delta > 0.0) {\n        float normalCount = gap / filterArea.x;\n        delta = (normalCount - delta) / normalCount;\n        countLimit *= delta;\n        strength *= delta;\n        if (countLimit < 1.0)\n        {\n            gl_FragColor = texture2D(uSampler, vTextureCoord);\n            return;\n        }\n    }\n\n    // randomize the lookup values to hide the fixed number of samples\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n    float total = 0.0;\n    vec4 color = vec4(0.0);\n\n    dir *= strength;\n\n    for (float t = 0.0; t < MAX_KERNEL_SIZE; t++) {\n        float percent = (t + offset) / MAX_KERNEL_SIZE;\n        float weight = 4.0 * (percent - percent * percent);\n        vec2 p = vTextureCoord + dir * percent;\n        vec4 sample = texture2D(uSampler, p);\n\n        // switch to pre-multiplied alpha to correctly blur transparent images\n        // sample.rgb *= sample.a;\n\n        color += sample * weight;\n        total += weight;\n\n        if (t > countLimit){\n            break;\n        }\n    }\n\n    color /= total;\n    // switch back from pre-multiplied alpha\n    color.rgb /= color.a + 0.00001;\n\n    gl_FragColor = color;\n}\n",ZoomBlurFilter=function(n){function t(t,e,r,i){void 0===t&&(t=.1),void 0===e&&(e=[0,0]),void 0===r&&(r=0),void 0===i&&(i=-1),n.call(this,vertex,fragment),this.center=e,this.strength=t,this.innerRadius=r,this.radius=i}n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t;var e={center:{configurable:!0},strength:{configurable:!0},innerRadius:{configurable:!0},radius:{configurable:!0}};return e.center.get=function(){return this.uniforms.uCenter},e.center.set=function(n){this.uniforms.uCenter=n},e.strength.get=function(){return this.uniforms.uStrength},e.strength.set=function(n){this.uniforms.uStrength=n},e.innerRadius.get=function(){return this.uniforms.uInnerRadius},e.innerRadius.set=function(n){this.uniforms.uInnerRadius=n},e.radius.get=function(){return this.uniforms.uRadius},e.radius.set=function(n){(n<0||n===1/0)&&(n=-1),this.uniforms.uRadius=n},Object.defineProperties(t.prototype,e),t}(pixi_js__WEBPACK_IMPORTED_MODULE_0__["Filter"]);


/***/ }),

/***/ "./node_modules/pixi-filters/lib/pixi-filters.es.js":
/*!**********************************************************!*\
  !*** ./node_modules/pixi-filters/lib/pixi-filters.es.js ***!
  \**********************************************************/
/*! exports provided: AdjustmentFilter, AdvancedBloomFilter, AsciiFilter, BevelFilter, BloomFilter, BulgePinchFilter, ColorMapFilter, ColorReplaceFilter, ConvolutionFilter, CrossHatchFilter, CRTFilter, DotFilter, DropShadowFilter, EmbossFilter, GlitchFilter, GlowFilter, GodrayFilter, KawaseBlurFilter, MotionBlurFilter, MultiColorReplaceFilter, OldFilmFilter, OutlineFilter, PixelateFilter, RadialBlurFilter, ReflectionFilter, RGBSplitFilter, ShockwaveFilter, SimpleLightmapFilter, TiltShiftFilter, TiltShiftAxisFilter, TiltShiftXFilter, TiltShiftYFilter, TwistFilter, ZoomBlurFilter */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _pixi_filter_adjustment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/filter-adjustment */ "./node_modules/@pixi/filter-adjustment/lib/filter-adjustment.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdjustmentFilter", function() { return _pixi_filter_adjustment__WEBPACK_IMPORTED_MODULE_0__["a"]; });

/* harmony import */ var _pixi_filter_advanced_bloom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pixi/filter-advanced-bloom */ "./node_modules/@pixi/filter-advanced-bloom/lib/filter-advanced-bloom.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdvancedBloomFilter", function() { return _pixi_filter_advanced_bloom__WEBPACK_IMPORTED_MODULE_1__["a"]; });

/* harmony import */ var _pixi_filter_ascii__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pixi/filter-ascii */ "./node_modules/@pixi/filter-ascii/lib/filter-ascii.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsciiFilter", function() { return _pixi_filter_ascii__WEBPACK_IMPORTED_MODULE_2__["a"]; });

/* harmony import */ var _pixi_filter_bevel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pixi/filter-bevel */ "./node_modules/@pixi/filter-bevel/lib/filter-bevel.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BevelFilter", function() { return _pixi_filter_bevel__WEBPACK_IMPORTED_MODULE_3__["a"]; });

/* harmony import */ var _pixi_filter_bloom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pixi/filter-bloom */ "./node_modules/@pixi/filter-bloom/lib/filter-bloom.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BloomFilter", function() { return _pixi_filter_bloom__WEBPACK_IMPORTED_MODULE_4__["a"]; });

/* harmony import */ var _pixi_filter_bulge_pinch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pixi/filter-bulge-pinch */ "./node_modules/@pixi/filter-bulge-pinch/lib/filter-bulge-pinch.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BulgePinchFilter", function() { return _pixi_filter_bulge_pinch__WEBPACK_IMPORTED_MODULE_5__["a"]; });

/* harmony import */ var _pixi_filter_color_map__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @pixi/filter-color-map */ "./node_modules/@pixi/filter-color-map/lib/filter-color-map.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorMapFilter", function() { return _pixi_filter_color_map__WEBPACK_IMPORTED_MODULE_6__["a"]; });

/* harmony import */ var _pixi_filter_color_replace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @pixi/filter-color-replace */ "./node_modules/@pixi/filter-color-replace/lib/filter-color-replace.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorReplaceFilter", function() { return _pixi_filter_color_replace__WEBPACK_IMPORTED_MODULE_7__["a"]; });

/* harmony import */ var _pixi_filter_convolution__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @pixi/filter-convolution */ "./node_modules/@pixi/filter-convolution/lib/filter-convolution.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConvolutionFilter", function() { return _pixi_filter_convolution__WEBPACK_IMPORTED_MODULE_8__["a"]; });

/* harmony import */ var _pixi_filter_cross_hatch__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @pixi/filter-cross-hatch */ "./node_modules/@pixi/filter-cross-hatch/lib/filter-cross-hatch.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CrossHatchFilter", function() { return _pixi_filter_cross_hatch__WEBPACK_IMPORTED_MODULE_9__["a"]; });

/* harmony import */ var _pixi_filter_crt__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @pixi/filter-crt */ "./node_modules/@pixi/filter-crt/lib/filter-crt.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CRTFilter", function() { return _pixi_filter_crt__WEBPACK_IMPORTED_MODULE_10__["a"]; });

/* harmony import */ var _pixi_filter_dot__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @pixi/filter-dot */ "./node_modules/@pixi/filter-dot/lib/filter-dot.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DotFilter", function() { return _pixi_filter_dot__WEBPACK_IMPORTED_MODULE_11__["a"]; });

/* harmony import */ var _pixi_filter_drop_shadow__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @pixi/filter-drop-shadow */ "./node_modules/@pixi/filter-drop-shadow/lib/filter-drop-shadow.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropShadowFilter", function() { return _pixi_filter_drop_shadow__WEBPACK_IMPORTED_MODULE_12__["a"]; });

/* harmony import */ var _pixi_filter_emboss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @pixi/filter-emboss */ "./node_modules/@pixi/filter-emboss/lib/filter-emboss.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmbossFilter", function() { return _pixi_filter_emboss__WEBPACK_IMPORTED_MODULE_13__["a"]; });

/* harmony import */ var _pixi_filter_glitch__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @pixi/filter-glitch */ "./node_modules/@pixi/filter-glitch/lib/filter-glitch.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GlitchFilter", function() { return _pixi_filter_glitch__WEBPACK_IMPORTED_MODULE_14__["a"]; });

/* harmony import */ var _pixi_filter_glow__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @pixi/filter-glow */ "./node_modules/@pixi/filter-glow/lib/filter-glow.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GlowFilter", function() { return _pixi_filter_glow__WEBPACK_IMPORTED_MODULE_15__["a"]; });

/* harmony import */ var _pixi_filter_godray__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @pixi/filter-godray */ "./node_modules/@pixi/filter-godray/lib/filter-godray.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GodrayFilter", function() { return _pixi_filter_godray__WEBPACK_IMPORTED_MODULE_16__["a"]; });

/* harmony import */ var _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @pixi/filter-kawase-blur */ "./node_modules/@pixi/filter-kawase-blur/lib/filter-kawase-blur.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KawaseBlurFilter", function() { return _pixi_filter_kawase_blur__WEBPACK_IMPORTED_MODULE_17__["a"]; });

/* harmony import */ var _pixi_filter_motion_blur__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @pixi/filter-motion-blur */ "./node_modules/@pixi/filter-motion-blur/lib/filter-motion-blur.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MotionBlurFilter", function() { return _pixi_filter_motion_blur__WEBPACK_IMPORTED_MODULE_18__["a"]; });

/* harmony import */ var _pixi_filter_multi_color_replace__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @pixi/filter-multi-color-replace */ "./node_modules/@pixi/filter-multi-color-replace/lib/filter-multi-color-replace.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MultiColorReplaceFilter", function() { return _pixi_filter_multi_color_replace__WEBPACK_IMPORTED_MODULE_19__["a"]; });

/* harmony import */ var _pixi_filter_old_film__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @pixi/filter-old-film */ "./node_modules/@pixi/filter-old-film/lib/filter-old-film.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OldFilmFilter", function() { return _pixi_filter_old_film__WEBPACK_IMPORTED_MODULE_20__["a"]; });

/* harmony import */ var _pixi_filter_outline__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @pixi/filter-outline */ "./node_modules/@pixi/filter-outline/lib/filter-outline.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OutlineFilter", function() { return _pixi_filter_outline__WEBPACK_IMPORTED_MODULE_21__["OutlineFilter"]; });

/* harmony import */ var _pixi_filter_pixelate__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @pixi/filter-pixelate */ "./node_modules/@pixi/filter-pixelate/lib/filter-pixelate.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PixelateFilter", function() { return _pixi_filter_pixelate__WEBPACK_IMPORTED_MODULE_22__["a"]; });

/* harmony import */ var _pixi_filter_radial_blur__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @pixi/filter-radial-blur */ "./node_modules/@pixi/filter-radial-blur/lib/filter-radial-blur.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RadialBlurFilter", function() { return _pixi_filter_radial_blur__WEBPACK_IMPORTED_MODULE_23__["a"]; });

/* harmony import */ var _pixi_filter_reflection__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @pixi/filter-reflection */ "./node_modules/@pixi/filter-reflection/lib/filter-reflection.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReflectionFilter", function() { return _pixi_filter_reflection__WEBPACK_IMPORTED_MODULE_24__["a"]; });

/* harmony import */ var _pixi_filter_rgb_split__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @pixi/filter-rgb-split */ "./node_modules/@pixi/filter-rgb-split/lib/filter-rgb-split.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RGBSplitFilter", function() { return _pixi_filter_rgb_split__WEBPACK_IMPORTED_MODULE_25__["a"]; });

/* harmony import */ var _pixi_filter_shockwave__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @pixi/filter-shockwave */ "./node_modules/@pixi/filter-shockwave/lib/filter-shockwave.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ShockwaveFilter", function() { return _pixi_filter_shockwave__WEBPACK_IMPORTED_MODULE_26__["a"]; });

/* harmony import */ var _pixi_filter_simple_lightmap__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @pixi/filter-simple-lightmap */ "./node_modules/@pixi/filter-simple-lightmap/lib/filter-simple-lightmap.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SimpleLightmapFilter", function() { return _pixi_filter_simple_lightmap__WEBPACK_IMPORTED_MODULE_27__["a"]; });

/* harmony import */ var _pixi_filter_tilt_shift__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @pixi/filter-tilt-shift */ "./node_modules/@pixi/filter-tilt-shift/lib/filter-tilt-shift.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TiltShiftFilter", function() { return _pixi_filter_tilt_shift__WEBPACK_IMPORTED_MODULE_28__["b"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TiltShiftAxisFilter", function() { return _pixi_filter_tilt_shift__WEBPACK_IMPORTED_MODULE_28__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TiltShiftXFilter", function() { return _pixi_filter_tilt_shift__WEBPACK_IMPORTED_MODULE_28__["c"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TiltShiftYFilter", function() { return _pixi_filter_tilt_shift__WEBPACK_IMPORTED_MODULE_28__["d"]; });

/* harmony import */ var _pixi_filter_twist__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @pixi/filter-twist */ "./node_modules/@pixi/filter-twist/lib/filter-twist.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TwistFilter", function() { return _pixi_filter_twist__WEBPACK_IMPORTED_MODULE_29__["a"]; });

/* harmony import */ var _pixi_filter_zoom_blur__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @pixi/filter-zoom-blur */ "./node_modules/@pixi/filter-zoom-blur/lib/filter-zoom-blur.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZoomBlurFilter", function() { return _pixi_filter_zoom_blur__WEBPACK_IMPORTED_MODULE_30__["a"]; });

/*!
 * pixi-filters - v2.6.1
 * Compiled Thu, 03 May 2018 14:20:43 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,